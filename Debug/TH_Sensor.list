
TH_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007450  08007450  00017450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007904  08007904  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800790c  0800790c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200001dc  08007af0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08007af0  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7ce  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4a  00000000  00000000  0002c9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002882  00000000  00000000  0002fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def9  00000000  00000000  000325ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0ba  00000000  00000000  000404e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca59d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  000ca5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007434 	.word	0x08007434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007434 	.word	0x08007434

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f72:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d007      	beq.n	8000f8e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	79f9      	ldrb	r1, [r7, #7]
 8000f86:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d013      	beq.n	8000fe6 <Uart_isr+0x4a>
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00e      	beq.n	8000fe6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <Uart_isr+0xac>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffbc 	bl	8000f5c <store_char>
        return;
 8000fe4:	e02c      	b.n	8001040 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d027      	beq.n	8001040 <Uart_isr+0xa4>
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d022      	beq.n	8001040 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <Uart_isr+0xb0>)
 8000ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <Uart_isr+0xb0>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	429a      	cmp	r2, r3
 8001004:	d108      	bne.n	8001018 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001014:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001016:	e012      	b.n	800103e <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <Uart_isr+0xb0>)
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <Uart_isr+0xb0>)
 800101e:	5cd3      	ldrb	r3, [r2, r3]
 8001020:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <Uart_isr+0xb0>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	3301      	adds	r3, #1
 8001028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <Uart_isr+0xb0>)
 800102e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	7bba      	ldrb	r2, [r7, #14]
 800103c:	605a      	str	r2, [r3, #4]
    	return;
 800103e:	bf00      	nop
    }
}
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000240 	.word	0x20000240
 800104c:	200001f8 	.word	0x200001f8

08001050 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001058:	1d39      	adds	r1, r7, #4
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	2201      	movs	r2, #1
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <__io_putchar+0x20>)
 8001062:	f002 fc4c 	bl	80038fe <HAL_UART_Transmit>
  return ch;
 8001066:	687b      	ldr	r3, [r7, #4]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200002dc 	.word	0x200002dc

08001074 <say>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float Value_Buffer[2];

void say(char arr[]){//for debugging; can remove this useless code
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	printf("Incubator Bot: %s\r\n",arr);
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <say+0x18>)
 8001080:	f004 f8a0 	bl	80051c4 <iprintf>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	08007450 	.word	0x08007450

08001090 <CRC16>:

//temp and humid here (from datasheet)
unsigned int CRC16(uint8_t *ptr, uint8_t length){
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	unsigned int crc = 0xFFFF;
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	60fb      	str	r3, [r7, #12]
	uint8_t s = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	72fb      	strb	r3, [r7, #11]

	while(length--){
 80010a6:	e022      	b.n	80010ee <CRC16+0x5e>
		crc ^= *ptr++;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4053      	eors	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]
		for(s = 0; s < 8; s++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	72fb      	strb	r3, [r7, #11]
 80010bc:	e014      	b.n	80010e8 <CRC16+0x58>
			if((crc & 0x01) != 0){
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d009      	beq.n	80010dc <CRC16+0x4c>
				crc >>= 1;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	085b      	lsrs	r3, r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
				crc ^= 0xA001;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80010d4:	f083 0301 	eor.w	r3, r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e002      	b.n	80010e2 <CRC16+0x52>
			}else{
				crc >>= 1;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
		for(s = 0; s < 8; s++){
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	3301      	adds	r3, #1
 80010e6:	72fb      	strb	r3, [r7, #11]
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d9e7      	bls.n	80010be <CRC16+0x2e>
	while(length--){
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	1e5a      	subs	r2, r3, #1
 80010f2:	70fa      	strb	r2, [r7, #3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1d7      	bne.n	80010a8 <CRC16+0x18>
			}
		}
	}
	return crc;
 80010f8:	68fb      	ldr	r3, [r7, #12]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <sensor_get_data>:

void sensor_get_data(void){//thank you russian dood
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af02      	add	r7, sp, #8
	uint8_t data_t[3];
	uint8_t buf[8];

	data_t[0]=0x03;
 800110e:	2303      	movs	r3, #3
 8001110:	723b      	strb	r3, [r7, #8]
	data_t[1]=0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	727b      	strb	r3, [r7, #9]
	data_t[2]=0x04;
 8001116:	2304      	movs	r3, #4
 8001118:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_IsDeviceReady(&hi2c1,0xb8,2,1);
 800111a:	2301      	movs	r3, #1
 800111c:	2202      	movs	r2, #2
 800111e:	21b8      	movs	r1, #184	; 0xb8
 8001120:	4833      	ldr	r0, [pc, #204]	; (80011f0 <sensor_get_data+0xe8>)
 8001122:	f001 faeb 	bl	80026fc <HAL_I2C_IsDeviceReady>
	HAL_I2C_Master_Transmit(&hi2c1,0xb8,data_t,3,1);
 8001126:	f107 0208 	add.w	r2, r7, #8
 800112a:	2301      	movs	r3, #1
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2303      	movs	r3, #3
 8001130:	21b8      	movs	r1, #184	; 0xb8
 8001132:	482f      	ldr	r0, [pc, #188]	; (80011f0 <sensor_get_data+0xe8>)
 8001134:	f000 ffbe 	bl	80020b4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,0xb9,buf,8,2);
 8001138:	463a      	mov	r2, r7
 800113a:	2302      	movs	r3, #2
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2308      	movs	r3, #8
 8001140:	21b9      	movs	r1, #185	; 0xb9
 8001142:	482b      	ldr	r0, [pc, #172]	; (80011f0 <sensor_get_data+0xe8>)
 8001144:	f001 f8b4 	bl	80022b0 <HAL_I2C_Master_Receive>

	unsigned int Rcrc = buf[7] << 8;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	617b      	str	r3, [r7, #20]
	Rcrc += buf[6];
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	461a      	mov	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
	if(Rcrc == CRC16(buf,6)){
 8001158:	463b      	mov	r3, r7
 800115a:	2106      	movs	r1, #6
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff97 	bl	8001090 <CRC16>
 8001162:	4602      	mov	r2, r0
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	4293      	cmp	r3, r2
 8001168:	d13e      	bne.n	80011e8 <sensor_get_data+0xe0>
		unsigned int temperature = ((buf[4] & 0x7F) << 8) + buf[5];
 800116a:	793b      	ldrb	r3, [r7, #4]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001172:	797a      	ldrb	r2, [r7, #5]
 8001174:	4413      	add	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
		t = temperature / 10.0;
 8001178:	6938      	ldr	r0, [r7, #16]
 800117a:	f7ff f9cb 	bl	8000514 <__aeabi_ui2d>
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <sensor_get_data+0xec>)
 8001184:	f7ff fb6a 	bl	800085c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd12 	bl	8000bb8 <__aeabi_d2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <sensor_get_data+0xf0>)
 8001198:	6013      	str	r3, [r2, #0]
		t = (((buf[4] & 0x80) >> 7) == 1) ? ((t) * (-1)) : t;
 800119a:	793b      	ldrb	r3, [r7, #4]
 800119c:	09db      	lsrs	r3, r3, #7
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <sensor_get_data+0xa8>
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <sensor_get_data+0xf0>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eef1 7a67 	vneg.f32	s15, s15
 80011ae:	e002      	b.n	80011b6 <sensor_get_data+0xae>
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <sensor_get_data+0xf0>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <sensor_get_data+0xf0>)
 80011b8:	edc3 7a00 	vstr	s15, [r3]
		unsigned int humidity = (buf[2] << 8) + buf[3];
 80011bc:	78bb      	ldrb	r3, [r7, #2]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
		h = humidity / 10.0;
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff f9a4 	bl	8000514 <__aeabi_ui2d>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <sensor_get_data+0xec>)
 80011d2:	f7ff fb43 	bl	800085c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fceb 	bl	8000bb8 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <sensor_get_data+0xf4>)
 80011e6:	6013      	str	r3, [r2, #0]
	}
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000244 	.word	0x20000244
 80011f4:	40240000 	.word	0x40240000
 80011f8:	20000320 	.word	0x20000320
 80011fc:	20000324 	.word	0x20000324

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001206:	f000 fb97 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120a:	f000 f86d 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120e:	f000 f971 	bl	80014f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001212:	f000 f8c7 	bl	80013a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001216:	f000 f919 	bl	800144c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800121a:	f000 f941 	bl	80014a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n\n\n\n\n\n");
 800121e:	4826      	ldr	r0, [pc, #152]	; (80012b8 <main+0xb8>)
 8001220:	f004 f856 	bl	80052d0 <puts>
  say("ESP is initializing...");
 8001224:	4825      	ldr	r0, [pc, #148]	; (80012bc <main+0xbc>)
 8001226:	f7ff ff25 	bl	8001074 <say>
  //ESP_Init("sss","12345678");
  say("ESP is ready!");
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <main+0xc0>)
 800122c:	f7ff ff22 	bl	8001074 <say>
  int minutes = 1;//number of minutes between each transmission
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  I2C1->CR1 |= (1<<10);// ACK enable
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <main+0xc4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <main+0xc4>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  say("Retrieving sensor data...");
 8001240:	4821      	ldr	r0, [pc, #132]	; (80012c8 <main+0xc8>)
 8001242:	f7ff ff17 	bl	8001074 <say>
	  //AM2320_ReadData(&h, &t);
	  sensor_get_data();
 8001246:	f7ff ff5f 	bl	8001108 <sensor_get_data>
	  say("Sensor data received!");
 800124a:	4820      	ldr	r0, [pc, #128]	; (80012cc <main+0xcc>)
 800124c:	f7ff ff12 	bl	8001074 <say>
	  Value_Buffer[0] = t;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <main+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <main+0xd4>)
 8001256:	6013      	str	r3, [r2, #0]
	  Value_Buffer[1] = h;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <main+0xd8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <main+0xd4>)
 800125e:	6053      	str	r3, [r2, #4]
	  say("Preparing to send data...");
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <main+0xdc>)
 8001262:	f7ff ff07 	bl	8001074 <say>
	  HAL_Delay(2000*minutes);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fbd3 	bl	8001a1c <HAL_Delay>
	  //ESP_Send_Multi("CI4OHK76MHG5N7JL",2,Value_Buffer);
	  printf("Temperature: %f ; Humidity: %f\r\n",Value_Buffer[0],Value_Buffer[1]);
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <main+0xd4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f96c 	bl	8000558 <__aeabi_f2d>
 8001280:	4604      	mov	r4, r0
 8001282:	460d      	mov	r5, r1
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <main+0xd4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f965 	bl	8000558 <__aeabi_f2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	e9cd 2300 	strd	r2, r3, [sp]
 8001296:	4622      	mov	r2, r4
 8001298:	462b      	mov	r3, r5
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <main+0xe0>)
 800129c:	f003 ff92 	bl	80051c4 <iprintf>
	  say("Data sent!");
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <main+0xe4>)
 80012a2:	f7ff fee7 	bl	8001074 <say>
	  HAL_Delay(2000*minutes);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fbb3 	bl	8001a1c <HAL_Delay>
	  say("Retrieving sensor data...");
 80012b6:	e7c3      	b.n	8001240 <main+0x40>
 80012b8:	08007464 	.word	0x08007464
 80012bc:	0800746c 	.word	0x0800746c
 80012c0:	08007484 	.word	0x08007484
 80012c4:	40005400 	.word	0x40005400
 80012c8:	08007494 	.word	0x08007494
 80012cc:	080074b0 	.word	0x080074b0
 80012d0:	20000320 	.word	0x20000320
 80012d4:	20000328 	.word	0x20000328
 80012d8:	20000324 	.word	0x20000324
 80012dc:	080074c8 	.word	0x080074c8
 80012e0:	080074e4 	.word	0x080074e4
 80012e4:	08007508 	.word	0x08007508

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 faf2 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xb4>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <SystemClock_Config+0xb4>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <SystemClock_Config+0xb4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <SystemClock_Config+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <SystemClock_Config+0xb8>)
 8001332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <SystemClock_Config+0xb8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fe2b 	bl	8002fb4 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001364:	f000 f8ee 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f002 f88e 	bl	80034a4 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800138e:	f000 f8d9 	bl	8001544 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	; 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	RCC->AHB1ENR |= (1<<1);//GPIOB clock enable
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_I2C1_Init+0x9c>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <MX_I2C1_Init+0x9c>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER |= (2<<16) | (2<<18);// PB8 and PB9 as alternate funct
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a22      	ldr	r2, [pc, #136]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013ba:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80013be:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1<<8) | (1<<9); // PB8 PB9 as output open drain
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013ca:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR |= (3<<16) | (3<<18);// PB8 PB9 as high speed
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013d2:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80013d6:	6093      	str	r3, [r2, #8]

	GPIOB->AFR[1] |= (4<<0) | (4<<4); // PB8 PB9 as alt func 4 (I2C1)
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <MX_I2C1_Init+0xa0>)
 80013de:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80013e2:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->APB1ENR |= (1<<21); // i2c clock enable
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_I2C1_Init+0x9c>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_I2C1_Init+0x9c>)
 80013ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40

	I2C1->CR1 |= (1<<15);//reset the I2C
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_I2C1_Init+0xa4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <MX_I2C1_Init+0xa4>)
 80013f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fa:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C1_Init+0xa4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <MX_I2C1_Init+0xa4>)
 8001402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001406:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= (16<0); // input peripheral freq in MHz (16 MHz)
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_I2C1_Init+0xa4>)
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <MX_I2C1_Init+0xa4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	6053      	str	r3, [r2, #4]

	I2C1->CCR |= (80<<0);// (1000ns + 4000ns)/(1/16MHz)
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_I2C1_Init+0xa4>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <MX_I2C1_Init+0xa4>)
 8001416:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800141a:	61d3      	str	r3, [r2, #28]

	I2C1->TRISE |= (17<<0); // configure rise time register
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_I2C1_Init+0xa4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <MX_I2C1_Init+0xa4>)
 8001422:	f043 0311 	orr.w	r3, r3, #17
 8001426:	6213      	str	r3, [r2, #32]

	I2C1->CR1 |= (1<<0);// enable I2C
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_I2C1_Init+0xa4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <MX_I2C1_Init+0xa4>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]
//  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400
 8001448:	40005400 	.word	0x40005400

0800144c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART1_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART1_UART_Init+0x4c>)
 8001484:	f002 f9ee 	bl	8003864 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 f859 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000298 	.word	0x20000298
 800149c:	40011000 	.word	0x40011000

080014a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MX_USART2_UART_Init+0x50>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014d8:	f002 f9c4 	bl	8003864 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014e2:	f000 f82f 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002dc 	.word	0x200002dc
 80014f0:	40004400 	.word	0x40004400

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_GPIO_Init+0x4c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <MX_GPIO_Init+0x4c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_GPIO_Init+0x4c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_GPIO_Init+0x4c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <MX_GPIO_Init+0x4c>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_GPIO_Init+0x4c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_MspInit+0x4c>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x4c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a3a      	ldr	r2, [pc, #232]	; (80016a8 <HAL_UART_MspInit+0x108>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d135      	bne.n	800162e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_UART_MspInit+0x10c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_UART_MspInit+0x10c>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_UART_MspInit+0x10c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_UART_MspInit+0x10c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a31      	ldr	r2, [pc, #196]	; (80016ac <HAL_UART_MspInit+0x10c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_UART_MspInit+0x10c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800160c:	2307      	movs	r3, #7
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4826      	ldr	r0, [pc, #152]	; (80016b0 <HAL_UART_MspInit+0x110>)
 8001618:	f000 fbc8 	bl	8001dac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2025      	movs	r0, #37	; 0x25
 8001622:	f000 fafa 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001626:	2025      	movs	r0, #37	; 0x25
 8001628:	f000 fb13 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800162c:	e038      	b.n	80016a0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_UART_MspInit+0x114>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d133      	bne.n	80016a0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_UART_MspInit+0x10c>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <HAL_UART_MspInit+0x10c>)
 8001642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_UART_MspInit+0x10c>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_UART_MspInit+0x10c>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_UART_MspInit+0x10c>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_UART_MspInit+0x10c>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001670:	230c      	movs	r3, #12
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001680:	2307      	movs	r3, #7
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <HAL_UART_MspInit+0x110>)
 800168c:	f000 fb8e 	bl	8001dac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2026      	movs	r0, #38	; 0x26
 8001696:	f000 fac0 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800169a:	2026      	movs	r0, #38	; 0x26
 800169c:	f000 fad9 	bl	8001c52 <HAL_NVIC_EnableIRQ>
}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	; 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40004400 	.word	0x40004400

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001704:	f000 f96a 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <USART1_IRQHandler+0x10>)
 8001712:	f7ff fc43 	bl	8000f9c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000298 	.word	0x20000298

08001720 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <USART2_IRQHandler+0x10>)
 8001726:	f002 f97d 	bl	8003a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002dc 	.word	0x200002dc

08001734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_kill>:

int _kill(int pid, int sig)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800174e:	f003 f89d 	bl	800488c <__errno>
 8001752:	4603      	mov	r3, r0
 8001754:	2216      	movs	r2, #22
 8001756:	601a      	str	r2, [r3, #0]
  return -1;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_exit>:

void _exit (int status)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ffe7 	bl	8001744 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001776:	e7fe      	b.n	8001776 <_exit+0x12>

08001778 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e00a      	b.n	80017a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800178a:	f3af 8000 	nop.w
 800178e:	4601      	mov	r1, r0
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf0      	blt.n	800178a <_read+0x12>
  }

  return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e009      	b.n	80017d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	60ba      	str	r2, [r7, #8]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fc3f 	bl	8001050 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbf1      	blt.n	80017c4 <_write+0x12>
  }
  return len;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_close>:

int _close(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001812:	605a      	str	r2, [r3, #4]
  return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_isatty>:

int _isatty(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f003 f802 	bl	800488c <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20020000 	.word	0x20020000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	20000330 	.word	0x20000330
 80018bc:	20000348 	.word	0x20000348

080018c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800191c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ea:	490e      	ldr	r1, [pc, #56]	; (8001924 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001900:	4c0b      	ldr	r4, [pc, #44]	; (8001930 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800190e:	f7ff ffd7 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001912:	f002 ffc1 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff fc73 	bl	8001200 <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800191c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001928:	08007914 	.word	0x08007914
  ldr r2, =_sbss
 800192c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001930:	20000348 	.word	0x20000348

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HAL_Init+0x40>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_Init+0x40>)
 800194e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_Init+0x40>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 f94f 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fdf0 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f967 	bl	8001c6e <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 f92f 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000334 	.word	0x20000334

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000334 	.word	0x20000334

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d005      	beq.n	8001a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_Delay+0x44>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a42:	bf00      	nop
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8f7      	bhi.n	8001a44 <HAL_Delay+0x28>
  {
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff29 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff3e 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff31 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff feb6 	bl	8001a04 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d008      	beq.n	8001cb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e052      	b.n	8001d5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0216 	bic.w	r2, r2, #22
 8001cc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d103      	bne.n	8001ce8 <HAL_DMA_Abort+0x62>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0208 	bic.w	r2, r2, #8
 8001cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d08:	e013      	b.n	8001d32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0a:	f7ff fe7b 	bl	8001a04 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d90c      	bls.n	8001d32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e015      	b.n	8001d5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e4      	bne.n	8001d0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d004      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e00c      	b.n	8001d9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2205      	movs	r2, #5
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e159      	b.n	800207c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8148 	bne.w	8002076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d005      	beq.n	8001dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d130      	bne.n	8001e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 0201 	and.w	r2, r3, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d017      	beq.n	8001e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d123      	bne.n	8001ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	08da      	lsrs	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3208      	adds	r2, #8
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a2 	beq.w	8002076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4e:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_GPIO_Init+0x2ec>)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a49      	ldr	r2, [pc, #292]	; (800209c <HAL_GPIO_Init+0x2f0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d019      	beq.n	8001fae <HAL_GPIO_Init+0x202>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <HAL_GPIO_Init+0x2f4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x1fe>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a47      	ldr	r2, [pc, #284]	; (80020a4 <HAL_GPIO_Init+0x2f8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <HAL_GPIO_Init+0x2fc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x1f6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a45      	ldr	r2, [pc, #276]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x1f2>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e008      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc0:	4935      	ldr	r1, [pc, #212]	; (8002098 <HAL_GPIO_Init+0x2ec>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002046:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3301      	adds	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	f67f aea2 	bls.w	8001dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40013800 	.word	0x40013800
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	461a      	mov	r2, r3
 80020c0:	460b      	mov	r3, r1
 80020c2:	817b      	strh	r3, [r7, #10]
 80020c4:	4613      	mov	r3, r2
 80020c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff fc9c 	bl	8001a04 <HAL_GetTick>
 80020cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	f040 80e0 	bne.w	800229c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2319      	movs	r3, #25
 80020e2:	2201      	movs	r2, #1
 80020e4:	4970      	ldr	r1, [pc, #448]	; (80022a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fd86 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
 80020f4:	e0d3      	b.n	800229e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_I2C_Master_Transmit+0x50>
 8002100:	2302      	movs	r3, #2
 8002102:	e0cc      	b.n	800229e <HAL_I2C_Master_Transmit+0x1ea>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d007      	beq.n	800212a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002138:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2221      	movs	r2, #33	; 0x21
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2210      	movs	r2, #16
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	893a      	ldrh	r2, [r7, #8]
 800215a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_I2C_Master_Transmit+0x1f8>)
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800216c:	8979      	ldrh	r1, [r7, #10]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	6a3a      	ldr	r2, [r7, #32]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fbf0 	bl	8002958 <I2C_MasterRequestWrite>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e08d      	b.n	800229e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002198:	e066      	b.n	8002268 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fe00 	bl	8002da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d107      	bne.n	80021c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06b      	b.n	800229e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b04      	cmp	r3, #4
 8002202:	d11b      	bne.n	800223c <HAL_I2C_Master_Transmit+0x188>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	d017      	beq.n	800223c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6a39      	ldr	r1, [r7, #32]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fdf0 	bl	8002e26 <I2C_WaitOnBTFFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2b04      	cmp	r3, #4
 8002252:	d107      	bne.n	8002264 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002262:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e01a      	b.n	800229e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	d194      	bne.n	800219a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e000      	b.n	800229e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800229c:	2302      	movs	r3, #2
  }
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	00100002 	.word	0x00100002
 80022ac:	ffff0000 	.word	0xffff0000

080022b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	; 0x30
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	817b      	strh	r3, [r7, #10]
 80022c0:	4613      	mov	r3, r2
 80022c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff fb9e 	bl	8001a04 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	f040 820b 	bne.w	80026ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2319      	movs	r3, #25
 80022de:	2201      	movs	r2, #1
 80022e0:	497c      	ldr	r1, [pc, #496]	; (80024d4 <HAL_I2C_Master_Receive+0x224>)
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fc88 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	e1fe      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_I2C_Master_Receive+0x50>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e1f7      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d007      	beq.n	8002326 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002334:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2222      	movs	r2, #34	; 0x22
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2210      	movs	r2, #16
 8002342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	893a      	ldrh	r2, [r7, #8]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <HAL_I2C_Master_Receive+0x228>)
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002368:	8979      	ldrh	r1, [r7, #10]
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fb74 	bl	8002a5c <I2C_MasterRequestRead>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1b8      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	d113      	bne.n	80023ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e18c      	b.n	80026c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d11b      	bne.n	80023ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e16c      	b.n	80026c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d11b      	bne.n	800242e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	e14c      	b.n	80026c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800243c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002454:	e138      	b.n	80026c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	2b03      	cmp	r3, #3
 800245c:	f200 80f1 	bhi.w	8002642 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	2b01      	cmp	r3, #1
 8002466:	d123      	bne.n	80024b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fd1b 	bl	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e139      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ae:	e10b      	b.n	80026c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d14e      	bne.n	8002556 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	2200      	movs	r2, #0
 80024c0:	4906      	ldr	r1, [pc, #24]	; (80024dc <HAL_I2C_Master_Receive+0x22c>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fb98 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e10e      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
 80024d2:	bf00      	nop
 80024d4:	00100002 	.word	0x00100002
 80024d8:	ffff0000 	.word	0xffff0000
 80024dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002554:	e0b8      	b.n	80026c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	2200      	movs	r2, #0
 800255e:	4966      	ldr	r1, [pc, #408]	; (80026f8 <HAL_I2C_Master_Receive+0x448>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fb49 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0bf      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2200      	movs	r2, #0
 80025ba:	494f      	ldr	r1, [pc, #316]	; (80026f8 <HAL_I2C_Master_Receive+0x448>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fb1b 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e091      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002640:	e042      	b.n	80026c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fc2e 	bl	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04c      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d118      	bne.n	80026c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f aec2 	bne.w	8002456 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
  }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	00010004 	.word	0x00010004

080026fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff f97a 	bl	8001a04 <HAL_GetTick>
 8002710:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	f040 8111 	bne.w	8002946 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2319      	movs	r3, #25
 800272a:	2201      	movs	r2, #1
 800272c:	4988      	ldr	r1, [pc, #544]	; (8002950 <HAL_I2C_IsDeviceReady+0x254>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa62 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	e104      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_I2C_IsDeviceReady+0x50>
 8002748:	2302      	movs	r3, #2
 800274a:	e0fd      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x24c>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2224      	movs	r2, #36	; 0x24
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a70      	ldr	r2, [pc, #448]	; (8002954 <HAL_I2C_IsDeviceReady+0x258>)
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa20 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027cc:	d103      	bne.n	80027d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0b6      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f90b 	bl	8001a04 <HAL_GetTick>
 80027ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800281e:	e025      	b.n	800286c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002820:	f7ff f8f0 	bl	8001a04 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d302      	bcc.n	8002836 <HAL_I2C_IsDeviceReady+0x13a>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	22a0      	movs	r2, #160	; 0xa0
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b02      	cmp	r3, #2
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2ba0      	cmp	r3, #160	; 0xa0
 8002876:	d005      	beq.n	8002884 <HAL_I2C_IsDeviceReady+0x188>
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_I2C_IsDeviceReady+0x188>
 800287e:	7dbb      	ldrb	r3, [r7, #22]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0cd      	beq.n	8002820 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b02      	cmp	r3, #2
 8002898:	d129      	bne.n	80028ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2319      	movs	r3, #25
 80028c6:	2201      	movs	r2, #1
 80028c8:	4921      	ldr	r1, [pc, #132]	; (8002950 <HAL_I2C_IsDeviceReady+0x254>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f994 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e036      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e02c      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002906:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2319      	movs	r3, #25
 800290e:	2201      	movs	r2, #1
 8002910:	490f      	ldr	r1, [pc, #60]	; (8002950 <HAL_I2C_IsDeviceReady+0x254>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f970 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e012      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	3301      	adds	r3, #1
 8002926:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	f4ff af32 	bcc.w	8002796 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	00100002 	.word	0x00100002
 8002954:	ffff0000 	.word	0xffff0000

08002958 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d006      	beq.n	8002982 <I2C_MasterRequestWrite+0x2a>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d003      	beq.n	8002982 <I2C_MasterRequestWrite+0x2a>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002980:	d108      	bne.n	8002994 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e00b      	b.n	80029ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	2b12      	cmp	r3, #18
 800299a:	d107      	bne.n	80029ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f91d 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d2:	d103      	bne.n	80029dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e035      	b.n	8002a4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e8:	d108      	bne.n	80029fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e01b      	b.n	8002a34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029fc:	897b      	ldrh	r3, [r7, #10]
 80029fe:	11db      	asrs	r3, r3, #7
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 0306 	and.w	r3, r3, #6
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f063 030f 	orn	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <I2C_MasterRequestWrite+0xfc>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f943 	bl	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e010      	b.n	8002a4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <I2C_MasterRequestWrite+0x100>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f933 	bl	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	00010008 	.word	0x00010008
 8002a58:	00010002 	.word	0x00010002

08002a5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d006      	beq.n	8002a96 <I2C_MasterRequestRead+0x3a>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d003      	beq.n	8002a96 <I2C_MasterRequestRead+0x3a>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a94:	d108      	bne.n	8002aa8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e00b      	b.n	8002ac0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b11      	cmp	r3, #17
 8002aae:	d107      	bne.n	8002ac0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f893 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00d      	beq.n	8002af4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae6:	d103      	bne.n	8002af0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e079      	b.n	8002be8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	e05f      	b.n	8002bd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b10:	897b      	ldrh	r3, [r7, #10]
 8002b12:	11db      	asrs	r3, r3, #7
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f003 0306 	and.w	r3, r3, #6
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f063 030f 	orn	r3, r3, #15
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4930      	ldr	r1, [pc, #192]	; (8002bf0 <I2C_MasterRequestRead+0x194>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f8b9 	bl	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e054      	b.n	8002be8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4929      	ldr	r1, [pc, #164]	; (8002bf4 <I2C_MasterRequestRead+0x198>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f8a9 	bl	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e044      	b.n	8002be8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f831 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e017      	b.n	8002be8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002bb8:	897b      	ldrh	r3, [r7, #10]
 8002bba:	11db      	asrs	r3, r3, #7
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 0306 	and.w	r3, r3, #6
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f063 030e 	orn	r3, r3, #14
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <I2C_MasterRequestRead+0x198>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f865 	bl	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	00010008 	.word	0x00010008
 8002bf4:	00010002 	.word	0x00010002

08002bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c08:	e025      	b.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d021      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c12:	f7fe fef7 	bl	8001a04 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e023      	b.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10d      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf0c      	ite	eq
 8002c72:	2301      	moveq	r3, #1
 8002c74:	2300      	movne	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	e00c      	b.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d0b6      	beq.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb4:	e051      	b.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc4:	d123      	bne.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e046      	b.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d021      	beq.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe fe75 	bl	8001a04 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d116      	bne.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e020      	b.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d10c      	bne.n	8002d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	e00b      	b.n	8002d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d18d      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db0:	e02d      	b.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f8ce 	bl	8002f54 <I2C_IsAcknowledgeFailed>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e02d      	b.n	8002e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d021      	beq.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7fe fe1b 	bl	8001a04 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d116      	bne.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e007      	b.n	8002e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d1ca      	bne.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e32:	e02d      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f88d 	bl	8002f54 <I2C_IsAcknowledgeFailed>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e02d      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d021      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4c:	f7fe fdda 	bl	8001a04 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d302      	bcc.n	8002e62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d1ca      	bne.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb4:	e042      	b.n	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d119      	bne.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0210 	mvn.w	r2, #16
 8002ecc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e029      	b.n	8002f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7fe fd84 	bl	8001a04 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b40      	cmp	r3, #64	; 0x40
 8002f48:	d1b5      	bne.n	8002eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d11b      	bne.n	8002fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e267      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d075      	beq.n	80030be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fde:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d112      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fea:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff6:	d10b      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05b      	beq.n	80030bc <HAL_RCC_OscConfig+0x108>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d157      	bne.n	80030bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e242      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x74>
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a75      	ldr	r2, [pc, #468]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01d      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x98>
 8003032:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6f      	ldr	r2, [pc, #444]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6c      	ldr	r2, [pc, #432]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a68      	ldr	r2, [pc, #416]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe fcca 	bl	8001a04 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe fcc6 	bl	8001a04 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e207      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0xc0>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe fcb6 	bl	8001a04 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe fcb2 	bl	8001a04 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1f3      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0xe8>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d063      	beq.n	8003192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ca:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d116      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1c7      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4937      	ldr	r1, [pc, #220]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	e03a      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003124:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe fc6b 	bl	8001a04 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003132:	f7fe fc67 	bl	8001a04 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1a8      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4925      	ldr	r1, [pc, #148]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fc4a 	bl	8001a04 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003174:	f7fe fc46 	bl	8001a04 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e187      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d036      	beq.n	800320c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_RCC_OscConfig+0x248>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe fc2a 	bl	8001a04 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b4:	f7fe fc26 	bl	8001a04 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e167      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x200>
 80031d2:	e01b      	b.n	800320c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_OscConfig+0x248>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7fe fc13 	bl	8001a04 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	e00e      	b.n	8003200 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e2:	f7fe fc0f 	bl	8001a04 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d907      	bls.n	8003200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e150      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	42470000 	.word	0x42470000
 80031fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ea      	bne.n	80031e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8097 	beq.w	8003348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321e:	4b81      	ldr	r3, [pc, #516]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a7c      	ldr	r2, [pc, #496]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b77      	ldr	r3, [pc, #476]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d118      	bne.n	8003288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003256:	4b74      	ldr	r3, [pc, #464]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a73      	ldr	r2, [pc, #460]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7fe fbcf 	bl	8001a04 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fe fbcb 	bl	8001a04 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e10c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x2ea>
 8003290:	4b64      	ldr	r3, [pc, #400]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a63      	ldr	r2, [pc, #396]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x30c>
 80032a6:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a5e      	ldr	r2, [pc, #376]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
 80032b2:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a57      	ldr	r2, [pc, #348]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fb90 	bl	8001a04 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fb8c 	bl	8001a04 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0cb      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <HAL_RCC_OscConfig+0x334>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330c:	f7fe fb7a 	bl	8001a04 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe fb76 	bl	8001a04 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0b5      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ee      	bne.n	8003314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a38      	ldr	r2, [pc, #224]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a1 	beq.w	8003494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	d05c      	beq.n	8003418 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d141      	bne.n	80033ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_OscConfig+0x478>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fb4a 	bl	8001a04 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe fb46 	bl	8001a04 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e087      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	491b      	ldr	r1, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x478>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fe fb1f 	bl	8001a04 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fb1b 	bl	8001a04 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e05c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x416>
 80033e8:	e054      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <HAL_RCC_OscConfig+0x478>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fb08 	bl	8001a04 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe fb04 	bl	8001a04 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e045      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x444>
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e038      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000
 800342c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x4ec>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d028      	beq.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d121      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d11a      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0cc      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d90c      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800351a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d044      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d119      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d003      	beq.n	8003562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	2b03      	cmp	r3, #3
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e067      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fe fa36 	bl	8001a04 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fe fa32 	bl	8001a04 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e04f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d20c      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800362a:	f000 f821 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490a      	ldr	r1, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe f996 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023c00 	.word	0x40023c00
 8003660:	40023800 	.word	0x40023800
 8003664:	08007514 	.word	0x08007514
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b090      	sub	sp, #64	; 0x40
 8003676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	2300      	movs	r3, #0
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d00d      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003694:	2b08      	cmp	r3, #8
 8003696:	f200 80a1 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x34>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x3a>
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036a8:	e09b      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036aa:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ae:	e098      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ba:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d028      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	2200      	movs	r2, #0
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	627a      	str	r2, [r7, #36]	; 0x24
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d8:	2100      	movs	r1, #0
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036dc:	fb03 f201 	mul.w	r2, r3, r1
 80036e0:	2300      	movs	r3, #0
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ea:	fba0 1202 	umull	r1, r2, r0, r2
 80036ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f0:	460a      	mov	r2, r1
 80036f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	4413      	add	r3, r2
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2200      	movs	r2, #0
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800370a:	f7fd faa5 	bl	8000c58 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4613      	mov	r3, r2
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003716:	e053      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	2200      	movs	r2, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	617a      	str	r2, [r7, #20]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800372a:	f04f 0b00 	mov.w	fp, #0
 800372e:	4652      	mov	r2, sl
 8003730:	465b      	mov	r3, fp
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	0159      	lsls	r1, r3, #5
 800373c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003740:	0150      	lsls	r0, r2, #5
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	ebb2 080a 	subs.w	r8, r2, sl
 800374a:	eb63 090b 	sbc.w	r9, r3, fp
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800375a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800375e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003762:	ebb2 0408 	subs.w	r4, r2, r8
 8003766:	eb63 0509 	sbc.w	r5, r3, r9
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	00eb      	lsls	r3, r5, #3
 8003774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003778:	00e2      	lsls	r2, r4, #3
 800377a:	4614      	mov	r4, r2
 800377c:	461d      	mov	r5, r3
 800377e:	eb14 030a 	adds.w	r3, r4, sl
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	eb45 030b 	adc.w	r3, r5, fp
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003796:	4629      	mov	r1, r5
 8003798:	028b      	lsls	r3, r1, #10
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a0:	4621      	mov	r1, r4
 80037a2:	028a      	lsls	r2, r1, #10
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	2200      	movs	r2, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b4:	f7fd fa50 	bl	8000c58 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	017d7840 	.word	0x017d7840

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	08007524 	.word	0x08007524

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003840:	f7ff ffdc 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0b5b      	lsrs	r3, r3, #13
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	08007524 	.word	0x08007524

08003864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e03f      	b.n	80038f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fe88 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fd7b 	bl	80043a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b08a      	sub	sp, #40	; 0x28
 8003902:	af02      	add	r7, sp, #8
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	d17c      	bne.n	8003a18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_UART_Transmit+0x2c>
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e075      	b.n	8003a1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_UART_Transmit+0x3e>
 8003938:	2302      	movs	r3, #2
 800393a:	e06e      	b.n	8003a1a <HAL_UART_Transmit+0x11c>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2221      	movs	r2, #33	; 0x21
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003952:	f7fe f857 	bl	8001a04 <HAL_GetTick>
 8003956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d108      	bne.n	8003980 <HAL_UART_Transmit+0x82>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003990:	e02a      	b.n	80039e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2180      	movs	r1, #128	; 0x80
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 faf9 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e036      	b.n	8003a1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	3302      	adds	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e007      	b.n	80039da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1cf      	bne.n	8003992 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2140      	movs	r1, #64	; 0x40
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fac9 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e006      	b.n	8003a1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b0ba      	sub	sp, #232	; 0xe8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_UART_IRQHandler+0x66>
 8003a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fbd3 	bl	800422e <UART_Receive_IT>
      return;
 8003a88:	e256      	b.n	8003f38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80de 	beq.w	8003c50 <HAL_UART_IRQHandler+0x22c>
 8003a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80d1 	beq.w	8003c50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xae>
 8003aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_UART_IRQHandler+0xd2>
 8003ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f043 0202 	orr.w	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_UART_IRQHandler+0xf6>
 8003b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f043 0204 	orr.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <HAL_UART_IRQHandler+0x126>
 8003b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0208 	orr.w	r2, r3, #8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 81ed 	beq.w	8003f2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_UART_IRQHandler+0x14e>
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb5e 	bl	800422e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <HAL_UART_IRQHandler+0x17a>
 8003b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04f      	beq.n	8003c3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa66 	bl	8004070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d141      	bne.n	8003c36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3314      	adds	r3, #20
 8003bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3314      	adds	r3, #20
 8003bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1d9      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d013      	beq.n	8003c2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	4a7d      	ldr	r2, [pc, #500]	; (8003e00 <HAL_UART_IRQHandler+0x3dc>)
 8003c0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f8a7 	bl	8001d66 <HAL_DMA_Abort_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00e      	b.n	8003c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f99a 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00a      	b.n	8003c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f996 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e006      	b.n	8003c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f992 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c4a:	e170      	b.n	8003f2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	bf00      	nop
    return;
 8003c4e:	e16e      	b.n	8003f2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	f040 814a 	bne.w	8003eee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8143 	beq.w	8003eee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 813c 	beq.w	8003eee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	f040 80b4 	bne.w	8003e04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8140 	beq.w	8003f32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f080 8139 	bcs.w	8003f32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	f000 8088 	beq.w	8003de6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1d9      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e1      	bne.n	8003d22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e3      	bne.n	8003d5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db6:	f023 0310 	bic.w	r3, r3, #16
 8003dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e3      	bne.n	8003da4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fd ff50 	bl	8001c86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8c0 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dfc:	e099      	b.n	8003f32 <HAL_UART_IRQHandler+0x50e>
 8003dfe:	bf00      	nop
 8003e00:	08004137 	.word	0x08004137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 808b 	beq.w	8003f36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8086 	beq.w	8003f36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e3      	bne.n	8003e2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	623b      	str	r3, [r7, #32]
   return(result);
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e86:	633a      	str	r2, [r7, #48]	; 0x30
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e3      	bne.n	8003e62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0310 	bic.w	r3, r3, #16
 8003ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ecc:	61fa      	str	r2, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e3      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f848 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eec:	e023      	b.n	8003f36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_UART_IRQHandler+0x4ea>
 8003efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f929 	bl	800415e <UART_Transmit_IT>
    return;
 8003f0c:	e014      	b.n	8003f38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00e      	beq.n	8003f38 <HAL_UART_IRQHandler+0x514>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f969 	bl	80041fe <UART_EndTransmit_IT>
    return;
 8003f2c:	e004      	b.n	8003f38 <HAL_UART_IRQHandler+0x514>
    return;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <HAL_UART_IRQHandler+0x514>
      return;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <HAL_UART_IRQHandler+0x514>
      return;
 8003f36:	bf00      	nop
  }
}
 8003f38:	37e8      	adds	r7, #232	; 0xe8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop

08003f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b090      	sub	sp, #64	; 0x40
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa4:	e050      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d04c      	beq.n	8004048 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb4:	f7fd fd26 	bl	8001a04 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d241      	bcs.n	8004048 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fe4:	637a      	str	r2, [r7, #52]	; 0x34
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	613b      	str	r3, [r7, #16]
   return(result);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004018:	623a      	str	r2, [r7, #32]
 800401a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69f9      	ldr	r1, [r7, #28]
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	61bb      	str	r3, [r7, #24]
   return(result);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e00f      	b.n	8004068 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	429a      	cmp	r2, r3
 8004064:	d09f      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3740      	adds	r7, #64	; 0x40
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b095      	sub	sp, #84	; 0x54
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800408e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004098:	643a      	str	r2, [r7, #64]	; 0x40
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800409e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3314      	adds	r3, #20
 80040ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d119      	bne.n	800411c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004108:	61ba      	str	r2, [r7, #24]
 800410a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	613b      	str	r3, [r7, #16]
   return(result);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e5      	bne.n	80040e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800412a:	bf00      	nop
 800412c:	3754      	adds	r7, #84	; 0x54
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff09 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b21      	cmp	r3, #33	; 0x21
 8004170:	d13e      	bne.n	80041f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d114      	bne.n	80041a6 <UART_Transmit_IT+0x48>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d110      	bne.n	80041a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	621a      	str	r2, [r3, #32]
 80041a4:	e008      	b.n	80041b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6211      	str	r1, [r2, #32]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10f      	bne.n	80041ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe8e 	bl	8003f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08c      	sub	sp, #48	; 0x30
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b22      	cmp	r3, #34	; 0x22
 8004240:	f040 80ab 	bne.w	800439a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d117      	bne.n	800427e <UART_Receive_IT+0x50>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d113      	bne.n	800427e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426c:	b29a      	uxth	r2, r3
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
 800427c:	e026      	b.n	80042cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d007      	beq.n	80042a2 <UART_Receive_IT+0x74>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <UART_Receive_IT+0x82>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e008      	b.n	80042c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4619      	mov	r1, r3
 80042da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d15a      	bne.n	8004396 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0220 	bic.w	r2, r2, #32
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	2b01      	cmp	r3, #1
 800431e:	d135      	bne.n	800438c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	623a      	str	r2, [r7, #32]
 8004348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	61bb      	str	r3, [r7, #24]
   return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d10a      	bne.n	800437e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fdf9 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
 800438a:	e002      	b.n	8004392 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fde1 	bl	8003f54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e002      	b.n	800439c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3730      	adds	r7, #48	; 0x30
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a8:	b0c0      	sub	sp, #256	; 0x100
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	68d9      	ldr	r1, [r3, #12]
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	ea40 0301 	orr.w	r3, r0, r1
 80043cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	431a      	orrs	r2, r3
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043fc:	f021 010c 	bic.w	r1, r1, #12
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800440a:	430b      	orrs	r3, r1
 800440c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	6999      	ldr	r1, [r3, #24]
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	ea40 0301 	orr.w	r3, r0, r1
 800442a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b8f      	ldr	r3, [pc, #572]	; (8004670 <UART_SetConfig+0x2cc>)
 8004434:	429a      	cmp	r2, r3
 8004436:	d005      	beq.n	8004444 <UART_SetConfig+0xa0>
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <UART_SetConfig+0x2d0>)
 8004440:	429a      	cmp	r2, r3
 8004442:	d104      	bne.n	800444e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004444:	f7ff f9fa 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8004448:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800444c:	e003      	b.n	8004456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800444e:	f7ff f9e1 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8004452:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004460:	f040 810c 	bne.w	800467c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800446e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004476:	4622      	mov	r2, r4
 8004478:	462b      	mov	r3, r5
 800447a:	1891      	adds	r1, r2, r2
 800447c:	65b9      	str	r1, [r7, #88]	; 0x58
 800447e:	415b      	adcs	r3, r3
 8004480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004486:	4621      	mov	r1, r4
 8004488:	eb12 0801 	adds.w	r8, r2, r1
 800448c:	4629      	mov	r1, r5
 800448e:	eb43 0901 	adc.w	r9, r3, r1
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a6:	4690      	mov	r8, r2
 80044a8:	4699      	mov	r9, r3
 80044aa:	4623      	mov	r3, r4
 80044ac:	eb18 0303 	adds.w	r3, r8, r3
 80044b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044b4:	462b      	mov	r3, r5
 80044b6:	eb49 0303 	adc.w	r3, r9, r3
 80044ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044d2:	460b      	mov	r3, r1
 80044d4:	18db      	adds	r3, r3, r3
 80044d6:	653b      	str	r3, [r7, #80]	; 0x50
 80044d8:	4613      	mov	r3, r2
 80044da:	eb42 0303 	adc.w	r3, r2, r3
 80044de:	657b      	str	r3, [r7, #84]	; 0x54
 80044e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044e8:	f7fc fbb6 	bl	8000c58 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4b61      	ldr	r3, [pc, #388]	; (8004678 <UART_SetConfig+0x2d4>)
 80044f2:	fba3 2302 	umull	r2, r3, r3, r2
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	011c      	lsls	r4, r3, #4
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004504:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	1891      	adds	r1, r2, r2
 8004512:	64b9      	str	r1, [r7, #72]	; 0x48
 8004514:	415b      	adcs	r3, r3
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800451c:	4641      	mov	r1, r8
 800451e:	eb12 0a01 	adds.w	sl, r2, r1
 8004522:	4649      	mov	r1, r9
 8004524:	eb43 0b01 	adc.w	fp, r3, r1
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453c:	4692      	mov	sl, r2
 800453e:	469b      	mov	fp, r3
 8004540:	4643      	mov	r3, r8
 8004542:	eb1a 0303 	adds.w	r3, sl, r3
 8004546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800454a:	464b      	mov	r3, r9
 800454c:	eb4b 0303 	adc.w	r3, fp, r3
 8004550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004560:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004568:	460b      	mov	r3, r1
 800456a:	18db      	adds	r3, r3, r3
 800456c:	643b      	str	r3, [r7, #64]	; 0x40
 800456e:	4613      	mov	r3, r2
 8004570:	eb42 0303 	adc.w	r3, r2, r3
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
 8004576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800457a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800457e:	f7fc fb6b 	bl	8000c58 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4611      	mov	r1, r2
 8004588:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <UART_SetConfig+0x2d4>)
 800458a:	fba3 2301 	umull	r2, r3, r3, r1
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2264      	movs	r2, #100	; 0x64
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	1acb      	subs	r3, r1, r3
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <UART_SetConfig+0x2d4>)
 80045a0:	fba3 2302 	umull	r2, r3, r3, r2
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ac:	441c      	add	r4, r3
 80045ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045c0:	4642      	mov	r2, r8
 80045c2:	464b      	mov	r3, r9
 80045c4:	1891      	adds	r1, r2, r2
 80045c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045c8:	415b      	adcs	r3, r3
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045d0:	4641      	mov	r1, r8
 80045d2:	1851      	adds	r1, r2, r1
 80045d4:	6339      	str	r1, [r7, #48]	; 0x30
 80045d6:	4649      	mov	r1, r9
 80045d8:	414b      	adcs	r3, r1
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045e8:	4659      	mov	r1, fp
 80045ea:	00cb      	lsls	r3, r1, #3
 80045ec:	4651      	mov	r1, sl
 80045ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f2:	4651      	mov	r1, sl
 80045f4:	00ca      	lsls	r2, r1, #3
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	4642      	mov	r2, r8
 80045fe:	189b      	adds	r3, r3, r2
 8004600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004604:	464b      	mov	r3, r9
 8004606:	460a      	mov	r2, r1
 8004608:	eb42 0303 	adc.w	r3, r2, r3
 800460c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800461c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004624:	460b      	mov	r3, r1
 8004626:	18db      	adds	r3, r3, r3
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
 800462a:	4613      	mov	r3, r2
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800463a:	f7fc fb0d 	bl	8000c58 <__aeabi_uldivmod>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <UART_SetConfig+0x2d4>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	3332      	adds	r3, #50	; 0x32
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <UART_SetConfig+0x2d4>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 0207 	and.w	r2, r3, #7
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4422      	add	r2, r4
 800466a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800466c:	e105      	b.n	800487a <UART_SetConfig+0x4d6>
 800466e:	bf00      	nop
 8004670:	40011000 	.word	0x40011000
 8004674:	40011400 	.word	0x40011400
 8004678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004686:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800468a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800468e:	4642      	mov	r2, r8
 8004690:	464b      	mov	r3, r9
 8004692:	1891      	adds	r1, r2, r2
 8004694:	6239      	str	r1, [r7, #32]
 8004696:	415b      	adcs	r3, r3
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800469e:	4641      	mov	r1, r8
 80046a0:	1854      	adds	r4, r2, r1
 80046a2:	4649      	mov	r1, r9
 80046a4:	eb43 0501 	adc.w	r5, r3, r1
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	00eb      	lsls	r3, r5, #3
 80046b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b6:	00e2      	lsls	r2, r4, #3
 80046b8:	4614      	mov	r4, r2
 80046ba:	461d      	mov	r5, r3
 80046bc:	4643      	mov	r3, r8
 80046be:	18e3      	adds	r3, r4, r3
 80046c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046c4:	464b      	mov	r3, r9
 80046c6:	eb45 0303 	adc.w	r3, r5, r3
 80046ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046ea:	4629      	mov	r1, r5
 80046ec:	008b      	lsls	r3, r1, #2
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f4:	4621      	mov	r1, r4
 80046f6:	008a      	lsls	r2, r1, #2
 80046f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046fc:	f7fc faac 	bl	8000c58 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4b60      	ldr	r3, [pc, #384]	; (8004888 <UART_SetConfig+0x4e4>)
 8004706:	fba3 2302 	umull	r2, r3, r3, r2
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	011c      	lsls	r4, r3, #4
 800470e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800471c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	1891      	adds	r1, r2, r2
 8004726:	61b9      	str	r1, [r7, #24]
 8004728:	415b      	adcs	r3, r3
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004730:	4641      	mov	r1, r8
 8004732:	1851      	adds	r1, r2, r1
 8004734:	6139      	str	r1, [r7, #16]
 8004736:	4649      	mov	r1, r9
 8004738:	414b      	adcs	r3, r1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004748:	4659      	mov	r1, fp
 800474a:	00cb      	lsls	r3, r1, #3
 800474c:	4651      	mov	r1, sl
 800474e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004752:	4651      	mov	r1, sl
 8004754:	00ca      	lsls	r2, r1, #3
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	4603      	mov	r3, r0
 800475c:	4642      	mov	r2, r8
 800475e:	189b      	adds	r3, r3, r2
 8004760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	67bb      	str	r3, [r7, #120]	; 0x78
 800477a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004788:	4649      	mov	r1, r9
 800478a:	008b      	lsls	r3, r1, #2
 800478c:	4641      	mov	r1, r8
 800478e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004792:	4641      	mov	r1, r8
 8004794:	008a      	lsls	r2, r1, #2
 8004796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800479a:	f7fc fa5d 	bl	8000c58 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4b39      	ldr	r3, [pc, #228]	; (8004888 <UART_SetConfig+0x4e4>)
 80047a4:	fba3 1302 	umull	r1, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2164      	movs	r1, #100	; 0x64
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a34      	ldr	r2, [pc, #208]	; (8004888 <UART_SetConfig+0x4e4>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c2:	441c      	add	r4, r3
 80047c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c8:	2200      	movs	r2, #0
 80047ca:	673b      	str	r3, [r7, #112]	; 0x70
 80047cc:	677a      	str	r2, [r7, #116]	; 0x74
 80047ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047d2:	4642      	mov	r2, r8
 80047d4:	464b      	mov	r3, r9
 80047d6:	1891      	adds	r1, r2, r2
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	415b      	adcs	r3, r3
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e2:	4641      	mov	r1, r8
 80047e4:	1851      	adds	r1, r2, r1
 80047e6:	6039      	str	r1, [r7, #0]
 80047e8:	4649      	mov	r1, r9
 80047ea:	414b      	adcs	r3, r1
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047fa:	4659      	mov	r1, fp
 80047fc:	00cb      	lsls	r3, r1, #3
 80047fe:	4651      	mov	r1, sl
 8004800:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004804:	4651      	mov	r1, sl
 8004806:	00ca      	lsls	r2, r1, #3
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	4603      	mov	r3, r0
 800480e:	4642      	mov	r2, r8
 8004810:	189b      	adds	r3, r3, r2
 8004812:	66bb      	str	r3, [r7, #104]	; 0x68
 8004814:	464b      	mov	r3, r9
 8004816:	460a      	mov	r2, r1
 8004818:	eb42 0303 	adc.w	r3, r2, r3
 800481c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	663b      	str	r3, [r7, #96]	; 0x60
 8004828:	667a      	str	r2, [r7, #100]	; 0x64
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004836:	4649      	mov	r1, r9
 8004838:	008b      	lsls	r3, r1, #2
 800483a:	4641      	mov	r1, r8
 800483c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004840:	4641      	mov	r1, r8
 8004842:	008a      	lsls	r2, r1, #2
 8004844:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004848:	f7fc fa06 	bl	8000c58 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <UART_SetConfig+0x4e4>)
 8004852:	fba3 1302 	umull	r1, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2164      	movs	r1, #100	; 0x64
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	3332      	adds	r3, #50	; 0x32
 8004864:	4a08      	ldr	r2, [pc, #32]	; (8004888 <UART_SetConfig+0x4e4>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4422      	add	r2, r4
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	bf00      	nop
 800487c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004880:	46bd      	mov	sp, r7
 8004882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004886:	bf00      	nop
 8004888:	51eb851f 	.word	0x51eb851f

0800488c <__errno>:
 800488c:	4b01      	ldr	r3, [pc, #4]	; (8004894 <__errno+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	2000000c 	.word	0x2000000c

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4d0d      	ldr	r5, [pc, #52]	; (80048d0 <__libc_init_array+0x38>)
 800489c:	4c0d      	ldr	r4, [pc, #52]	; (80048d4 <__libc_init_array+0x3c>)
 800489e:	1b64      	subs	r4, r4, r5
 80048a0:	10a4      	asrs	r4, r4, #2
 80048a2:	2600      	movs	r6, #0
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	4d0b      	ldr	r5, [pc, #44]	; (80048d8 <__libc_init_array+0x40>)
 80048aa:	4c0c      	ldr	r4, [pc, #48]	; (80048dc <__libc_init_array+0x44>)
 80048ac:	f002 fdc2 	bl	8007434 <_init>
 80048b0:	1b64      	subs	r4, r4, r5
 80048b2:	10a4      	asrs	r4, r4, #2
 80048b4:	2600      	movs	r6, #0
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	0800790c 	.word	0x0800790c
 80048d4:	0800790c 	.word	0x0800790c
 80048d8:	0800790c 	.word	0x0800790c
 80048dc:	08007910 	.word	0x08007910

080048e0 <memset>:
 80048e0:	4402      	add	r2, r0
 80048e2:	4603      	mov	r3, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <__cvt>:
 80048f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	ec55 4b10 	vmov	r4, r5, d0
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	460e      	mov	r6, r1
 80048fc:	4619      	mov	r1, r3
 80048fe:	462b      	mov	r3, r5
 8004900:	bfbb      	ittet	lt
 8004902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004906:	461d      	movlt	r5, r3
 8004908:	2300      	movge	r3, #0
 800490a:	232d      	movlt	r3, #45	; 0x2d
 800490c:	700b      	strb	r3, [r1, #0]
 800490e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004910:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004914:	4691      	mov	r9, r2
 8004916:	f023 0820 	bic.w	r8, r3, #32
 800491a:	bfbc      	itt	lt
 800491c:	4622      	movlt	r2, r4
 800491e:	4614      	movlt	r4, r2
 8004920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004924:	d005      	beq.n	8004932 <__cvt+0x42>
 8004926:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800492a:	d100      	bne.n	800492e <__cvt+0x3e>
 800492c:	3601      	adds	r6, #1
 800492e:	2102      	movs	r1, #2
 8004930:	e000      	b.n	8004934 <__cvt+0x44>
 8004932:	2103      	movs	r1, #3
 8004934:	ab03      	add	r3, sp, #12
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	ab02      	add	r3, sp, #8
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	ec45 4b10 	vmov	d0, r4, r5
 8004940:	4653      	mov	r3, sl
 8004942:	4632      	mov	r2, r6
 8004944:	f000 fe18 	bl	8005578 <_dtoa_r>
 8004948:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800494c:	4607      	mov	r7, r0
 800494e:	d102      	bne.n	8004956 <__cvt+0x66>
 8004950:	f019 0f01 	tst.w	r9, #1
 8004954:	d022      	beq.n	800499c <__cvt+0xac>
 8004956:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800495a:	eb07 0906 	add.w	r9, r7, r6
 800495e:	d110      	bne.n	8004982 <__cvt+0x92>
 8004960:	783b      	ldrb	r3, [r7, #0]
 8004962:	2b30      	cmp	r3, #48	; 0x30
 8004964:	d10a      	bne.n	800497c <__cvt+0x8c>
 8004966:	2200      	movs	r2, #0
 8004968:	2300      	movs	r3, #0
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fc f8b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004972:	b918      	cbnz	r0, 800497c <__cvt+0x8c>
 8004974:	f1c6 0601 	rsb	r6, r6, #1
 8004978:	f8ca 6000 	str.w	r6, [sl]
 800497c:	f8da 3000 	ldr.w	r3, [sl]
 8004980:	4499      	add	r9, r3
 8004982:	2200      	movs	r2, #0
 8004984:	2300      	movs	r3, #0
 8004986:	4620      	mov	r0, r4
 8004988:	4629      	mov	r1, r5
 800498a:	f7fc f8a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800498e:	b108      	cbz	r0, 8004994 <__cvt+0xa4>
 8004990:	f8cd 900c 	str.w	r9, [sp, #12]
 8004994:	2230      	movs	r2, #48	; 0x30
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	454b      	cmp	r3, r9
 800499a:	d307      	bcc.n	80049ac <__cvt+0xbc>
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049a0:	1bdb      	subs	r3, r3, r7
 80049a2:	4638      	mov	r0, r7
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	b004      	add	sp, #16
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	9103      	str	r1, [sp, #12]
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e7f0      	b.n	8004996 <__cvt+0xa6>

080049b4 <__exponent>:
 80049b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049b6:	4603      	mov	r3, r0
 80049b8:	2900      	cmp	r1, #0
 80049ba:	bfb8      	it	lt
 80049bc:	4249      	neglt	r1, r1
 80049be:	f803 2b02 	strb.w	r2, [r3], #2
 80049c2:	bfb4      	ite	lt
 80049c4:	222d      	movlt	r2, #45	; 0x2d
 80049c6:	222b      	movge	r2, #43	; 0x2b
 80049c8:	2909      	cmp	r1, #9
 80049ca:	7042      	strb	r2, [r0, #1]
 80049cc:	dd2a      	ble.n	8004a24 <__exponent+0x70>
 80049ce:	f10d 0407 	add.w	r4, sp, #7
 80049d2:	46a4      	mov	ip, r4
 80049d4:	270a      	movs	r7, #10
 80049d6:	46a6      	mov	lr, r4
 80049d8:	460a      	mov	r2, r1
 80049da:	fb91 f6f7 	sdiv	r6, r1, r7
 80049de:	fb07 1516 	mls	r5, r7, r6, r1
 80049e2:	3530      	adds	r5, #48	; 0x30
 80049e4:	2a63      	cmp	r2, #99	; 0x63
 80049e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80049ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049ee:	4631      	mov	r1, r6
 80049f0:	dcf1      	bgt.n	80049d6 <__exponent+0x22>
 80049f2:	3130      	adds	r1, #48	; 0x30
 80049f4:	f1ae 0502 	sub.w	r5, lr, #2
 80049f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049fc:	1c44      	adds	r4, r0, #1
 80049fe:	4629      	mov	r1, r5
 8004a00:	4561      	cmp	r1, ip
 8004a02:	d30a      	bcc.n	8004a1a <__exponent+0x66>
 8004a04:	f10d 0209 	add.w	r2, sp, #9
 8004a08:	eba2 020e 	sub.w	r2, r2, lr
 8004a0c:	4565      	cmp	r5, ip
 8004a0e:	bf88      	it	hi
 8004a10:	2200      	movhi	r2, #0
 8004a12:	4413      	add	r3, r2
 8004a14:	1a18      	subs	r0, r3, r0
 8004a16:	b003      	add	sp, #12
 8004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a22:	e7ed      	b.n	8004a00 <__exponent+0x4c>
 8004a24:	2330      	movs	r3, #48	; 0x30
 8004a26:	3130      	adds	r1, #48	; 0x30
 8004a28:	7083      	strb	r3, [r0, #2]
 8004a2a:	70c1      	strb	r1, [r0, #3]
 8004a2c:	1d03      	adds	r3, r0, #4
 8004a2e:	e7f1      	b.n	8004a14 <__exponent+0x60>

08004a30 <_printf_float>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	ed2d 8b02 	vpush	{d8}
 8004a38:	b08d      	sub	sp, #52	; 0x34
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a40:	4616      	mov	r6, r2
 8004a42:	461f      	mov	r7, r3
 8004a44:	4605      	mov	r5, r0
 8004a46:	f001 fd3d 	bl	80064c4 <_localeconv_r>
 8004a4a:	f8d0 a000 	ldr.w	sl, [r0]
 8004a4e:	4650      	mov	r0, sl
 8004a50:	f7fb fbc6 	bl	80001e0 <strlen>
 8004a54:	2300      	movs	r3, #0
 8004a56:	930a      	str	r3, [sp, #40]	; 0x28
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	9305      	str	r3, [sp, #20]
 8004a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a64:	3307      	adds	r3, #7
 8004a66:	f023 0307 	bic.w	r3, r3, #7
 8004a6a:	f103 0208 	add.w	r2, r3, #8
 8004a6e:	f8c8 2000 	str.w	r2, [r8]
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a82:	9307      	str	r3, [sp, #28]
 8004a84:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a88:	ee08 0a10 	vmov	s16, r0
 8004a8c:	4b9f      	ldr	r3, [pc, #636]	; (8004d0c <_printf_float+0x2dc>)
 8004a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295
 8004a96:	f7fc f851 	bl	8000b3c <__aeabi_dcmpun>
 8004a9a:	bb88      	cbnz	r0, 8004b00 <_printf_float+0xd0>
 8004a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa0:	4b9a      	ldr	r3, [pc, #616]	; (8004d0c <_printf_float+0x2dc>)
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	f7fc f82b 	bl	8000b00 <__aeabi_dcmple>
 8004aaa:	bb48      	cbnz	r0, 8004b00 <_printf_float+0xd0>
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	f7fc f81a 	bl	8000aec <__aeabi_dcmplt>
 8004ab8:	b110      	cbz	r0, 8004ac0 <_printf_float+0x90>
 8004aba:	232d      	movs	r3, #45	; 0x2d
 8004abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac0:	4b93      	ldr	r3, [pc, #588]	; (8004d10 <_printf_float+0x2e0>)
 8004ac2:	4894      	ldr	r0, [pc, #592]	; (8004d14 <_printf_float+0x2e4>)
 8004ac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ac8:	bf94      	ite	ls
 8004aca:	4698      	movls	r8, r3
 8004acc:	4680      	movhi	r8, r0
 8004ace:	2303      	movs	r3, #3
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	9b05      	ldr	r3, [sp, #20]
 8004ad4:	f023 0204 	bic.w	r2, r3, #4
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	f04f 0900 	mov.w	r9, #0
 8004ade:	9700      	str	r7, [sp, #0]
 8004ae0:	4633      	mov	r3, r6
 8004ae2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f9d8 	bl	8004e9c <_printf_common>
 8004aec:	3001      	adds	r0, #1
 8004aee:	f040 8090 	bne.w	8004c12 <_printf_float+0x1e2>
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	b00d      	add	sp, #52	; 0x34
 8004af8:	ecbd 8b02 	vpop	{d8}
 8004afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fc f818 	bl	8000b3c <__aeabi_dcmpun>
 8004b0c:	b140      	cbz	r0, 8004b20 <_printf_float+0xf0>
 8004b0e:	464b      	mov	r3, r9
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bfbc      	itt	lt
 8004b14:	232d      	movlt	r3, #45	; 0x2d
 8004b16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b1a:	487f      	ldr	r0, [pc, #508]	; (8004d18 <_printf_float+0x2e8>)
 8004b1c:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <_printf_float+0x2ec>)
 8004b1e:	e7d1      	b.n	8004ac4 <_printf_float+0x94>
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b26:	9206      	str	r2, [sp, #24]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	d13f      	bne.n	8004bac <_printf_float+0x17c>
 8004b2c:	2306      	movs	r3, #6
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	9b05      	ldr	r3, [sp, #20]
 8004b32:	6861      	ldr	r1, [r4, #4]
 8004b34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9303      	str	r3, [sp, #12]
 8004b3c:	ab0a      	add	r3, sp, #40	; 0x28
 8004b3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b42:	ab09      	add	r3, sp, #36	; 0x24
 8004b44:	ec49 8b10 	vmov	d0, r8, r9
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6022      	str	r2, [r4, #0]
 8004b4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b50:	4628      	mov	r0, r5
 8004b52:	f7ff fecd 	bl	80048f0 <__cvt>
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b5a:	2b47      	cmp	r3, #71	; 0x47
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	d108      	bne.n	8004b72 <_printf_float+0x142>
 8004b60:	1cc8      	adds	r0, r1, #3
 8004b62:	db02      	blt.n	8004b6a <_printf_float+0x13a>
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	4299      	cmp	r1, r3
 8004b68:	dd41      	ble.n	8004bee <_printf_float+0x1be>
 8004b6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b6e:	fa5f fb8b 	uxtb.w	fp, fp
 8004b72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b76:	d820      	bhi.n	8004bba <_printf_float+0x18a>
 8004b78:	3901      	subs	r1, #1
 8004b7a:	465a      	mov	r2, fp
 8004b7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b80:	9109      	str	r1, [sp, #36]	; 0x24
 8004b82:	f7ff ff17 	bl	80049b4 <__exponent>
 8004b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b88:	1813      	adds	r3, r2, r0
 8004b8a:	2a01      	cmp	r2, #1
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	dc02      	bgt.n	8004b98 <_printf_float+0x168>
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	07d2      	lsls	r2, r2, #31
 8004b96:	d501      	bpl.n	8004b9c <_printf_float+0x16c>
 8004b98:	3301      	adds	r3, #1
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d09c      	beq.n	8004ade <_printf_float+0xae>
 8004ba4:	232d      	movs	r3, #45	; 0x2d
 8004ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004baa:	e798      	b.n	8004ade <_printf_float+0xae>
 8004bac:	9a06      	ldr	r2, [sp, #24]
 8004bae:	2a47      	cmp	r2, #71	; 0x47
 8004bb0:	d1be      	bne.n	8004b30 <_printf_float+0x100>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1bc      	bne.n	8004b30 <_printf_float+0x100>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7b9      	b.n	8004b2e <_printf_float+0xfe>
 8004bba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004bbe:	d118      	bne.n	8004bf2 <_printf_float+0x1c2>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	dd0b      	ble.n	8004bde <_printf_float+0x1ae>
 8004bc6:	6121      	str	r1, [r4, #16]
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_printf_float+0x1a0>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	07d0      	lsls	r0, r2, #31
 8004bce:	d502      	bpl.n	8004bd6 <_printf_float+0x1a6>
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	e7de      	b.n	8004b9c <_printf_float+0x16c>
 8004bde:	b913      	cbnz	r3, 8004be6 <_printf_float+0x1b6>
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	07d2      	lsls	r2, r2, #31
 8004be4:	d501      	bpl.n	8004bea <_printf_float+0x1ba>
 8004be6:	3302      	adds	r3, #2
 8004be8:	e7f4      	b.n	8004bd4 <_printf_float+0x1a4>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e7f2      	b.n	8004bd4 <_printf_float+0x1a4>
 8004bee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	db05      	blt.n	8004c04 <_printf_float+0x1d4>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	6121      	str	r1, [r4, #16]
 8004bfc:	07d8      	lsls	r0, r3, #31
 8004bfe:	d5ea      	bpl.n	8004bd6 <_printf_float+0x1a6>
 8004c00:	1c4b      	adds	r3, r1, #1
 8004c02:	e7e7      	b.n	8004bd4 <_printf_float+0x1a4>
 8004c04:	2900      	cmp	r1, #0
 8004c06:	bfd4      	ite	le
 8004c08:	f1c1 0202 	rsble	r2, r1, #2
 8004c0c:	2201      	movgt	r2, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	e7e0      	b.n	8004bd4 <_printf_float+0x1a4>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	055a      	lsls	r2, r3, #21
 8004c16:	d407      	bmi.n	8004c28 <_printf_float+0x1f8>
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	d12c      	bne.n	8004c80 <_printf_float+0x250>
 8004c26:	e764      	b.n	8004af2 <_printf_float+0xc2>
 8004c28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c2c:	f240 80e0 	bls.w	8004df0 <_printf_float+0x3c0>
 8004c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c34:	2200      	movs	r2, #0
 8004c36:	2300      	movs	r3, #0
 8004c38:	f7fb ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d034      	beq.n	8004caa <_printf_float+0x27a>
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <_printf_float+0x2f0>)
 8004c42:	2301      	movs	r3, #1
 8004c44:	4631      	mov	r1, r6
 8004c46:	4628      	mov	r0, r5
 8004c48:	47b8      	blx	r7
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	f43f af51 	beq.w	8004af2 <_printf_float+0xc2>
 8004c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c54:	429a      	cmp	r2, r3
 8004c56:	db02      	blt.n	8004c5e <_printf_float+0x22e>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	07d8      	lsls	r0, r3, #31
 8004c5c:	d510      	bpl.n	8004c80 <_printf_float+0x250>
 8004c5e:	ee18 3a10 	vmov	r3, s16
 8004c62:	4652      	mov	r2, sl
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af41 	beq.w	8004af2 <_printf_float+0xc2>
 8004c70:	f04f 0800 	mov.w	r8, #0
 8004c74:	f104 091a 	add.w	r9, r4, #26
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	4543      	cmp	r3, r8
 8004c7e:	dc09      	bgt.n	8004c94 <_printf_float+0x264>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	079b      	lsls	r3, r3, #30
 8004c84:	f100 8105 	bmi.w	8004e92 <_printf_float+0x462>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e730      	b.n	8004af6 <_printf_float+0xc6>
 8004c94:	2301      	movs	r3, #1
 8004c96:	464a      	mov	r2, r9
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f af27 	beq.w	8004af2 <_printf_float+0xc2>
 8004ca4:	f108 0801 	add.w	r8, r8, #1
 8004ca8:	e7e6      	b.n	8004c78 <_printf_float+0x248>
 8004caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dc39      	bgt.n	8004d24 <_printf_float+0x2f4>
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <_printf_float+0x2f0>)
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af19 	beq.w	8004af2 <_printf_float+0xc2>
 8004cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d102      	bne.n	8004cce <_printf_float+0x29e>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07d9      	lsls	r1, r3, #31
 8004ccc:	d5d8      	bpl.n	8004c80 <_printf_float+0x250>
 8004cce:	ee18 3a10 	vmov	r3, s16
 8004cd2:	4652      	mov	r2, sl
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af09 	beq.w	8004af2 <_printf_float+0xc2>
 8004ce0:	f04f 0900 	mov.w	r9, #0
 8004ce4:	f104 0a1a 	add.w	sl, r4, #26
 8004ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cea:	425b      	negs	r3, r3
 8004cec:	454b      	cmp	r3, r9
 8004cee:	dc01      	bgt.n	8004cf4 <_printf_float+0x2c4>
 8004cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf2:	e792      	b.n	8004c1a <_printf_float+0x1ea>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4652      	mov	r2, sl
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f aef7 	beq.w	8004af2 <_printf_float+0xc2>
 8004d04:	f109 0901 	add.w	r9, r9, #1
 8004d08:	e7ee      	b.n	8004ce8 <_printf_float+0x2b8>
 8004d0a:	bf00      	nop
 8004d0c:	7fefffff 	.word	0x7fefffff
 8004d10:	08007530 	.word	0x08007530
 8004d14:	08007534 	.word	0x08007534
 8004d18:	0800753c 	.word	0x0800753c
 8004d1c:	08007538 	.word	0x08007538
 8004d20:	08007540 	.word	0x08007540
 8004d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bfa8      	it	ge
 8004d2c:	461a      	movge	r2, r3
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	4691      	mov	r9, r2
 8004d32:	dc37      	bgt.n	8004da4 <_printf_float+0x374>
 8004d34:	f04f 0b00 	mov.w	fp, #0
 8004d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d3c:	f104 021a 	add.w	r2, r4, #26
 8004d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	eba3 0309 	sub.w	r3, r3, r9
 8004d48:	455b      	cmp	r3, fp
 8004d4a:	dc33      	bgt.n	8004db4 <_printf_float+0x384>
 8004d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d50:	429a      	cmp	r2, r3
 8004d52:	db3b      	blt.n	8004dcc <_printf_float+0x39c>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	07da      	lsls	r2, r3, #31
 8004d58:	d438      	bmi.n	8004dcc <_printf_float+0x39c>
 8004d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d5c:	9a05      	ldr	r2, [sp, #20]
 8004d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d60:	1a9a      	subs	r2, r3, r2
 8004d62:	eba3 0901 	sub.w	r9, r3, r1
 8004d66:	4591      	cmp	r9, r2
 8004d68:	bfa8      	it	ge
 8004d6a:	4691      	movge	r9, r2
 8004d6c:	f1b9 0f00 	cmp.w	r9, #0
 8004d70:	dc35      	bgt.n	8004dde <_printf_float+0x3ae>
 8004d72:	f04f 0800 	mov.w	r8, #0
 8004d76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d7a:	f104 0a1a 	add.w	sl, r4, #26
 8004d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	eba3 0309 	sub.w	r3, r3, r9
 8004d88:	4543      	cmp	r3, r8
 8004d8a:	f77f af79 	ble.w	8004c80 <_printf_float+0x250>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4652      	mov	r2, sl
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f43f aeaa 	beq.w	8004af2 <_printf_float+0xc2>
 8004d9e:	f108 0801 	add.w	r8, r8, #1
 8004da2:	e7ec      	b.n	8004d7e <_printf_float+0x34e>
 8004da4:	4613      	mov	r3, r2
 8004da6:	4631      	mov	r1, r6
 8004da8:	4642      	mov	r2, r8
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	d1c0      	bne.n	8004d34 <_printf_float+0x304>
 8004db2:	e69e      	b.n	8004af2 <_printf_float+0xc2>
 8004db4:	2301      	movs	r3, #1
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	9205      	str	r2, [sp, #20]
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f ae97 	beq.w	8004af2 <_printf_float+0xc2>
 8004dc4:	9a05      	ldr	r2, [sp, #20]
 8004dc6:	f10b 0b01 	add.w	fp, fp, #1
 8004dca:	e7b9      	b.n	8004d40 <_printf_float+0x310>
 8004dcc:	ee18 3a10 	vmov	r3, s16
 8004dd0:	4652      	mov	r2, sl
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d1be      	bne.n	8004d5a <_printf_float+0x32a>
 8004ddc:	e689      	b.n	8004af2 <_printf_float+0xc2>
 8004dde:	9a05      	ldr	r2, [sp, #20]
 8004de0:	464b      	mov	r3, r9
 8004de2:	4442      	add	r2, r8
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	d1c1      	bne.n	8004d72 <_printf_float+0x342>
 8004dee:	e680      	b.n	8004af2 <_printf_float+0xc2>
 8004df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004df2:	2a01      	cmp	r2, #1
 8004df4:	dc01      	bgt.n	8004dfa <_printf_float+0x3ca>
 8004df6:	07db      	lsls	r3, r3, #31
 8004df8:	d538      	bpl.n	8004e6c <_printf_float+0x43c>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae74 	beq.w	8004af2 <_printf_float+0xc2>
 8004e0a:	ee18 3a10 	vmov	r3, s16
 8004e0e:	4652      	mov	r2, sl
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f ae6b 	beq.w	8004af2 <_printf_float+0xc2>
 8004e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	f7fb fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e28:	b9d8      	cbnz	r0, 8004e62 <_printf_float+0x432>
 8004e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2c:	f108 0201 	add.w	r2, r8, #1
 8004e30:	3b01      	subs	r3, #1
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d10e      	bne.n	8004e5a <_printf_float+0x42a>
 8004e3c:	e659      	b.n	8004af2 <_printf_float+0xc2>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae52 	beq.w	8004af2 <_printf_float+0xc2>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e54:	3b01      	subs	r3, #1
 8004e56:	4543      	cmp	r3, r8
 8004e58:	dcf1      	bgt.n	8004e3e <_printf_float+0x40e>
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e60:	e6dc      	b.n	8004c1c <_printf_float+0x1ec>
 8004e62:	f04f 0800 	mov.w	r8, #0
 8004e66:	f104 0a1a 	add.w	sl, r4, #26
 8004e6a:	e7f2      	b.n	8004e52 <_printf_float+0x422>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4642      	mov	r2, r8
 8004e70:	e7df      	b.n	8004e32 <_printf_float+0x402>
 8004e72:	2301      	movs	r3, #1
 8004e74:	464a      	mov	r2, r9
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae38 	beq.w	8004af2 <_printf_float+0xc2>
 8004e82:	f108 0801 	add.w	r8, r8, #1
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e8a:	1a5b      	subs	r3, r3, r1
 8004e8c:	4543      	cmp	r3, r8
 8004e8e:	dcf0      	bgt.n	8004e72 <_printf_float+0x442>
 8004e90:	e6fa      	b.n	8004c88 <_printf_float+0x258>
 8004e92:	f04f 0800 	mov.w	r8, #0
 8004e96:	f104 0919 	add.w	r9, r4, #25
 8004e9a:	e7f4      	b.n	8004e86 <_printf_float+0x456>

08004e9c <_printf_common>:
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	4616      	mov	r6, r2
 8004ea2:	4699      	mov	r9, r3
 8004ea4:	688a      	ldr	r2, [r1, #8]
 8004ea6:	690b      	ldr	r3, [r1, #16]
 8004ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bfb8      	it	lt
 8004eb0:	4613      	movlt	r3, r2
 8004eb2:	6033      	str	r3, [r6, #0]
 8004eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eb8:	4607      	mov	r7, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	b10a      	cbz	r2, 8004ec2 <_printf_common+0x26>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	0699      	lsls	r1, r3, #26
 8004ec6:	bf42      	ittt	mi
 8004ec8:	6833      	ldrmi	r3, [r6, #0]
 8004eca:	3302      	addmi	r3, #2
 8004ecc:	6033      	strmi	r3, [r6, #0]
 8004ece:	6825      	ldr	r5, [r4, #0]
 8004ed0:	f015 0506 	ands.w	r5, r5, #6
 8004ed4:	d106      	bne.n	8004ee4 <_printf_common+0x48>
 8004ed6:	f104 0a19 	add.w	sl, r4, #25
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	6832      	ldr	r2, [r6, #0]
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dc26      	bgt.n	8004f32 <_printf_common+0x96>
 8004ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ee8:	1e13      	subs	r3, r2, #0
 8004eea:	6822      	ldr	r2, [r4, #0]
 8004eec:	bf18      	it	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	0692      	lsls	r2, r2, #26
 8004ef2:	d42b      	bmi.n	8004f4c <_printf_common+0xb0>
 8004ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef8:	4649      	mov	r1, r9
 8004efa:	4638      	mov	r0, r7
 8004efc:	47c0      	blx	r8
 8004efe:	3001      	adds	r0, #1
 8004f00:	d01e      	beq.n	8004f40 <_printf_common+0xa4>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	68e5      	ldr	r5, [r4, #12]
 8004f06:	6832      	ldr	r2, [r6, #0]
 8004f08:	f003 0306 	and.w	r3, r3, #6
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	bf08      	it	eq
 8004f10:	1aad      	subeq	r5, r5, r2
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	6922      	ldr	r2, [r4, #16]
 8004f16:	bf0c      	ite	eq
 8004f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f1c:	2500      	movne	r5, #0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	bfc4      	itt	gt
 8004f22:	1a9b      	subgt	r3, r3, r2
 8004f24:	18ed      	addgt	r5, r5, r3
 8004f26:	2600      	movs	r6, #0
 8004f28:	341a      	adds	r4, #26
 8004f2a:	42b5      	cmp	r5, r6
 8004f2c:	d11a      	bne.n	8004f64 <_printf_common+0xc8>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e008      	b.n	8004f44 <_printf_common+0xa8>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4652      	mov	r2, sl
 8004f36:	4649      	mov	r1, r9
 8004f38:	4638      	mov	r0, r7
 8004f3a:	47c0      	blx	r8
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d103      	bne.n	8004f48 <_printf_common+0xac>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	3501      	adds	r5, #1
 8004f4a:	e7c6      	b.n	8004eda <_printf_common+0x3e>
 8004f4c:	18e1      	adds	r1, r4, r3
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	2030      	movs	r0, #48	; 0x30
 8004f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f56:	4422      	add	r2, r4
 8004f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f60:	3302      	adds	r3, #2
 8004f62:	e7c7      	b.n	8004ef4 <_printf_common+0x58>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4622      	mov	r2, r4
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d0e6      	beq.n	8004f40 <_printf_common+0xa4>
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7d9      	b.n	8004f2a <_printf_common+0x8e>
	...

08004f78 <_printf_i>:
 8004f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	7e0f      	ldrb	r7, [r1, #24]
 8004f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f80:	2f78      	cmp	r7, #120	; 0x78
 8004f82:	4691      	mov	r9, r2
 8004f84:	4680      	mov	r8, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	469a      	mov	sl, r3
 8004f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f8e:	d807      	bhi.n	8004fa0 <_printf_i+0x28>
 8004f90:	2f62      	cmp	r7, #98	; 0x62
 8004f92:	d80a      	bhi.n	8004faa <_printf_i+0x32>
 8004f94:	2f00      	cmp	r7, #0
 8004f96:	f000 80d8 	beq.w	800514a <_printf_i+0x1d2>
 8004f9a:	2f58      	cmp	r7, #88	; 0x58
 8004f9c:	f000 80a3 	beq.w	80050e6 <_printf_i+0x16e>
 8004fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fa8:	e03a      	b.n	8005020 <_printf_i+0xa8>
 8004faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fae:	2b15      	cmp	r3, #21
 8004fb0:	d8f6      	bhi.n	8004fa0 <_printf_i+0x28>
 8004fb2:	a101      	add	r1, pc, #4	; (adr r1, 8004fb8 <_printf_i+0x40>)
 8004fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb8:	08005011 	.word	0x08005011
 8004fbc:	08005025 	.word	0x08005025
 8004fc0:	08004fa1 	.word	0x08004fa1
 8004fc4:	08004fa1 	.word	0x08004fa1
 8004fc8:	08004fa1 	.word	0x08004fa1
 8004fcc:	08004fa1 	.word	0x08004fa1
 8004fd0:	08005025 	.word	0x08005025
 8004fd4:	08004fa1 	.word	0x08004fa1
 8004fd8:	08004fa1 	.word	0x08004fa1
 8004fdc:	08004fa1 	.word	0x08004fa1
 8004fe0:	08004fa1 	.word	0x08004fa1
 8004fe4:	08005131 	.word	0x08005131
 8004fe8:	08005055 	.word	0x08005055
 8004fec:	08005113 	.word	0x08005113
 8004ff0:	08004fa1 	.word	0x08004fa1
 8004ff4:	08004fa1 	.word	0x08004fa1
 8004ff8:	08005153 	.word	0x08005153
 8004ffc:	08004fa1 	.word	0x08004fa1
 8005000:	08005055 	.word	0x08005055
 8005004:	08004fa1 	.word	0x08004fa1
 8005008:	08004fa1 	.word	0x08004fa1
 800500c:	0800511b 	.word	0x0800511b
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	602a      	str	r2, [r5, #0]
 8005018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005020:	2301      	movs	r3, #1
 8005022:	e0a3      	b.n	800516c <_printf_i+0x1f4>
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	6829      	ldr	r1, [r5, #0]
 8005028:	0606      	lsls	r6, r0, #24
 800502a:	f101 0304 	add.w	r3, r1, #4
 800502e:	d50a      	bpl.n	8005046 <_printf_i+0xce>
 8005030:	680e      	ldr	r6, [r1, #0]
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	2e00      	cmp	r6, #0
 8005036:	da03      	bge.n	8005040 <_printf_i+0xc8>
 8005038:	232d      	movs	r3, #45	; 0x2d
 800503a:	4276      	negs	r6, r6
 800503c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005040:	485e      	ldr	r0, [pc, #376]	; (80051bc <_printf_i+0x244>)
 8005042:	230a      	movs	r3, #10
 8005044:	e019      	b.n	800507a <_printf_i+0x102>
 8005046:	680e      	ldr	r6, [r1, #0]
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800504e:	bf18      	it	ne
 8005050:	b236      	sxthne	r6, r6
 8005052:	e7ef      	b.n	8005034 <_printf_i+0xbc>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	6029      	str	r1, [r5, #0]
 800505c:	0601      	lsls	r1, r0, #24
 800505e:	d501      	bpl.n	8005064 <_printf_i+0xec>
 8005060:	681e      	ldr	r6, [r3, #0]
 8005062:	e002      	b.n	800506a <_printf_i+0xf2>
 8005064:	0646      	lsls	r6, r0, #25
 8005066:	d5fb      	bpl.n	8005060 <_printf_i+0xe8>
 8005068:	881e      	ldrh	r6, [r3, #0]
 800506a:	4854      	ldr	r0, [pc, #336]	; (80051bc <_printf_i+0x244>)
 800506c:	2f6f      	cmp	r7, #111	; 0x6f
 800506e:	bf0c      	ite	eq
 8005070:	2308      	moveq	r3, #8
 8005072:	230a      	movne	r3, #10
 8005074:	2100      	movs	r1, #0
 8005076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800507a:	6865      	ldr	r5, [r4, #4]
 800507c:	60a5      	str	r5, [r4, #8]
 800507e:	2d00      	cmp	r5, #0
 8005080:	bfa2      	ittt	ge
 8005082:	6821      	ldrge	r1, [r4, #0]
 8005084:	f021 0104 	bicge.w	r1, r1, #4
 8005088:	6021      	strge	r1, [r4, #0]
 800508a:	b90e      	cbnz	r6, 8005090 <_printf_i+0x118>
 800508c:	2d00      	cmp	r5, #0
 800508e:	d04d      	beq.n	800512c <_printf_i+0x1b4>
 8005090:	4615      	mov	r5, r2
 8005092:	fbb6 f1f3 	udiv	r1, r6, r3
 8005096:	fb03 6711 	mls	r7, r3, r1, r6
 800509a:	5dc7      	ldrb	r7, [r0, r7]
 800509c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050a0:	4637      	mov	r7, r6
 80050a2:	42bb      	cmp	r3, r7
 80050a4:	460e      	mov	r6, r1
 80050a6:	d9f4      	bls.n	8005092 <_printf_i+0x11a>
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d10b      	bne.n	80050c4 <_printf_i+0x14c>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07de      	lsls	r6, r3, #31
 80050b0:	d508      	bpl.n	80050c4 <_printf_i+0x14c>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	6861      	ldr	r1, [r4, #4]
 80050b6:	4299      	cmp	r1, r3
 80050b8:	bfde      	ittt	le
 80050ba:	2330      	movle	r3, #48	; 0x30
 80050bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050c4:	1b52      	subs	r2, r2, r5
 80050c6:	6122      	str	r2, [r4, #16]
 80050c8:	f8cd a000 	str.w	sl, [sp]
 80050cc:	464b      	mov	r3, r9
 80050ce:	aa03      	add	r2, sp, #12
 80050d0:	4621      	mov	r1, r4
 80050d2:	4640      	mov	r0, r8
 80050d4:	f7ff fee2 	bl	8004e9c <_printf_common>
 80050d8:	3001      	adds	r0, #1
 80050da:	d14c      	bne.n	8005176 <_printf_i+0x1fe>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	b004      	add	sp, #16
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	4835      	ldr	r0, [pc, #212]	; (80051bc <_printf_i+0x244>)
 80050e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050ec:	6829      	ldr	r1, [r5, #0]
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f4:	6029      	str	r1, [r5, #0]
 80050f6:	061d      	lsls	r5, r3, #24
 80050f8:	d514      	bpl.n	8005124 <_printf_i+0x1ac>
 80050fa:	07df      	lsls	r7, r3, #31
 80050fc:	bf44      	itt	mi
 80050fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005102:	6023      	strmi	r3, [r4, #0]
 8005104:	b91e      	cbnz	r6, 800510e <_printf_i+0x196>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f023 0320 	bic.w	r3, r3, #32
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	2310      	movs	r3, #16
 8005110:	e7b0      	b.n	8005074 <_printf_i+0xfc>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	f043 0320 	orr.w	r3, r3, #32
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	2378      	movs	r3, #120	; 0x78
 800511c:	4828      	ldr	r0, [pc, #160]	; (80051c0 <_printf_i+0x248>)
 800511e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005122:	e7e3      	b.n	80050ec <_printf_i+0x174>
 8005124:	0659      	lsls	r1, r3, #25
 8005126:	bf48      	it	mi
 8005128:	b2b6      	uxthmi	r6, r6
 800512a:	e7e6      	b.n	80050fa <_printf_i+0x182>
 800512c:	4615      	mov	r5, r2
 800512e:	e7bb      	b.n	80050a8 <_printf_i+0x130>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	6826      	ldr	r6, [r4, #0]
 8005134:	6961      	ldr	r1, [r4, #20]
 8005136:	1d18      	adds	r0, r3, #4
 8005138:	6028      	str	r0, [r5, #0]
 800513a:	0635      	lsls	r5, r6, #24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	d501      	bpl.n	8005144 <_printf_i+0x1cc>
 8005140:	6019      	str	r1, [r3, #0]
 8005142:	e002      	b.n	800514a <_printf_i+0x1d2>
 8005144:	0670      	lsls	r0, r6, #25
 8005146:	d5fb      	bpl.n	8005140 <_printf_i+0x1c8>
 8005148:	8019      	strh	r1, [r3, #0]
 800514a:	2300      	movs	r3, #0
 800514c:	6123      	str	r3, [r4, #16]
 800514e:	4615      	mov	r5, r2
 8005150:	e7ba      	b.n	80050c8 <_printf_i+0x150>
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	1d1a      	adds	r2, r3, #4
 8005156:	602a      	str	r2, [r5, #0]
 8005158:	681d      	ldr	r5, [r3, #0]
 800515a:	6862      	ldr	r2, [r4, #4]
 800515c:	2100      	movs	r1, #0
 800515e:	4628      	mov	r0, r5
 8005160:	f7fb f846 	bl	80001f0 <memchr>
 8005164:	b108      	cbz	r0, 800516a <_printf_i+0x1f2>
 8005166:	1b40      	subs	r0, r0, r5
 8005168:	6060      	str	r0, [r4, #4]
 800516a:	6863      	ldr	r3, [r4, #4]
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	2300      	movs	r3, #0
 8005170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005174:	e7a8      	b.n	80050c8 <_printf_i+0x150>
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	462a      	mov	r2, r5
 800517a:	4649      	mov	r1, r9
 800517c:	4640      	mov	r0, r8
 800517e:	47d0      	blx	sl
 8005180:	3001      	adds	r0, #1
 8005182:	d0ab      	beq.n	80050dc <_printf_i+0x164>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	079b      	lsls	r3, r3, #30
 8005188:	d413      	bmi.n	80051b2 <_printf_i+0x23a>
 800518a:	68e0      	ldr	r0, [r4, #12]
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	4298      	cmp	r0, r3
 8005190:	bfb8      	it	lt
 8005192:	4618      	movlt	r0, r3
 8005194:	e7a4      	b.n	80050e0 <_printf_i+0x168>
 8005196:	2301      	movs	r3, #1
 8005198:	4632      	mov	r2, r6
 800519a:	4649      	mov	r1, r9
 800519c:	4640      	mov	r0, r8
 800519e:	47d0      	blx	sl
 80051a0:	3001      	adds	r0, #1
 80051a2:	d09b      	beq.n	80050dc <_printf_i+0x164>
 80051a4:	3501      	adds	r5, #1
 80051a6:	68e3      	ldr	r3, [r4, #12]
 80051a8:	9903      	ldr	r1, [sp, #12]
 80051aa:	1a5b      	subs	r3, r3, r1
 80051ac:	42ab      	cmp	r3, r5
 80051ae:	dcf2      	bgt.n	8005196 <_printf_i+0x21e>
 80051b0:	e7eb      	b.n	800518a <_printf_i+0x212>
 80051b2:	2500      	movs	r5, #0
 80051b4:	f104 0619 	add.w	r6, r4, #25
 80051b8:	e7f5      	b.n	80051a6 <_printf_i+0x22e>
 80051ba:	bf00      	nop
 80051bc:	08007542 	.word	0x08007542
 80051c0:	08007553 	.word	0x08007553

080051c4 <iprintf>:
 80051c4:	b40f      	push	{r0, r1, r2, r3}
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <iprintf+0x2c>)
 80051c8:	b513      	push	{r0, r1, r4, lr}
 80051ca:	681c      	ldr	r4, [r3, #0]
 80051cc:	b124      	cbz	r4, 80051d8 <iprintf+0x14>
 80051ce:	69a3      	ldr	r3, [r4, #24]
 80051d0:	b913      	cbnz	r3, 80051d8 <iprintf+0x14>
 80051d2:	4620      	mov	r0, r4
 80051d4:	f001 f8d8 	bl	8006388 <__sinit>
 80051d8:	ab05      	add	r3, sp, #20
 80051da:	9a04      	ldr	r2, [sp, #16]
 80051dc:	68a1      	ldr	r1, [r4, #8]
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	4620      	mov	r0, r4
 80051e2:	f001 fe95 	bl	8006f10 <_vfiprintf_r>
 80051e6:	b002      	add	sp, #8
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ec:	b004      	add	sp, #16
 80051ee:	4770      	bx	lr
 80051f0:	2000000c 	.word	0x2000000c

080051f4 <_puts_r>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	460e      	mov	r6, r1
 80051f8:	4605      	mov	r5, r0
 80051fa:	b118      	cbz	r0, 8005204 <_puts_r+0x10>
 80051fc:	6983      	ldr	r3, [r0, #24]
 80051fe:	b90b      	cbnz	r3, 8005204 <_puts_r+0x10>
 8005200:	f001 f8c2 	bl	8006388 <__sinit>
 8005204:	69ab      	ldr	r3, [r5, #24]
 8005206:	68ac      	ldr	r4, [r5, #8]
 8005208:	b913      	cbnz	r3, 8005210 <_puts_r+0x1c>
 800520a:	4628      	mov	r0, r5
 800520c:	f001 f8bc 	bl	8006388 <__sinit>
 8005210:	4b2c      	ldr	r3, [pc, #176]	; (80052c4 <_puts_r+0xd0>)
 8005212:	429c      	cmp	r4, r3
 8005214:	d120      	bne.n	8005258 <_puts_r+0x64>
 8005216:	686c      	ldr	r4, [r5, #4]
 8005218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800521a:	07db      	lsls	r3, r3, #31
 800521c:	d405      	bmi.n	800522a <_puts_r+0x36>
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	0598      	lsls	r0, r3, #22
 8005222:	d402      	bmi.n	800522a <_puts_r+0x36>
 8005224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005226:	f001 f952 	bl	80064ce <__retarget_lock_acquire_recursive>
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	0719      	lsls	r1, r3, #28
 800522e:	d51d      	bpl.n	800526c <_puts_r+0x78>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	b1db      	cbz	r3, 800526c <_puts_r+0x78>
 8005234:	3e01      	subs	r6, #1
 8005236:	68a3      	ldr	r3, [r4, #8]
 8005238:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800523c:	3b01      	subs	r3, #1
 800523e:	60a3      	str	r3, [r4, #8]
 8005240:	bb39      	cbnz	r1, 8005292 <_puts_r+0x9e>
 8005242:	2b00      	cmp	r3, #0
 8005244:	da38      	bge.n	80052b8 <_puts_r+0xc4>
 8005246:	4622      	mov	r2, r4
 8005248:	210a      	movs	r1, #10
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f848 	bl	80052e0 <__swbuf_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d011      	beq.n	8005278 <_puts_r+0x84>
 8005254:	250a      	movs	r5, #10
 8005256:	e011      	b.n	800527c <_puts_r+0x88>
 8005258:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <_puts_r+0xd4>)
 800525a:	429c      	cmp	r4, r3
 800525c:	d101      	bne.n	8005262 <_puts_r+0x6e>
 800525e:	68ac      	ldr	r4, [r5, #8]
 8005260:	e7da      	b.n	8005218 <_puts_r+0x24>
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <_puts_r+0xd8>)
 8005264:	429c      	cmp	r4, r3
 8005266:	bf08      	it	eq
 8005268:	68ec      	ldreq	r4, [r5, #12]
 800526a:	e7d5      	b.n	8005218 <_puts_r+0x24>
 800526c:	4621      	mov	r1, r4
 800526e:	4628      	mov	r0, r5
 8005270:	f000 f888 	bl	8005384 <__swsetup_r>
 8005274:	2800      	cmp	r0, #0
 8005276:	d0dd      	beq.n	8005234 <_puts_r+0x40>
 8005278:	f04f 35ff 	mov.w	r5, #4294967295
 800527c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800527e:	07da      	lsls	r2, r3, #31
 8005280:	d405      	bmi.n	800528e <_puts_r+0x9a>
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	059b      	lsls	r3, r3, #22
 8005286:	d402      	bmi.n	800528e <_puts_r+0x9a>
 8005288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800528a:	f001 f921 	bl	80064d0 <__retarget_lock_release_recursive>
 800528e:	4628      	mov	r0, r5
 8005290:	bd70      	pop	{r4, r5, r6, pc}
 8005292:	2b00      	cmp	r3, #0
 8005294:	da04      	bge.n	80052a0 <_puts_r+0xac>
 8005296:	69a2      	ldr	r2, [r4, #24]
 8005298:	429a      	cmp	r2, r3
 800529a:	dc06      	bgt.n	80052aa <_puts_r+0xb6>
 800529c:	290a      	cmp	r1, #10
 800529e:	d004      	beq.n	80052aa <_puts_r+0xb6>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	6022      	str	r2, [r4, #0]
 80052a6:	7019      	strb	r1, [r3, #0]
 80052a8:	e7c5      	b.n	8005236 <_puts_r+0x42>
 80052aa:	4622      	mov	r2, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 f817 	bl	80052e0 <__swbuf_r>
 80052b2:	3001      	adds	r0, #1
 80052b4:	d1bf      	bne.n	8005236 <_puts_r+0x42>
 80052b6:	e7df      	b.n	8005278 <_puts_r+0x84>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	250a      	movs	r5, #10
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	6022      	str	r2, [r4, #0]
 80052c0:	701d      	strb	r5, [r3, #0]
 80052c2:	e7db      	b.n	800527c <_puts_r+0x88>
 80052c4:	08007614 	.word	0x08007614
 80052c8:	08007634 	.word	0x08007634
 80052cc:	080075f4 	.word	0x080075f4

080052d0 <puts>:
 80052d0:	4b02      	ldr	r3, [pc, #8]	; (80052dc <puts+0xc>)
 80052d2:	4601      	mov	r1, r0
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	f7ff bf8d 	b.w	80051f4 <_puts_r>
 80052da:	bf00      	nop
 80052dc:	2000000c 	.word	0x2000000c

080052e0 <__swbuf_r>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	460e      	mov	r6, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	4605      	mov	r5, r0
 80052e8:	b118      	cbz	r0, 80052f2 <__swbuf_r+0x12>
 80052ea:	6983      	ldr	r3, [r0, #24]
 80052ec:	b90b      	cbnz	r3, 80052f2 <__swbuf_r+0x12>
 80052ee:	f001 f84b 	bl	8006388 <__sinit>
 80052f2:	4b21      	ldr	r3, [pc, #132]	; (8005378 <__swbuf_r+0x98>)
 80052f4:	429c      	cmp	r4, r3
 80052f6:	d12b      	bne.n	8005350 <__swbuf_r+0x70>
 80052f8:	686c      	ldr	r4, [r5, #4]
 80052fa:	69a3      	ldr	r3, [r4, #24]
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	071a      	lsls	r2, r3, #28
 8005302:	d52f      	bpl.n	8005364 <__swbuf_r+0x84>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	b36b      	cbz	r3, 8005364 <__swbuf_r+0x84>
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	1ac0      	subs	r0, r0, r3
 800530e:	6963      	ldr	r3, [r4, #20]
 8005310:	b2f6      	uxtb	r6, r6
 8005312:	4283      	cmp	r3, r0
 8005314:	4637      	mov	r7, r6
 8005316:	dc04      	bgt.n	8005322 <__swbuf_r+0x42>
 8005318:	4621      	mov	r1, r4
 800531a:	4628      	mov	r0, r5
 800531c:	f000 ffa0 	bl	8006260 <_fflush_r>
 8005320:	bb30      	cbnz	r0, 8005370 <__swbuf_r+0x90>
 8005322:	68a3      	ldr	r3, [r4, #8]
 8005324:	3b01      	subs	r3, #1
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	701e      	strb	r6, [r3, #0]
 8005330:	6963      	ldr	r3, [r4, #20]
 8005332:	3001      	adds	r0, #1
 8005334:	4283      	cmp	r3, r0
 8005336:	d004      	beq.n	8005342 <__swbuf_r+0x62>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	07db      	lsls	r3, r3, #31
 800533c:	d506      	bpl.n	800534c <__swbuf_r+0x6c>
 800533e:	2e0a      	cmp	r6, #10
 8005340:	d104      	bne.n	800534c <__swbuf_r+0x6c>
 8005342:	4621      	mov	r1, r4
 8005344:	4628      	mov	r0, r5
 8005346:	f000 ff8b 	bl	8006260 <_fflush_r>
 800534a:	b988      	cbnz	r0, 8005370 <__swbuf_r+0x90>
 800534c:	4638      	mov	r0, r7
 800534e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <__swbuf_r+0x9c>)
 8005352:	429c      	cmp	r4, r3
 8005354:	d101      	bne.n	800535a <__swbuf_r+0x7a>
 8005356:	68ac      	ldr	r4, [r5, #8]
 8005358:	e7cf      	b.n	80052fa <__swbuf_r+0x1a>
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <__swbuf_r+0xa0>)
 800535c:	429c      	cmp	r4, r3
 800535e:	bf08      	it	eq
 8005360:	68ec      	ldreq	r4, [r5, #12]
 8005362:	e7ca      	b.n	80052fa <__swbuf_r+0x1a>
 8005364:	4621      	mov	r1, r4
 8005366:	4628      	mov	r0, r5
 8005368:	f000 f80c 	bl	8005384 <__swsetup_r>
 800536c:	2800      	cmp	r0, #0
 800536e:	d0cb      	beq.n	8005308 <__swbuf_r+0x28>
 8005370:	f04f 37ff 	mov.w	r7, #4294967295
 8005374:	e7ea      	b.n	800534c <__swbuf_r+0x6c>
 8005376:	bf00      	nop
 8005378:	08007614 	.word	0x08007614
 800537c:	08007634 	.word	0x08007634
 8005380:	080075f4 	.word	0x080075f4

08005384 <__swsetup_r>:
 8005384:	4b32      	ldr	r3, [pc, #200]	; (8005450 <__swsetup_r+0xcc>)
 8005386:	b570      	push	{r4, r5, r6, lr}
 8005388:	681d      	ldr	r5, [r3, #0]
 800538a:	4606      	mov	r6, r0
 800538c:	460c      	mov	r4, r1
 800538e:	b125      	cbz	r5, 800539a <__swsetup_r+0x16>
 8005390:	69ab      	ldr	r3, [r5, #24]
 8005392:	b913      	cbnz	r3, 800539a <__swsetup_r+0x16>
 8005394:	4628      	mov	r0, r5
 8005396:	f000 fff7 	bl	8006388 <__sinit>
 800539a:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <__swsetup_r+0xd0>)
 800539c:	429c      	cmp	r4, r3
 800539e:	d10f      	bne.n	80053c0 <__swsetup_r+0x3c>
 80053a0:	686c      	ldr	r4, [r5, #4]
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053a8:	0719      	lsls	r1, r3, #28
 80053aa:	d42c      	bmi.n	8005406 <__swsetup_r+0x82>
 80053ac:	06dd      	lsls	r5, r3, #27
 80053ae:	d411      	bmi.n	80053d4 <__swsetup_r+0x50>
 80053b0:	2309      	movs	r3, #9
 80053b2:	6033      	str	r3, [r6, #0]
 80053b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053b8:	81a3      	strh	r3, [r4, #12]
 80053ba:	f04f 30ff 	mov.w	r0, #4294967295
 80053be:	e03e      	b.n	800543e <__swsetup_r+0xba>
 80053c0:	4b25      	ldr	r3, [pc, #148]	; (8005458 <__swsetup_r+0xd4>)
 80053c2:	429c      	cmp	r4, r3
 80053c4:	d101      	bne.n	80053ca <__swsetup_r+0x46>
 80053c6:	68ac      	ldr	r4, [r5, #8]
 80053c8:	e7eb      	b.n	80053a2 <__swsetup_r+0x1e>
 80053ca:	4b24      	ldr	r3, [pc, #144]	; (800545c <__swsetup_r+0xd8>)
 80053cc:	429c      	cmp	r4, r3
 80053ce:	bf08      	it	eq
 80053d0:	68ec      	ldreq	r4, [r5, #12]
 80053d2:	e7e6      	b.n	80053a2 <__swsetup_r+0x1e>
 80053d4:	0758      	lsls	r0, r3, #29
 80053d6:	d512      	bpl.n	80053fe <__swsetup_r+0x7a>
 80053d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053da:	b141      	cbz	r1, 80053ee <__swsetup_r+0x6a>
 80053dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e0:	4299      	cmp	r1, r3
 80053e2:	d002      	beq.n	80053ea <__swsetup_r+0x66>
 80053e4:	4630      	mov	r0, r6
 80053e6:	f001 fc89 	bl	8006cfc <_free_r>
 80053ea:	2300      	movs	r3, #0
 80053ec:	6363      	str	r3, [r4, #52]	; 0x34
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	2300      	movs	r3, #0
 80053f8:	6063      	str	r3, [r4, #4]
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	f043 0308 	orr.w	r3, r3, #8
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	b94b      	cbnz	r3, 800541e <__swsetup_r+0x9a>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d003      	beq.n	800541e <__swsetup_r+0x9a>
 8005416:	4621      	mov	r1, r4
 8005418:	4630      	mov	r0, r6
 800541a:	f001 f87f 	bl	800651c <__smakebuf_r>
 800541e:	89a0      	ldrh	r0, [r4, #12]
 8005420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005424:	f010 0301 	ands.w	r3, r0, #1
 8005428:	d00a      	beq.n	8005440 <__swsetup_r+0xbc>
 800542a:	2300      	movs	r3, #0
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	6963      	ldr	r3, [r4, #20]
 8005430:	425b      	negs	r3, r3
 8005432:	61a3      	str	r3, [r4, #24]
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	b943      	cbnz	r3, 800544a <__swsetup_r+0xc6>
 8005438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800543c:	d1ba      	bne.n	80053b4 <__swsetup_r+0x30>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	0781      	lsls	r1, r0, #30
 8005442:	bf58      	it	pl
 8005444:	6963      	ldrpl	r3, [r4, #20]
 8005446:	60a3      	str	r3, [r4, #8]
 8005448:	e7f4      	b.n	8005434 <__swsetup_r+0xb0>
 800544a:	2000      	movs	r0, #0
 800544c:	e7f7      	b.n	800543e <__swsetup_r+0xba>
 800544e:	bf00      	nop
 8005450:	2000000c 	.word	0x2000000c
 8005454:	08007614 	.word	0x08007614
 8005458:	08007634 	.word	0x08007634
 800545c:	080075f4 	.word	0x080075f4

08005460 <quorem>:
 8005460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	6903      	ldr	r3, [r0, #16]
 8005466:	690c      	ldr	r4, [r1, #16]
 8005468:	42a3      	cmp	r3, r4
 800546a:	4607      	mov	r7, r0
 800546c:	f2c0 8081 	blt.w	8005572 <quorem+0x112>
 8005470:	3c01      	subs	r4, #1
 8005472:	f101 0814 	add.w	r8, r1, #20
 8005476:	f100 0514 	add.w	r5, r0, #20
 800547a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005488:	3301      	adds	r3, #1
 800548a:	429a      	cmp	r2, r3
 800548c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005490:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005494:	fbb2 f6f3 	udiv	r6, r2, r3
 8005498:	d331      	bcc.n	80054fe <quorem+0x9e>
 800549a:	f04f 0e00 	mov.w	lr, #0
 800549e:	4640      	mov	r0, r8
 80054a0:	46ac      	mov	ip, r5
 80054a2:	46f2      	mov	sl, lr
 80054a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80054a8:	b293      	uxth	r3, r2
 80054aa:	fb06 e303 	mla	r3, r6, r3, lr
 80054ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ebaa 0303 	sub.w	r3, sl, r3
 80054b8:	f8dc a000 	ldr.w	sl, [ip]
 80054bc:	0c12      	lsrs	r2, r2, #16
 80054be:	fa13 f38a 	uxtah	r3, r3, sl
 80054c2:	fb06 e202 	mla	r2, r6, r2, lr
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	9b00      	ldr	r3, [sp, #0]
 80054ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054ce:	b292      	uxth	r2, r2
 80054d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80054d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80054dc:	4581      	cmp	r9, r0
 80054de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054e2:	f84c 3b04 	str.w	r3, [ip], #4
 80054e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054ea:	d2db      	bcs.n	80054a4 <quorem+0x44>
 80054ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80054f0:	b92b      	cbnz	r3, 80054fe <quorem+0x9e>
 80054f2:	9b01      	ldr	r3, [sp, #4]
 80054f4:	3b04      	subs	r3, #4
 80054f6:	429d      	cmp	r5, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	d32e      	bcc.n	800555a <quorem+0xfa>
 80054fc:	613c      	str	r4, [r7, #16]
 80054fe:	4638      	mov	r0, r7
 8005500:	f001 fae4 	bl	8006acc <__mcmp>
 8005504:	2800      	cmp	r0, #0
 8005506:	db24      	blt.n	8005552 <quorem+0xf2>
 8005508:	3601      	adds	r6, #1
 800550a:	4628      	mov	r0, r5
 800550c:	f04f 0c00 	mov.w	ip, #0
 8005510:	f858 2b04 	ldr.w	r2, [r8], #4
 8005514:	f8d0 e000 	ldr.w	lr, [r0]
 8005518:	b293      	uxth	r3, r2
 800551a:	ebac 0303 	sub.w	r3, ip, r3
 800551e:	0c12      	lsrs	r2, r2, #16
 8005520:	fa13 f38e 	uxtah	r3, r3, lr
 8005524:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005528:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800552c:	b29b      	uxth	r3, r3
 800552e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005532:	45c1      	cmp	r9, r8
 8005534:	f840 3b04 	str.w	r3, [r0], #4
 8005538:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800553c:	d2e8      	bcs.n	8005510 <quorem+0xb0>
 800553e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005546:	b922      	cbnz	r2, 8005552 <quorem+0xf2>
 8005548:	3b04      	subs	r3, #4
 800554a:	429d      	cmp	r5, r3
 800554c:	461a      	mov	r2, r3
 800554e:	d30a      	bcc.n	8005566 <quorem+0x106>
 8005550:	613c      	str	r4, [r7, #16]
 8005552:	4630      	mov	r0, r6
 8005554:	b003      	add	sp, #12
 8005556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	3b04      	subs	r3, #4
 800555e:	2a00      	cmp	r2, #0
 8005560:	d1cc      	bne.n	80054fc <quorem+0x9c>
 8005562:	3c01      	subs	r4, #1
 8005564:	e7c7      	b.n	80054f6 <quorem+0x96>
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	3b04      	subs	r3, #4
 800556a:	2a00      	cmp	r2, #0
 800556c:	d1f0      	bne.n	8005550 <quorem+0xf0>
 800556e:	3c01      	subs	r4, #1
 8005570:	e7eb      	b.n	800554a <quorem+0xea>
 8005572:	2000      	movs	r0, #0
 8005574:	e7ee      	b.n	8005554 <quorem+0xf4>
	...

08005578 <_dtoa_r>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	ed2d 8b04 	vpush	{d8-d9}
 8005580:	ec57 6b10 	vmov	r6, r7, d0
 8005584:	b093      	sub	sp, #76	; 0x4c
 8005586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800558c:	9106      	str	r1, [sp, #24]
 800558e:	ee10 aa10 	vmov	sl, s0
 8005592:	4604      	mov	r4, r0
 8005594:	9209      	str	r2, [sp, #36]	; 0x24
 8005596:	930c      	str	r3, [sp, #48]	; 0x30
 8005598:	46bb      	mov	fp, r7
 800559a:	b975      	cbnz	r5, 80055ba <_dtoa_r+0x42>
 800559c:	2010      	movs	r0, #16
 800559e:	f000 fffd 	bl	800659c <malloc>
 80055a2:	4602      	mov	r2, r0
 80055a4:	6260      	str	r0, [r4, #36]	; 0x24
 80055a6:	b920      	cbnz	r0, 80055b2 <_dtoa_r+0x3a>
 80055a8:	4ba7      	ldr	r3, [pc, #668]	; (8005848 <_dtoa_r+0x2d0>)
 80055aa:	21ea      	movs	r1, #234	; 0xea
 80055ac:	48a7      	ldr	r0, [pc, #668]	; (800584c <_dtoa_r+0x2d4>)
 80055ae:	f001 fe45 	bl	800723c <__assert_func>
 80055b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055b6:	6005      	str	r5, [r0, #0]
 80055b8:	60c5      	str	r5, [r0, #12]
 80055ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	b151      	cbz	r1, 80055d6 <_dtoa_r+0x5e>
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	604a      	str	r2, [r1, #4]
 80055c4:	2301      	movs	r3, #1
 80055c6:	4093      	lsls	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
 80055ca:	4620      	mov	r0, r4
 80055cc:	f001 f83c 	bl	8006648 <_Bfree>
 80055d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	1e3b      	subs	r3, r7, #0
 80055d8:	bfaa      	itet	ge
 80055da:	2300      	movge	r3, #0
 80055dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80055e0:	f8c8 3000 	strge.w	r3, [r8]
 80055e4:	4b9a      	ldr	r3, [pc, #616]	; (8005850 <_dtoa_r+0x2d8>)
 80055e6:	bfbc      	itt	lt
 80055e8:	2201      	movlt	r2, #1
 80055ea:	f8c8 2000 	strlt.w	r2, [r8]
 80055ee:	ea33 030b 	bics.w	r3, r3, fp
 80055f2:	d11b      	bne.n	800562c <_dtoa_r+0xb4>
 80055f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005600:	4333      	orrs	r3, r6
 8005602:	f000 8592 	beq.w	800612a <_dtoa_r+0xbb2>
 8005606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005608:	b963      	cbnz	r3, 8005624 <_dtoa_r+0xac>
 800560a:	4b92      	ldr	r3, [pc, #584]	; (8005854 <_dtoa_r+0x2dc>)
 800560c:	e022      	b.n	8005654 <_dtoa_r+0xdc>
 800560e:	4b92      	ldr	r3, [pc, #584]	; (8005858 <_dtoa_r+0x2e0>)
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	3308      	adds	r3, #8
 8005614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	9801      	ldr	r0, [sp, #4]
 800561a:	b013      	add	sp, #76	; 0x4c
 800561c:	ecbd 8b04 	vpop	{d8-d9}
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	4b8b      	ldr	r3, [pc, #556]	; (8005854 <_dtoa_r+0x2dc>)
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	3303      	adds	r3, #3
 800562a:	e7f3      	b.n	8005614 <_dtoa_r+0x9c>
 800562c:	2200      	movs	r2, #0
 800562e:	2300      	movs	r3, #0
 8005630:	4650      	mov	r0, sl
 8005632:	4659      	mov	r1, fp
 8005634:	f7fb fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 8005638:	ec4b ab19 	vmov	d9, sl, fp
 800563c:	4680      	mov	r8, r0
 800563e:	b158      	cbz	r0, 8005658 <_dtoa_r+0xe0>
 8005640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005642:	2301      	movs	r3, #1
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 856b 	beq.w	8006124 <_dtoa_r+0xbac>
 800564e:	4883      	ldr	r0, [pc, #524]	; (800585c <_dtoa_r+0x2e4>)
 8005650:	6018      	str	r0, [r3, #0]
 8005652:	1e43      	subs	r3, r0, #1
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	e7df      	b.n	8005618 <_dtoa_r+0xa0>
 8005658:	ec4b ab10 	vmov	d0, sl, fp
 800565c:	aa10      	add	r2, sp, #64	; 0x40
 800565e:	a911      	add	r1, sp, #68	; 0x44
 8005660:	4620      	mov	r0, r4
 8005662:	f001 fad9 	bl	8006c18 <__d2b>
 8005666:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800566a:	ee08 0a10 	vmov	s16, r0
 800566e:	2d00      	cmp	r5, #0
 8005670:	f000 8084 	beq.w	800577c <_dtoa_r+0x204>
 8005674:	ee19 3a90 	vmov	r3, s19
 8005678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800567c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005680:	4656      	mov	r6, sl
 8005682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800568a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800568e:	4b74      	ldr	r3, [pc, #464]	; (8005860 <_dtoa_r+0x2e8>)
 8005690:	2200      	movs	r2, #0
 8005692:	4630      	mov	r0, r6
 8005694:	4639      	mov	r1, r7
 8005696:	f7fa fdff 	bl	8000298 <__aeabi_dsub>
 800569a:	a365      	add	r3, pc, #404	; (adr r3, 8005830 <_dtoa_r+0x2b8>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa ffb2 	bl	8000608 <__aeabi_dmul>
 80056a4:	a364      	add	r3, pc, #400	; (adr r3, 8005838 <_dtoa_r+0x2c0>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa fdf7 	bl	800029c <__adddf3>
 80056ae:	4606      	mov	r6, r0
 80056b0:	4628      	mov	r0, r5
 80056b2:	460f      	mov	r7, r1
 80056b4:	f7fa ff3e 	bl	8000534 <__aeabi_i2d>
 80056b8:	a361      	add	r3, pc, #388	; (adr r3, 8005840 <_dtoa_r+0x2c8>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa ffa3 	bl	8000608 <__aeabi_dmul>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4630      	mov	r0, r6
 80056c8:	4639      	mov	r1, r7
 80056ca:	f7fa fde7 	bl	800029c <__adddf3>
 80056ce:	4606      	mov	r6, r0
 80056d0:	460f      	mov	r7, r1
 80056d2:	f7fb fa49 	bl	8000b68 <__aeabi_d2iz>
 80056d6:	2200      	movs	r2, #0
 80056d8:	9000      	str	r0, [sp, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	4630      	mov	r0, r6
 80056de:	4639      	mov	r1, r7
 80056e0:	f7fb fa04 	bl	8000aec <__aeabi_dcmplt>
 80056e4:	b150      	cbz	r0, 80056fc <_dtoa_r+0x184>
 80056e6:	9800      	ldr	r0, [sp, #0]
 80056e8:	f7fa ff24 	bl	8000534 <__aeabi_i2d>
 80056ec:	4632      	mov	r2, r6
 80056ee:	463b      	mov	r3, r7
 80056f0:	f7fb f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80056f4:	b910      	cbnz	r0, 80056fc <_dtoa_r+0x184>
 80056f6:	9b00      	ldr	r3, [sp, #0]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	9b00      	ldr	r3, [sp, #0]
 80056fe:	2b16      	cmp	r3, #22
 8005700:	d85a      	bhi.n	80057b8 <_dtoa_r+0x240>
 8005702:	9a00      	ldr	r2, [sp, #0]
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <_dtoa_r+0x2ec>)
 8005706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	ec51 0b19 	vmov	r0, r1, d9
 8005712:	f7fb f9eb 	bl	8000aec <__aeabi_dcmplt>
 8005716:	2800      	cmp	r0, #0
 8005718:	d050      	beq.n	80057bc <_dtoa_r+0x244>
 800571a:	9b00      	ldr	r3, [sp, #0]
 800571c:	3b01      	subs	r3, #1
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2300      	movs	r3, #0
 8005722:	930b      	str	r3, [sp, #44]	; 0x2c
 8005724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005726:	1b5d      	subs	r5, r3, r5
 8005728:	1e6b      	subs	r3, r5, #1
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	bf45      	ittet	mi
 800572e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005732:	9304      	strmi	r3, [sp, #16]
 8005734:	2300      	movpl	r3, #0
 8005736:	2300      	movmi	r3, #0
 8005738:	bf4c      	ite	mi
 800573a:	9305      	strmi	r3, [sp, #20]
 800573c:	9304      	strpl	r3, [sp, #16]
 800573e:	9b00      	ldr	r3, [sp, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	db3d      	blt.n	80057c0 <_dtoa_r+0x248>
 8005744:	9b05      	ldr	r3, [sp, #20]
 8005746:	9a00      	ldr	r2, [sp, #0]
 8005748:	920a      	str	r2, [sp, #40]	; 0x28
 800574a:	4413      	add	r3, r2
 800574c:	9305      	str	r3, [sp, #20]
 800574e:	2300      	movs	r3, #0
 8005750:	9307      	str	r3, [sp, #28]
 8005752:	9b06      	ldr	r3, [sp, #24]
 8005754:	2b09      	cmp	r3, #9
 8005756:	f200 8089 	bhi.w	800586c <_dtoa_r+0x2f4>
 800575a:	2b05      	cmp	r3, #5
 800575c:	bfc4      	itt	gt
 800575e:	3b04      	subgt	r3, #4
 8005760:	9306      	strgt	r3, [sp, #24]
 8005762:	9b06      	ldr	r3, [sp, #24]
 8005764:	f1a3 0302 	sub.w	r3, r3, #2
 8005768:	bfcc      	ite	gt
 800576a:	2500      	movgt	r5, #0
 800576c:	2501      	movle	r5, #1
 800576e:	2b03      	cmp	r3, #3
 8005770:	f200 8087 	bhi.w	8005882 <_dtoa_r+0x30a>
 8005774:	e8df f003 	tbb	[pc, r3]
 8005778:	59383a2d 	.word	0x59383a2d
 800577c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005780:	441d      	add	r5, r3
 8005782:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005786:	2b20      	cmp	r3, #32
 8005788:	bfc1      	itttt	gt
 800578a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800578e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005792:	fa0b f303 	lslgt.w	r3, fp, r3
 8005796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800579a:	bfda      	itte	le
 800579c:	f1c3 0320 	rsble	r3, r3, #32
 80057a0:	fa06 f003 	lslle.w	r0, r6, r3
 80057a4:	4318      	orrgt	r0, r3
 80057a6:	f7fa feb5 	bl	8000514 <__aeabi_ui2d>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4606      	mov	r6, r0
 80057ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80057b2:	3d01      	subs	r5, #1
 80057b4:	930e      	str	r3, [sp, #56]	; 0x38
 80057b6:	e76a      	b.n	800568e <_dtoa_r+0x116>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e7b2      	b.n	8005722 <_dtoa_r+0x1aa>
 80057bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80057be:	e7b1      	b.n	8005724 <_dtoa_r+0x1ac>
 80057c0:	9b04      	ldr	r3, [sp, #16]
 80057c2:	9a00      	ldr	r2, [sp, #0]
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	4253      	negs	r3, r2
 80057ca:	9307      	str	r3, [sp, #28]
 80057cc:	2300      	movs	r3, #0
 80057ce:	930a      	str	r3, [sp, #40]	; 0x28
 80057d0:	e7bf      	b.n	8005752 <_dtoa_r+0x1da>
 80057d2:	2300      	movs	r3, #0
 80057d4:	9308      	str	r3, [sp, #32]
 80057d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dc55      	bgt.n	8005888 <_dtoa_r+0x310>
 80057dc:	2301      	movs	r3, #1
 80057de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057e2:	461a      	mov	r2, r3
 80057e4:	9209      	str	r2, [sp, #36]	; 0x24
 80057e6:	e00c      	b.n	8005802 <_dtoa_r+0x28a>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e7f3      	b.n	80057d4 <_dtoa_r+0x25c>
 80057ec:	2300      	movs	r3, #0
 80057ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057f0:	9308      	str	r3, [sp, #32]
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	4413      	add	r3, r2
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	3301      	adds	r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	9303      	str	r3, [sp, #12]
 80057fe:	bfb8      	it	lt
 8005800:	2301      	movlt	r3, #1
 8005802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005804:	2200      	movs	r2, #0
 8005806:	6042      	str	r2, [r0, #4]
 8005808:	2204      	movs	r2, #4
 800580a:	f102 0614 	add.w	r6, r2, #20
 800580e:	429e      	cmp	r6, r3
 8005810:	6841      	ldr	r1, [r0, #4]
 8005812:	d93d      	bls.n	8005890 <_dtoa_r+0x318>
 8005814:	4620      	mov	r0, r4
 8005816:	f000 fed7 	bl	80065c8 <_Balloc>
 800581a:	9001      	str	r0, [sp, #4]
 800581c:	2800      	cmp	r0, #0
 800581e:	d13b      	bne.n	8005898 <_dtoa_r+0x320>
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <_dtoa_r+0x2f0>)
 8005822:	4602      	mov	r2, r0
 8005824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005828:	e6c0      	b.n	80055ac <_dtoa_r+0x34>
 800582a:	2301      	movs	r3, #1
 800582c:	e7df      	b.n	80057ee <_dtoa_r+0x276>
 800582e:	bf00      	nop
 8005830:	636f4361 	.word	0x636f4361
 8005834:	3fd287a7 	.word	0x3fd287a7
 8005838:	8b60c8b3 	.word	0x8b60c8b3
 800583c:	3fc68a28 	.word	0x3fc68a28
 8005840:	509f79fb 	.word	0x509f79fb
 8005844:	3fd34413 	.word	0x3fd34413
 8005848:	08007571 	.word	0x08007571
 800584c:	08007588 	.word	0x08007588
 8005850:	7ff00000 	.word	0x7ff00000
 8005854:	0800756d 	.word	0x0800756d
 8005858:	08007564 	.word	0x08007564
 800585c:	08007541 	.word	0x08007541
 8005860:	3ff80000 	.word	0x3ff80000
 8005864:	080076d8 	.word	0x080076d8
 8005868:	080075e3 	.word	0x080075e3
 800586c:	2501      	movs	r5, #1
 800586e:	2300      	movs	r3, #0
 8005870:	9306      	str	r3, [sp, #24]
 8005872:	9508      	str	r5, [sp, #32]
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
 8005878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	2312      	movs	r3, #18
 8005880:	e7b0      	b.n	80057e4 <_dtoa_r+0x26c>
 8005882:	2301      	movs	r3, #1
 8005884:	9308      	str	r3, [sp, #32]
 8005886:	e7f5      	b.n	8005874 <_dtoa_r+0x2fc>
 8005888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800588e:	e7b8      	b.n	8005802 <_dtoa_r+0x28a>
 8005890:	3101      	adds	r1, #1
 8005892:	6041      	str	r1, [r0, #4]
 8005894:	0052      	lsls	r2, r2, #1
 8005896:	e7b8      	b.n	800580a <_dtoa_r+0x292>
 8005898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800589a:	9a01      	ldr	r2, [sp, #4]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	2b0e      	cmp	r3, #14
 80058a2:	f200 809d 	bhi.w	80059e0 <_dtoa_r+0x468>
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	f000 809a 	beq.w	80059e0 <_dtoa_r+0x468>
 80058ac:	9b00      	ldr	r3, [sp, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dd32      	ble.n	8005918 <_dtoa_r+0x3a0>
 80058b2:	4ab7      	ldr	r2, [pc, #732]	; (8005b90 <_dtoa_r+0x618>)
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058c0:	9b00      	ldr	r3, [sp, #0]
 80058c2:	05d8      	lsls	r0, r3, #23
 80058c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80058c8:	d516      	bpl.n	80058f8 <_dtoa_r+0x380>
 80058ca:	4bb2      	ldr	r3, [pc, #712]	; (8005b94 <_dtoa_r+0x61c>)
 80058cc:	ec51 0b19 	vmov	r0, r1, d9
 80058d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058d4:	f7fa ffc2 	bl	800085c <__aeabi_ddiv>
 80058d8:	f007 070f 	and.w	r7, r7, #15
 80058dc:	4682      	mov	sl, r0
 80058de:	468b      	mov	fp, r1
 80058e0:	2503      	movs	r5, #3
 80058e2:	4eac      	ldr	r6, [pc, #688]	; (8005b94 <_dtoa_r+0x61c>)
 80058e4:	b957      	cbnz	r7, 80058fc <_dtoa_r+0x384>
 80058e6:	4642      	mov	r2, r8
 80058e8:	464b      	mov	r3, r9
 80058ea:	4650      	mov	r0, sl
 80058ec:	4659      	mov	r1, fp
 80058ee:	f7fa ffb5 	bl	800085c <__aeabi_ddiv>
 80058f2:	4682      	mov	sl, r0
 80058f4:	468b      	mov	fp, r1
 80058f6:	e028      	b.n	800594a <_dtoa_r+0x3d2>
 80058f8:	2502      	movs	r5, #2
 80058fa:	e7f2      	b.n	80058e2 <_dtoa_r+0x36a>
 80058fc:	07f9      	lsls	r1, r7, #31
 80058fe:	d508      	bpl.n	8005912 <_dtoa_r+0x39a>
 8005900:	4640      	mov	r0, r8
 8005902:	4649      	mov	r1, r9
 8005904:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005908:	f7fa fe7e 	bl	8000608 <__aeabi_dmul>
 800590c:	3501      	adds	r5, #1
 800590e:	4680      	mov	r8, r0
 8005910:	4689      	mov	r9, r1
 8005912:	107f      	asrs	r7, r7, #1
 8005914:	3608      	adds	r6, #8
 8005916:	e7e5      	b.n	80058e4 <_dtoa_r+0x36c>
 8005918:	f000 809b 	beq.w	8005a52 <_dtoa_r+0x4da>
 800591c:	9b00      	ldr	r3, [sp, #0]
 800591e:	4f9d      	ldr	r7, [pc, #628]	; (8005b94 <_dtoa_r+0x61c>)
 8005920:	425e      	negs	r6, r3
 8005922:	4b9b      	ldr	r3, [pc, #620]	; (8005b90 <_dtoa_r+0x618>)
 8005924:	f006 020f 	and.w	r2, r6, #15
 8005928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	ec51 0b19 	vmov	r0, r1, d9
 8005934:	f7fa fe68 	bl	8000608 <__aeabi_dmul>
 8005938:	1136      	asrs	r6, r6, #4
 800593a:	4682      	mov	sl, r0
 800593c:	468b      	mov	fp, r1
 800593e:	2300      	movs	r3, #0
 8005940:	2502      	movs	r5, #2
 8005942:	2e00      	cmp	r6, #0
 8005944:	d17a      	bne.n	8005a3c <_dtoa_r+0x4c4>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1d3      	bne.n	80058f2 <_dtoa_r+0x37a>
 800594a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8082 	beq.w	8005a56 <_dtoa_r+0x4de>
 8005952:	4b91      	ldr	r3, [pc, #580]	; (8005b98 <_dtoa_r+0x620>)
 8005954:	2200      	movs	r2, #0
 8005956:	4650      	mov	r0, sl
 8005958:	4659      	mov	r1, fp
 800595a:	f7fb f8c7 	bl	8000aec <__aeabi_dcmplt>
 800595e:	2800      	cmp	r0, #0
 8005960:	d079      	beq.n	8005a56 <_dtoa_r+0x4de>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d076      	beq.n	8005a56 <_dtoa_r+0x4de>
 8005968:	9b02      	ldr	r3, [sp, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dd36      	ble.n	80059dc <_dtoa_r+0x464>
 800596e:	9b00      	ldr	r3, [sp, #0]
 8005970:	4650      	mov	r0, sl
 8005972:	4659      	mov	r1, fp
 8005974:	1e5f      	subs	r7, r3, #1
 8005976:	2200      	movs	r2, #0
 8005978:	4b88      	ldr	r3, [pc, #544]	; (8005b9c <_dtoa_r+0x624>)
 800597a:	f7fa fe45 	bl	8000608 <__aeabi_dmul>
 800597e:	9e02      	ldr	r6, [sp, #8]
 8005980:	4682      	mov	sl, r0
 8005982:	468b      	mov	fp, r1
 8005984:	3501      	adds	r5, #1
 8005986:	4628      	mov	r0, r5
 8005988:	f7fa fdd4 	bl	8000534 <__aeabi_i2d>
 800598c:	4652      	mov	r2, sl
 800598e:	465b      	mov	r3, fp
 8005990:	f7fa fe3a 	bl	8000608 <__aeabi_dmul>
 8005994:	4b82      	ldr	r3, [pc, #520]	; (8005ba0 <_dtoa_r+0x628>)
 8005996:	2200      	movs	r2, #0
 8005998:	f7fa fc80 	bl	800029c <__adddf3>
 800599c:	46d0      	mov	r8, sl
 800599e:	46d9      	mov	r9, fp
 80059a0:	4682      	mov	sl, r0
 80059a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	d158      	bne.n	8005a5c <_dtoa_r+0x4e4>
 80059aa:	4b7e      	ldr	r3, [pc, #504]	; (8005ba4 <_dtoa_r+0x62c>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	4640      	mov	r0, r8
 80059b0:	4649      	mov	r1, r9
 80059b2:	f7fa fc71 	bl	8000298 <__aeabi_dsub>
 80059b6:	4652      	mov	r2, sl
 80059b8:	465b      	mov	r3, fp
 80059ba:	4680      	mov	r8, r0
 80059bc:	4689      	mov	r9, r1
 80059be:	f7fb f8b3 	bl	8000b28 <__aeabi_dcmpgt>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f040 8295 	bne.w	8005ef2 <_dtoa_r+0x97a>
 80059c8:	4652      	mov	r2, sl
 80059ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80059ce:	4640      	mov	r0, r8
 80059d0:	4649      	mov	r1, r9
 80059d2:	f7fb f88b 	bl	8000aec <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	f040 8289 	bne.w	8005eee <_dtoa_r+0x976>
 80059dc:	ec5b ab19 	vmov	sl, fp, d9
 80059e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f2c0 8148 	blt.w	8005c78 <_dtoa_r+0x700>
 80059e8:	9a00      	ldr	r2, [sp, #0]
 80059ea:	2a0e      	cmp	r2, #14
 80059ec:	f300 8144 	bgt.w	8005c78 <_dtoa_r+0x700>
 80059f0:	4b67      	ldr	r3, [pc, #412]	; (8005b90 <_dtoa_r+0x618>)
 80059f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f280 80d5 	bge.w	8005bac <_dtoa_r+0x634>
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f300 80d1 	bgt.w	8005bac <_dtoa_r+0x634>
 8005a0a:	f040 826f 	bne.w	8005eec <_dtoa_r+0x974>
 8005a0e:	4b65      	ldr	r3, [pc, #404]	; (8005ba4 <_dtoa_r+0x62c>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	4640      	mov	r0, r8
 8005a14:	4649      	mov	r1, r9
 8005a16:	f7fa fdf7 	bl	8000608 <__aeabi_dmul>
 8005a1a:	4652      	mov	r2, sl
 8005a1c:	465b      	mov	r3, fp
 8005a1e:	f7fb f879 	bl	8000b14 <__aeabi_dcmpge>
 8005a22:	9e03      	ldr	r6, [sp, #12]
 8005a24:	4637      	mov	r7, r6
 8005a26:	2800      	cmp	r0, #0
 8005a28:	f040 8245 	bne.w	8005eb6 <_dtoa_r+0x93e>
 8005a2c:	9d01      	ldr	r5, [sp, #4]
 8005a2e:	2331      	movs	r3, #49	; 0x31
 8005a30:	f805 3b01 	strb.w	r3, [r5], #1
 8005a34:	9b00      	ldr	r3, [sp, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	e240      	b.n	8005ebe <_dtoa_r+0x946>
 8005a3c:	07f2      	lsls	r2, r6, #31
 8005a3e:	d505      	bpl.n	8005a4c <_dtoa_r+0x4d4>
 8005a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a44:	f7fa fde0 	bl	8000608 <__aeabi_dmul>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	1076      	asrs	r6, r6, #1
 8005a4e:	3708      	adds	r7, #8
 8005a50:	e777      	b.n	8005942 <_dtoa_r+0x3ca>
 8005a52:	2502      	movs	r5, #2
 8005a54:	e779      	b.n	800594a <_dtoa_r+0x3d2>
 8005a56:	9f00      	ldr	r7, [sp, #0]
 8005a58:	9e03      	ldr	r6, [sp, #12]
 8005a5a:	e794      	b.n	8005986 <_dtoa_r+0x40e>
 8005a5c:	9901      	ldr	r1, [sp, #4]
 8005a5e:	4b4c      	ldr	r3, [pc, #304]	; (8005b90 <_dtoa_r+0x618>)
 8005a60:	4431      	add	r1, r6
 8005a62:	910d      	str	r1, [sp, #52]	; 0x34
 8005a64:	9908      	ldr	r1, [sp, #32]
 8005a66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a6e:	2900      	cmp	r1, #0
 8005a70:	d043      	beq.n	8005afa <_dtoa_r+0x582>
 8005a72:	494d      	ldr	r1, [pc, #308]	; (8005ba8 <_dtoa_r+0x630>)
 8005a74:	2000      	movs	r0, #0
 8005a76:	f7fa fef1 	bl	800085c <__aeabi_ddiv>
 8005a7a:	4652      	mov	r2, sl
 8005a7c:	465b      	mov	r3, fp
 8005a7e:	f7fa fc0b 	bl	8000298 <__aeabi_dsub>
 8005a82:	9d01      	ldr	r5, [sp, #4]
 8005a84:	4682      	mov	sl, r0
 8005a86:	468b      	mov	fp, r1
 8005a88:	4649      	mov	r1, r9
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f7fb f86c 	bl	8000b68 <__aeabi_d2iz>
 8005a90:	4606      	mov	r6, r0
 8005a92:	f7fa fd4f 	bl	8000534 <__aeabi_i2d>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fa fbfb 	bl	8000298 <__aeabi_dsub>
 8005aa2:	3630      	adds	r6, #48	; 0x30
 8005aa4:	f805 6b01 	strb.w	r6, [r5], #1
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	465b      	mov	r3, fp
 8005aac:	4680      	mov	r8, r0
 8005aae:	4689      	mov	r9, r1
 8005ab0:	f7fb f81c 	bl	8000aec <__aeabi_dcmplt>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d163      	bne.n	8005b80 <_dtoa_r+0x608>
 8005ab8:	4642      	mov	r2, r8
 8005aba:	464b      	mov	r3, r9
 8005abc:	4936      	ldr	r1, [pc, #216]	; (8005b98 <_dtoa_r+0x620>)
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f7fa fbea 	bl	8000298 <__aeabi_dsub>
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	465b      	mov	r3, fp
 8005ac8:	f7fb f810 	bl	8000aec <__aeabi_dcmplt>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f040 80b5 	bne.w	8005c3c <_dtoa_r+0x6c4>
 8005ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad4:	429d      	cmp	r5, r3
 8005ad6:	d081      	beq.n	80059dc <_dtoa_r+0x464>
 8005ad8:	4b30      	ldr	r3, [pc, #192]	; (8005b9c <_dtoa_r+0x624>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	4650      	mov	r0, sl
 8005ade:	4659      	mov	r1, fp
 8005ae0:	f7fa fd92 	bl	8000608 <__aeabi_dmul>
 8005ae4:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <_dtoa_r+0x624>)
 8005ae6:	4682      	mov	sl, r0
 8005ae8:	468b      	mov	fp, r1
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	2200      	movs	r2, #0
 8005af0:	f7fa fd8a 	bl	8000608 <__aeabi_dmul>
 8005af4:	4680      	mov	r8, r0
 8005af6:	4689      	mov	r9, r1
 8005af8:	e7c6      	b.n	8005a88 <_dtoa_r+0x510>
 8005afa:	4650      	mov	r0, sl
 8005afc:	4659      	mov	r1, fp
 8005afe:	f7fa fd83 	bl	8000608 <__aeabi_dmul>
 8005b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b04:	9d01      	ldr	r5, [sp, #4]
 8005b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b08:	4682      	mov	sl, r0
 8005b0a:	468b      	mov	fp, r1
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4640      	mov	r0, r8
 8005b10:	f7fb f82a 	bl	8000b68 <__aeabi_d2iz>
 8005b14:	4606      	mov	r6, r0
 8005b16:	f7fa fd0d 	bl	8000534 <__aeabi_i2d>
 8005b1a:	3630      	adds	r6, #48	; 0x30
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4640      	mov	r0, r8
 8005b22:	4649      	mov	r1, r9
 8005b24:	f7fa fbb8 	bl	8000298 <__aeabi_dsub>
 8005b28:	f805 6b01 	strb.w	r6, [r5], #1
 8005b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b2e:	429d      	cmp	r5, r3
 8005b30:	4680      	mov	r8, r0
 8005b32:	4689      	mov	r9, r1
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	d124      	bne.n	8005b84 <_dtoa_r+0x60c>
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <_dtoa_r+0x630>)
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	4659      	mov	r1, fp
 8005b40:	f7fa fbac 	bl	800029c <__adddf3>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4640      	mov	r0, r8
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	f7fa ffec 	bl	8000b28 <__aeabi_dcmpgt>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d173      	bne.n	8005c3c <_dtoa_r+0x6c4>
 8005b54:	4652      	mov	r2, sl
 8005b56:	465b      	mov	r3, fp
 8005b58:	4913      	ldr	r1, [pc, #76]	; (8005ba8 <_dtoa_r+0x630>)
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	f7fa fb9c 	bl	8000298 <__aeabi_dsub>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4640      	mov	r0, r8
 8005b66:	4649      	mov	r1, r9
 8005b68:	f7fa ffc0 	bl	8000aec <__aeabi_dcmplt>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	f43f af35 	beq.w	80059dc <_dtoa_r+0x464>
 8005b72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b74:	1e6b      	subs	r3, r5, #1
 8005b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b7c:	2b30      	cmp	r3, #48	; 0x30
 8005b7e:	d0f8      	beq.n	8005b72 <_dtoa_r+0x5fa>
 8005b80:	9700      	str	r7, [sp, #0]
 8005b82:	e049      	b.n	8005c18 <_dtoa_r+0x6a0>
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <_dtoa_r+0x624>)
 8005b86:	f7fa fd3f 	bl	8000608 <__aeabi_dmul>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4689      	mov	r9, r1
 8005b8e:	e7bd      	b.n	8005b0c <_dtoa_r+0x594>
 8005b90:	080076d8 	.word	0x080076d8
 8005b94:	080076b0 	.word	0x080076b0
 8005b98:	3ff00000 	.word	0x3ff00000
 8005b9c:	40240000 	.word	0x40240000
 8005ba0:	401c0000 	.word	0x401c0000
 8005ba4:	40140000 	.word	0x40140000
 8005ba8:	3fe00000 	.word	0x3fe00000
 8005bac:	9d01      	ldr	r5, [sp, #4]
 8005bae:	4656      	mov	r6, sl
 8005bb0:	465f      	mov	r7, fp
 8005bb2:	4642      	mov	r2, r8
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	4639      	mov	r1, r7
 8005bba:	f7fa fe4f 	bl	800085c <__aeabi_ddiv>
 8005bbe:	f7fa ffd3 	bl	8000b68 <__aeabi_d2iz>
 8005bc2:	4682      	mov	sl, r0
 8005bc4:	f7fa fcb6 	bl	8000534 <__aeabi_i2d>
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	f7fa fd1c 	bl	8000608 <__aeabi_dmul>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005bdc:	f7fa fb5c 	bl	8000298 <__aeabi_dsub>
 8005be0:	f805 6b01 	strb.w	r6, [r5], #1
 8005be4:	9e01      	ldr	r6, [sp, #4]
 8005be6:	9f03      	ldr	r7, [sp, #12]
 8005be8:	1bae      	subs	r6, r5, r6
 8005bea:	42b7      	cmp	r7, r6
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	d135      	bne.n	8005c5e <_dtoa_r+0x6e6>
 8005bf2:	f7fa fb53 	bl	800029c <__adddf3>
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	f7fa ff93 	bl	8000b28 <__aeabi_dcmpgt>
 8005c02:	b9d0      	cbnz	r0, 8005c3a <_dtoa_r+0x6c2>
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c10:	b110      	cbz	r0, 8005c18 <_dtoa_r+0x6a0>
 8005c12:	f01a 0f01 	tst.w	sl, #1
 8005c16:	d110      	bne.n	8005c3a <_dtoa_r+0x6c2>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	ee18 1a10 	vmov	r1, s16
 8005c1e:	f000 fd13 	bl	8006648 <_Bfree>
 8005c22:	2300      	movs	r3, #0
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	702b      	strb	r3, [r5, #0]
 8005c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	6018      	str	r0, [r3, #0]
 8005c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f43f acf1 	beq.w	8005618 <_dtoa_r+0xa0>
 8005c36:	601d      	str	r5, [r3, #0]
 8005c38:	e4ee      	b.n	8005618 <_dtoa_r+0xa0>
 8005c3a:	9f00      	ldr	r7, [sp, #0]
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	461d      	mov	r5, r3
 8005c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c44:	2a39      	cmp	r2, #57	; 0x39
 8005c46:	d106      	bne.n	8005c56 <_dtoa_r+0x6de>
 8005c48:	9a01      	ldr	r2, [sp, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d1f7      	bne.n	8005c3e <_dtoa_r+0x6c6>
 8005c4e:	9901      	ldr	r1, [sp, #4]
 8005c50:	2230      	movs	r2, #48	; 0x30
 8005c52:	3701      	adds	r7, #1
 8005c54:	700a      	strb	r2, [r1, #0]
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	3201      	adds	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e790      	b.n	8005b80 <_dtoa_r+0x608>
 8005c5e:	4ba6      	ldr	r3, [pc, #664]	; (8005ef8 <_dtoa_r+0x980>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	f7fa fcd1 	bl	8000608 <__aeabi_dmul>
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	460f      	mov	r7, r1
 8005c6e:	f7fa ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d09d      	beq.n	8005bb2 <_dtoa_r+0x63a>
 8005c76:	e7cf      	b.n	8005c18 <_dtoa_r+0x6a0>
 8005c78:	9a08      	ldr	r2, [sp, #32]
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	f000 80d7 	beq.w	8005e2e <_dtoa_r+0x8b6>
 8005c80:	9a06      	ldr	r2, [sp, #24]
 8005c82:	2a01      	cmp	r2, #1
 8005c84:	f300 80ba 	bgt.w	8005dfc <_dtoa_r+0x884>
 8005c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	f000 80b2 	beq.w	8005df4 <_dtoa_r+0x87c>
 8005c90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c94:	9e07      	ldr	r6, [sp, #28]
 8005c96:	9d04      	ldr	r5, [sp, #16]
 8005c98:	9a04      	ldr	r2, [sp, #16]
 8005c9a:	441a      	add	r2, r3
 8005c9c:	9204      	str	r2, [sp, #16]
 8005c9e:	9a05      	ldr	r2, [sp, #20]
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	441a      	add	r2, r3
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	9205      	str	r2, [sp, #20]
 8005ca8:	f000 fd86 	bl	80067b8 <__i2b>
 8005cac:	4607      	mov	r7, r0
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	dd0c      	ble.n	8005ccc <_dtoa_r+0x754>
 8005cb2:	9b05      	ldr	r3, [sp, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dd09      	ble.n	8005ccc <_dtoa_r+0x754>
 8005cb8:	42ab      	cmp	r3, r5
 8005cba:	9a04      	ldr	r2, [sp, #16]
 8005cbc:	bfa8      	it	ge
 8005cbe:	462b      	movge	r3, r5
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	9204      	str	r2, [sp, #16]
 8005cc4:	9a05      	ldr	r2, [sp, #20]
 8005cc6:	1aed      	subs	r5, r5, r3
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	9b07      	ldr	r3, [sp, #28]
 8005cce:	b31b      	cbz	r3, 8005d18 <_dtoa_r+0x7a0>
 8005cd0:	9b08      	ldr	r3, [sp, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80af 	beq.w	8005e36 <_dtoa_r+0x8be>
 8005cd8:	2e00      	cmp	r6, #0
 8005cda:	dd13      	ble.n	8005d04 <_dtoa_r+0x78c>
 8005cdc:	4639      	mov	r1, r7
 8005cde:	4632      	mov	r2, r6
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 fe29 	bl	8006938 <__pow5mult>
 8005ce6:	ee18 2a10 	vmov	r2, s16
 8005cea:	4601      	mov	r1, r0
 8005cec:	4607      	mov	r7, r0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fd78 	bl	80067e4 <__multiply>
 8005cf4:	ee18 1a10 	vmov	r1, s16
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 fca4 	bl	8006648 <_Bfree>
 8005d00:	ee08 8a10 	vmov	s16, r8
 8005d04:	9b07      	ldr	r3, [sp, #28]
 8005d06:	1b9a      	subs	r2, r3, r6
 8005d08:	d006      	beq.n	8005d18 <_dtoa_r+0x7a0>
 8005d0a:	ee18 1a10 	vmov	r1, s16
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 fe12 	bl	8006938 <__pow5mult>
 8005d14:	ee08 0a10 	vmov	s16, r0
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 fd4c 	bl	80067b8 <__i2b>
 8005d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	4606      	mov	r6, r0
 8005d26:	f340 8088 	ble.w	8005e3a <_dtoa_r+0x8c2>
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 fe02 	bl	8006938 <__pow5mult>
 8005d34:	9b06      	ldr	r3, [sp, #24]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	4606      	mov	r6, r0
 8005d3a:	f340 8081 	ble.w	8005e40 <_dtoa_r+0x8c8>
 8005d3e:	f04f 0800 	mov.w	r8, #0
 8005d42:	6933      	ldr	r3, [r6, #16]
 8005d44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d48:	6918      	ldr	r0, [r3, #16]
 8005d4a:	f000 fce5 	bl	8006718 <__hi0bits>
 8005d4e:	f1c0 0020 	rsb	r0, r0, #32
 8005d52:	9b05      	ldr	r3, [sp, #20]
 8005d54:	4418      	add	r0, r3
 8005d56:	f010 001f 	ands.w	r0, r0, #31
 8005d5a:	f000 8092 	beq.w	8005e82 <_dtoa_r+0x90a>
 8005d5e:	f1c0 0320 	rsb	r3, r0, #32
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	f340 808a 	ble.w	8005e7c <_dtoa_r+0x904>
 8005d68:	f1c0 001c 	rsb	r0, r0, #28
 8005d6c:	9b04      	ldr	r3, [sp, #16]
 8005d6e:	4403      	add	r3, r0
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	9b05      	ldr	r3, [sp, #20]
 8005d74:	4403      	add	r3, r0
 8005d76:	4405      	add	r5, r0
 8005d78:	9305      	str	r3, [sp, #20]
 8005d7a:	9b04      	ldr	r3, [sp, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dd07      	ble.n	8005d90 <_dtoa_r+0x818>
 8005d80:	ee18 1a10 	vmov	r1, s16
 8005d84:	461a      	mov	r2, r3
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 fe30 	bl	80069ec <__lshift>
 8005d8c:	ee08 0a10 	vmov	s16, r0
 8005d90:	9b05      	ldr	r3, [sp, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dd05      	ble.n	8005da2 <_dtoa_r+0x82a>
 8005d96:	4631      	mov	r1, r6
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fe26 	bl	80069ec <__lshift>
 8005da0:	4606      	mov	r6, r0
 8005da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d06e      	beq.n	8005e86 <_dtoa_r+0x90e>
 8005da8:	ee18 0a10 	vmov	r0, s16
 8005dac:	4631      	mov	r1, r6
 8005dae:	f000 fe8d 	bl	8006acc <__mcmp>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	da67      	bge.n	8005e86 <_dtoa_r+0x90e>
 8005db6:	9b00      	ldr	r3, [sp, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	ee18 1a10 	vmov	r1, s16
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	220a      	movs	r2, #10
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 fc61 	bl	800668c <__multadd>
 8005dca:	9b08      	ldr	r3, [sp, #32]
 8005dcc:	ee08 0a10 	vmov	s16, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 81b1 	beq.w	8006138 <_dtoa_r+0xbc0>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4639      	mov	r1, r7
 8005dda:	220a      	movs	r2, #10
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fc55 	bl	800668c <__multadd>
 8005de2:	9b02      	ldr	r3, [sp, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	4607      	mov	r7, r0
 8005de8:	f300 808e 	bgt.w	8005f08 <_dtoa_r+0x990>
 8005dec:	9b06      	ldr	r3, [sp, #24]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	dc51      	bgt.n	8005e96 <_dtoa_r+0x91e>
 8005df2:	e089      	b.n	8005f08 <_dtoa_r+0x990>
 8005df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dfa:	e74b      	b.n	8005c94 <_dtoa_r+0x71c>
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	1e5e      	subs	r6, r3, #1
 8005e00:	9b07      	ldr	r3, [sp, #28]
 8005e02:	42b3      	cmp	r3, r6
 8005e04:	bfbf      	itttt	lt
 8005e06:	9b07      	ldrlt	r3, [sp, #28]
 8005e08:	9607      	strlt	r6, [sp, #28]
 8005e0a:	1af2      	sublt	r2, r6, r3
 8005e0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e0e:	bfb6      	itet	lt
 8005e10:	189b      	addlt	r3, r3, r2
 8005e12:	1b9e      	subge	r6, r3, r6
 8005e14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	bfb8      	it	lt
 8005e1a:	2600      	movlt	r6, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bfb7      	itett	lt
 8005e20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005e24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005e28:	1a9d      	sublt	r5, r3, r2
 8005e2a:	2300      	movlt	r3, #0
 8005e2c:	e734      	b.n	8005c98 <_dtoa_r+0x720>
 8005e2e:	9e07      	ldr	r6, [sp, #28]
 8005e30:	9d04      	ldr	r5, [sp, #16]
 8005e32:	9f08      	ldr	r7, [sp, #32]
 8005e34:	e73b      	b.n	8005cae <_dtoa_r+0x736>
 8005e36:	9a07      	ldr	r2, [sp, #28]
 8005e38:	e767      	b.n	8005d0a <_dtoa_r+0x792>
 8005e3a:	9b06      	ldr	r3, [sp, #24]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	dc18      	bgt.n	8005e72 <_dtoa_r+0x8fa>
 8005e40:	f1ba 0f00 	cmp.w	sl, #0
 8005e44:	d115      	bne.n	8005e72 <_dtoa_r+0x8fa>
 8005e46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e4a:	b993      	cbnz	r3, 8005e72 <_dtoa_r+0x8fa>
 8005e4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e50:	0d1b      	lsrs	r3, r3, #20
 8005e52:	051b      	lsls	r3, r3, #20
 8005e54:	b183      	cbz	r3, 8005e78 <_dtoa_r+0x900>
 8005e56:	9b04      	ldr	r3, [sp, #16]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	9b05      	ldr	r3, [sp, #20]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	f04f 0801 	mov.w	r8, #1
 8005e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f47f af6a 	bne.w	8005d42 <_dtoa_r+0x7ca>
 8005e6e:	2001      	movs	r0, #1
 8005e70:	e76f      	b.n	8005d52 <_dtoa_r+0x7da>
 8005e72:	f04f 0800 	mov.w	r8, #0
 8005e76:	e7f6      	b.n	8005e66 <_dtoa_r+0x8ee>
 8005e78:	4698      	mov	r8, r3
 8005e7a:	e7f4      	b.n	8005e66 <_dtoa_r+0x8ee>
 8005e7c:	f43f af7d 	beq.w	8005d7a <_dtoa_r+0x802>
 8005e80:	4618      	mov	r0, r3
 8005e82:	301c      	adds	r0, #28
 8005e84:	e772      	b.n	8005d6c <_dtoa_r+0x7f4>
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dc37      	bgt.n	8005efc <_dtoa_r+0x984>
 8005e8c:	9b06      	ldr	r3, [sp, #24]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	dd34      	ble.n	8005efc <_dtoa_r+0x984>
 8005e92:	9b03      	ldr	r3, [sp, #12]
 8005e94:	9302      	str	r3, [sp, #8]
 8005e96:	9b02      	ldr	r3, [sp, #8]
 8005e98:	b96b      	cbnz	r3, 8005eb6 <_dtoa_r+0x93e>
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	2205      	movs	r2, #5
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fbf4 	bl	800668c <__multadd>
 8005ea4:	4601      	mov	r1, r0
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	ee18 0a10 	vmov	r0, s16
 8005eac:	f000 fe0e 	bl	8006acc <__mcmp>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f73f adbb 	bgt.w	8005a2c <_dtoa_r+0x4b4>
 8005eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb8:	9d01      	ldr	r5, [sp, #4]
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	f04f 0800 	mov.w	r8, #0
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 fbbf 	bl	8006648 <_Bfree>
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	f43f aea4 	beq.w	8005c18 <_dtoa_r+0x6a0>
 8005ed0:	f1b8 0f00 	cmp.w	r8, #0
 8005ed4:	d005      	beq.n	8005ee2 <_dtoa_r+0x96a>
 8005ed6:	45b8      	cmp	r8, r7
 8005ed8:	d003      	beq.n	8005ee2 <_dtoa_r+0x96a>
 8005eda:	4641      	mov	r1, r8
 8005edc:	4620      	mov	r0, r4
 8005ede:	f000 fbb3 	bl	8006648 <_Bfree>
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fbaf 	bl	8006648 <_Bfree>
 8005eea:	e695      	b.n	8005c18 <_dtoa_r+0x6a0>
 8005eec:	2600      	movs	r6, #0
 8005eee:	4637      	mov	r7, r6
 8005ef0:	e7e1      	b.n	8005eb6 <_dtoa_r+0x93e>
 8005ef2:	9700      	str	r7, [sp, #0]
 8005ef4:	4637      	mov	r7, r6
 8005ef6:	e599      	b.n	8005a2c <_dtoa_r+0x4b4>
 8005ef8:	40240000 	.word	0x40240000
 8005efc:	9b08      	ldr	r3, [sp, #32]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80ca 	beq.w	8006098 <_dtoa_r+0xb20>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	9302      	str	r3, [sp, #8]
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	dd05      	ble.n	8005f18 <_dtoa_r+0x9a0>
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	462a      	mov	r2, r5
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 fd6b 	bl	80069ec <__lshift>
 8005f16:	4607      	mov	r7, r0
 8005f18:	f1b8 0f00 	cmp.w	r8, #0
 8005f1c:	d05b      	beq.n	8005fd6 <_dtoa_r+0xa5e>
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fb51 	bl	80065c8 <_Balloc>
 8005f26:	4605      	mov	r5, r0
 8005f28:	b928      	cbnz	r0, 8005f36 <_dtoa_r+0x9be>
 8005f2a:	4b87      	ldr	r3, [pc, #540]	; (8006148 <_dtoa_r+0xbd0>)
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f32:	f7ff bb3b 	b.w	80055ac <_dtoa_r+0x34>
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	3202      	adds	r2, #2
 8005f3a:	0092      	lsls	r2, r2, #2
 8005f3c:	f107 010c 	add.w	r1, r7, #12
 8005f40:	300c      	adds	r0, #12
 8005f42:	f000 fb33 	bl	80065ac <memcpy>
 8005f46:	2201      	movs	r2, #1
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 fd4e 	bl	80069ec <__lshift>
 8005f50:	9b01      	ldr	r3, [sp, #4]
 8005f52:	f103 0901 	add.w	r9, r3, #1
 8005f56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	9305      	str	r3, [sp, #20]
 8005f5e:	f00a 0301 	and.w	r3, sl, #1
 8005f62:	46b8      	mov	r8, r7
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	4607      	mov	r7, r0
 8005f68:	4631      	mov	r1, r6
 8005f6a:	ee18 0a10 	vmov	r0, s16
 8005f6e:	f7ff fa77 	bl	8005460 <quorem>
 8005f72:	4641      	mov	r1, r8
 8005f74:	9002      	str	r0, [sp, #8]
 8005f76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005f7a:	ee18 0a10 	vmov	r0, s16
 8005f7e:	f000 fda5 	bl	8006acc <__mcmp>
 8005f82:	463a      	mov	r2, r7
 8005f84:	9003      	str	r0, [sp, #12]
 8005f86:	4631      	mov	r1, r6
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fdbb 	bl	8006b04 <__mdiff>
 8005f8e:	68c2      	ldr	r2, [r0, #12]
 8005f90:	f109 3bff 	add.w	fp, r9, #4294967295
 8005f94:	4605      	mov	r5, r0
 8005f96:	bb02      	cbnz	r2, 8005fda <_dtoa_r+0xa62>
 8005f98:	4601      	mov	r1, r0
 8005f9a:	ee18 0a10 	vmov	r0, s16
 8005f9e:	f000 fd95 	bl	8006acc <__mcmp>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	9207      	str	r2, [sp, #28]
 8005faa:	f000 fb4d 	bl	8006648 <_Bfree>
 8005fae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005fb2:	ea43 0102 	orr.w	r1, r3, r2
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	464d      	mov	r5, r9
 8005fbc:	d10f      	bne.n	8005fde <_dtoa_r+0xa66>
 8005fbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005fc2:	d02a      	beq.n	800601a <_dtoa_r+0xaa2>
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dd02      	ble.n	8005fd0 <_dtoa_r+0xa58>
 8005fca:	9b02      	ldr	r3, [sp, #8]
 8005fcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005fd0:	f88b a000 	strb.w	sl, [fp]
 8005fd4:	e775      	b.n	8005ec2 <_dtoa_r+0x94a>
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	e7ba      	b.n	8005f50 <_dtoa_r+0x9d8>
 8005fda:	2201      	movs	r2, #1
 8005fdc:	e7e2      	b.n	8005fa4 <_dtoa_r+0xa2c>
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	db04      	blt.n	8005fee <_dtoa_r+0xa76>
 8005fe4:	9906      	ldr	r1, [sp, #24]
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	9904      	ldr	r1, [sp, #16]
 8005fea:	430b      	orrs	r3, r1
 8005fec:	d122      	bne.n	8006034 <_dtoa_r+0xabc>
 8005fee:	2a00      	cmp	r2, #0
 8005ff0:	ddee      	ble.n	8005fd0 <_dtoa_r+0xa58>
 8005ff2:	ee18 1a10 	vmov	r1, s16
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fcf7 	bl	80069ec <__lshift>
 8005ffe:	4631      	mov	r1, r6
 8006000:	ee08 0a10 	vmov	s16, r0
 8006004:	f000 fd62 	bl	8006acc <__mcmp>
 8006008:	2800      	cmp	r0, #0
 800600a:	dc03      	bgt.n	8006014 <_dtoa_r+0xa9c>
 800600c:	d1e0      	bne.n	8005fd0 <_dtoa_r+0xa58>
 800600e:	f01a 0f01 	tst.w	sl, #1
 8006012:	d0dd      	beq.n	8005fd0 <_dtoa_r+0xa58>
 8006014:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006018:	d1d7      	bne.n	8005fca <_dtoa_r+0xa52>
 800601a:	2339      	movs	r3, #57	; 0x39
 800601c:	f88b 3000 	strb.w	r3, [fp]
 8006020:	462b      	mov	r3, r5
 8006022:	461d      	mov	r5, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800602a:	2a39      	cmp	r2, #57	; 0x39
 800602c:	d071      	beq.n	8006112 <_dtoa_r+0xb9a>
 800602e:	3201      	adds	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e746      	b.n	8005ec2 <_dtoa_r+0x94a>
 8006034:	2a00      	cmp	r2, #0
 8006036:	dd07      	ble.n	8006048 <_dtoa_r+0xad0>
 8006038:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800603c:	d0ed      	beq.n	800601a <_dtoa_r+0xaa2>
 800603e:	f10a 0301 	add.w	r3, sl, #1
 8006042:	f88b 3000 	strb.w	r3, [fp]
 8006046:	e73c      	b.n	8005ec2 <_dtoa_r+0x94a>
 8006048:	9b05      	ldr	r3, [sp, #20]
 800604a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800604e:	4599      	cmp	r9, r3
 8006050:	d047      	beq.n	80060e2 <_dtoa_r+0xb6a>
 8006052:	ee18 1a10 	vmov	r1, s16
 8006056:	2300      	movs	r3, #0
 8006058:	220a      	movs	r2, #10
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fb16 	bl	800668c <__multadd>
 8006060:	45b8      	cmp	r8, r7
 8006062:	ee08 0a10 	vmov	s16, r0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	f04f 020a 	mov.w	r2, #10
 800606e:	4641      	mov	r1, r8
 8006070:	4620      	mov	r0, r4
 8006072:	d106      	bne.n	8006082 <_dtoa_r+0xb0a>
 8006074:	f000 fb0a 	bl	800668c <__multadd>
 8006078:	4680      	mov	r8, r0
 800607a:	4607      	mov	r7, r0
 800607c:	f109 0901 	add.w	r9, r9, #1
 8006080:	e772      	b.n	8005f68 <_dtoa_r+0x9f0>
 8006082:	f000 fb03 	bl	800668c <__multadd>
 8006086:	4639      	mov	r1, r7
 8006088:	4680      	mov	r8, r0
 800608a:	2300      	movs	r3, #0
 800608c:	220a      	movs	r2, #10
 800608e:	4620      	mov	r0, r4
 8006090:	f000 fafc 	bl	800668c <__multadd>
 8006094:	4607      	mov	r7, r0
 8006096:	e7f1      	b.n	800607c <_dtoa_r+0xb04>
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	9302      	str	r3, [sp, #8]
 800609c:	9d01      	ldr	r5, [sp, #4]
 800609e:	ee18 0a10 	vmov	r0, s16
 80060a2:	4631      	mov	r1, r6
 80060a4:	f7ff f9dc 	bl	8005460 <quorem>
 80060a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	f805 ab01 	strb.w	sl, [r5], #1
 80060b2:	1aea      	subs	r2, r5, r3
 80060b4:	9b02      	ldr	r3, [sp, #8]
 80060b6:	4293      	cmp	r3, r2
 80060b8:	dd09      	ble.n	80060ce <_dtoa_r+0xb56>
 80060ba:	ee18 1a10 	vmov	r1, s16
 80060be:	2300      	movs	r3, #0
 80060c0:	220a      	movs	r2, #10
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fae2 	bl	800668c <__multadd>
 80060c8:	ee08 0a10 	vmov	s16, r0
 80060cc:	e7e7      	b.n	800609e <_dtoa_r+0xb26>
 80060ce:	9b02      	ldr	r3, [sp, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bfc8      	it	gt
 80060d4:	461d      	movgt	r5, r3
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	bfd8      	it	le
 80060da:	2501      	movle	r5, #1
 80060dc:	441d      	add	r5, r3
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	ee18 1a10 	vmov	r1, s16
 80060e6:	2201      	movs	r2, #1
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fc7f 	bl	80069ec <__lshift>
 80060ee:	4631      	mov	r1, r6
 80060f0:	ee08 0a10 	vmov	s16, r0
 80060f4:	f000 fcea 	bl	8006acc <__mcmp>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	dc91      	bgt.n	8006020 <_dtoa_r+0xaa8>
 80060fc:	d102      	bne.n	8006104 <_dtoa_r+0xb8c>
 80060fe:	f01a 0f01 	tst.w	sl, #1
 8006102:	d18d      	bne.n	8006020 <_dtoa_r+0xaa8>
 8006104:	462b      	mov	r3, r5
 8006106:	461d      	mov	r5, r3
 8006108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800610c:	2a30      	cmp	r2, #48	; 0x30
 800610e:	d0fa      	beq.n	8006106 <_dtoa_r+0xb8e>
 8006110:	e6d7      	b.n	8005ec2 <_dtoa_r+0x94a>
 8006112:	9a01      	ldr	r2, [sp, #4]
 8006114:	429a      	cmp	r2, r3
 8006116:	d184      	bne.n	8006022 <_dtoa_r+0xaaa>
 8006118:	9b00      	ldr	r3, [sp, #0]
 800611a:	3301      	adds	r3, #1
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2331      	movs	r3, #49	; 0x31
 8006120:	7013      	strb	r3, [r2, #0]
 8006122:	e6ce      	b.n	8005ec2 <_dtoa_r+0x94a>
 8006124:	4b09      	ldr	r3, [pc, #36]	; (800614c <_dtoa_r+0xbd4>)
 8006126:	f7ff ba95 	b.w	8005654 <_dtoa_r+0xdc>
 800612a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f aa6e 	bne.w	800560e <_dtoa_r+0x96>
 8006132:	4b07      	ldr	r3, [pc, #28]	; (8006150 <_dtoa_r+0xbd8>)
 8006134:	f7ff ba8e 	b.w	8005654 <_dtoa_r+0xdc>
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	dcae      	bgt.n	800609c <_dtoa_r+0xb24>
 800613e:	9b06      	ldr	r3, [sp, #24]
 8006140:	2b02      	cmp	r3, #2
 8006142:	f73f aea8 	bgt.w	8005e96 <_dtoa_r+0x91e>
 8006146:	e7a9      	b.n	800609c <_dtoa_r+0xb24>
 8006148:	080075e3 	.word	0x080075e3
 800614c:	08007540 	.word	0x08007540
 8006150:	08007564 	.word	0x08007564

08006154 <__sflush_r>:
 8006154:	898a      	ldrh	r2, [r1, #12]
 8006156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615a:	4605      	mov	r5, r0
 800615c:	0710      	lsls	r0, r2, #28
 800615e:	460c      	mov	r4, r1
 8006160:	d458      	bmi.n	8006214 <__sflush_r+0xc0>
 8006162:	684b      	ldr	r3, [r1, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	dc05      	bgt.n	8006174 <__sflush_r+0x20>
 8006168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	dc02      	bgt.n	8006174 <__sflush_r+0x20>
 800616e:	2000      	movs	r0, #0
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006176:	2e00      	cmp	r6, #0
 8006178:	d0f9      	beq.n	800616e <__sflush_r+0x1a>
 800617a:	2300      	movs	r3, #0
 800617c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006180:	682f      	ldr	r7, [r5, #0]
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	d032      	beq.n	80061ec <__sflush_r+0x98>
 8006186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	075a      	lsls	r2, r3, #29
 800618c:	d505      	bpl.n	800619a <__sflush_r+0x46>
 800618e:	6863      	ldr	r3, [r4, #4]
 8006190:	1ac0      	subs	r0, r0, r3
 8006192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006194:	b10b      	cbz	r3, 800619a <__sflush_r+0x46>
 8006196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006198:	1ac0      	subs	r0, r0, r3
 800619a:	2300      	movs	r3, #0
 800619c:	4602      	mov	r2, r0
 800619e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061a0:	6a21      	ldr	r1, [r4, #32]
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b0      	blx	r6
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	d106      	bne.n	80061ba <__sflush_r+0x66>
 80061ac:	6829      	ldr	r1, [r5, #0]
 80061ae:	291d      	cmp	r1, #29
 80061b0:	d82c      	bhi.n	800620c <__sflush_r+0xb8>
 80061b2:	4a2a      	ldr	r2, [pc, #168]	; (800625c <__sflush_r+0x108>)
 80061b4:	40ca      	lsrs	r2, r1
 80061b6:	07d6      	lsls	r6, r2, #31
 80061b8:	d528      	bpl.n	800620c <__sflush_r+0xb8>
 80061ba:	2200      	movs	r2, #0
 80061bc:	6062      	str	r2, [r4, #4]
 80061be:	04d9      	lsls	r1, r3, #19
 80061c0:	6922      	ldr	r2, [r4, #16]
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	d504      	bpl.n	80061d0 <__sflush_r+0x7c>
 80061c6:	1c42      	adds	r2, r0, #1
 80061c8:	d101      	bne.n	80061ce <__sflush_r+0x7a>
 80061ca:	682b      	ldr	r3, [r5, #0]
 80061cc:	b903      	cbnz	r3, 80061d0 <__sflush_r+0x7c>
 80061ce:	6560      	str	r0, [r4, #84]	; 0x54
 80061d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061d2:	602f      	str	r7, [r5, #0]
 80061d4:	2900      	cmp	r1, #0
 80061d6:	d0ca      	beq.n	800616e <__sflush_r+0x1a>
 80061d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061dc:	4299      	cmp	r1, r3
 80061de:	d002      	beq.n	80061e6 <__sflush_r+0x92>
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 fd8b 	bl	8006cfc <_free_r>
 80061e6:	2000      	movs	r0, #0
 80061e8:	6360      	str	r0, [r4, #52]	; 0x34
 80061ea:	e7c1      	b.n	8006170 <__sflush_r+0x1c>
 80061ec:	6a21      	ldr	r1, [r4, #32]
 80061ee:	2301      	movs	r3, #1
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b0      	blx	r6
 80061f4:	1c41      	adds	r1, r0, #1
 80061f6:	d1c7      	bne.n	8006188 <__sflush_r+0x34>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0c4      	beq.n	8006188 <__sflush_r+0x34>
 80061fe:	2b1d      	cmp	r3, #29
 8006200:	d001      	beq.n	8006206 <__sflush_r+0xb2>
 8006202:	2b16      	cmp	r3, #22
 8006204:	d101      	bne.n	800620a <__sflush_r+0xb6>
 8006206:	602f      	str	r7, [r5, #0]
 8006208:	e7b1      	b.n	800616e <__sflush_r+0x1a>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	e7ad      	b.n	8006170 <__sflush_r+0x1c>
 8006214:	690f      	ldr	r7, [r1, #16]
 8006216:	2f00      	cmp	r7, #0
 8006218:	d0a9      	beq.n	800616e <__sflush_r+0x1a>
 800621a:	0793      	lsls	r3, r2, #30
 800621c:	680e      	ldr	r6, [r1, #0]
 800621e:	bf08      	it	eq
 8006220:	694b      	ldreq	r3, [r1, #20]
 8006222:	600f      	str	r7, [r1, #0]
 8006224:	bf18      	it	ne
 8006226:	2300      	movne	r3, #0
 8006228:	eba6 0807 	sub.w	r8, r6, r7
 800622c:	608b      	str	r3, [r1, #8]
 800622e:	f1b8 0f00 	cmp.w	r8, #0
 8006232:	dd9c      	ble.n	800616e <__sflush_r+0x1a>
 8006234:	6a21      	ldr	r1, [r4, #32]
 8006236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006238:	4643      	mov	r3, r8
 800623a:	463a      	mov	r2, r7
 800623c:	4628      	mov	r0, r5
 800623e:	47b0      	blx	r6
 8006240:	2800      	cmp	r0, #0
 8006242:	dc06      	bgt.n	8006252 <__sflush_r+0xfe>
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e78e      	b.n	8006170 <__sflush_r+0x1c>
 8006252:	4407      	add	r7, r0
 8006254:	eba8 0800 	sub.w	r8, r8, r0
 8006258:	e7e9      	b.n	800622e <__sflush_r+0xda>
 800625a:	bf00      	nop
 800625c:	20400001 	.word	0x20400001

08006260 <_fflush_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	690b      	ldr	r3, [r1, #16]
 8006264:	4605      	mov	r5, r0
 8006266:	460c      	mov	r4, r1
 8006268:	b913      	cbnz	r3, 8006270 <_fflush_r+0x10>
 800626a:	2500      	movs	r5, #0
 800626c:	4628      	mov	r0, r5
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	b118      	cbz	r0, 800627a <_fflush_r+0x1a>
 8006272:	6983      	ldr	r3, [r0, #24]
 8006274:	b90b      	cbnz	r3, 800627a <_fflush_r+0x1a>
 8006276:	f000 f887 	bl	8006388 <__sinit>
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <_fflush_r+0x6c>)
 800627c:	429c      	cmp	r4, r3
 800627e:	d11b      	bne.n	80062b8 <_fflush_r+0x58>
 8006280:	686c      	ldr	r4, [r5, #4]
 8006282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0ef      	beq.n	800626a <_fflush_r+0xa>
 800628a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800628c:	07d0      	lsls	r0, r2, #31
 800628e:	d404      	bmi.n	800629a <_fflush_r+0x3a>
 8006290:	0599      	lsls	r1, r3, #22
 8006292:	d402      	bmi.n	800629a <_fflush_r+0x3a>
 8006294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006296:	f000 f91a 	bl	80064ce <__retarget_lock_acquire_recursive>
 800629a:	4628      	mov	r0, r5
 800629c:	4621      	mov	r1, r4
 800629e:	f7ff ff59 	bl	8006154 <__sflush_r>
 80062a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062a4:	07da      	lsls	r2, r3, #31
 80062a6:	4605      	mov	r5, r0
 80062a8:	d4e0      	bmi.n	800626c <_fflush_r+0xc>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	059b      	lsls	r3, r3, #22
 80062ae:	d4dd      	bmi.n	800626c <_fflush_r+0xc>
 80062b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b2:	f000 f90d 	bl	80064d0 <__retarget_lock_release_recursive>
 80062b6:	e7d9      	b.n	800626c <_fflush_r+0xc>
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <_fflush_r+0x70>)
 80062ba:	429c      	cmp	r4, r3
 80062bc:	d101      	bne.n	80062c2 <_fflush_r+0x62>
 80062be:	68ac      	ldr	r4, [r5, #8]
 80062c0:	e7df      	b.n	8006282 <_fflush_r+0x22>
 80062c2:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <_fflush_r+0x74>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	bf08      	it	eq
 80062c8:	68ec      	ldreq	r4, [r5, #12]
 80062ca:	e7da      	b.n	8006282 <_fflush_r+0x22>
 80062cc:	08007614 	.word	0x08007614
 80062d0:	08007634 	.word	0x08007634
 80062d4:	080075f4 	.word	0x080075f4

080062d8 <std>:
 80062d8:	2300      	movs	r3, #0
 80062da:	b510      	push	{r4, lr}
 80062dc:	4604      	mov	r4, r0
 80062de:	e9c0 3300 	strd	r3, r3, [r0]
 80062e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062e6:	6083      	str	r3, [r0, #8]
 80062e8:	8181      	strh	r1, [r0, #12]
 80062ea:	6643      	str	r3, [r0, #100]	; 0x64
 80062ec:	81c2      	strh	r2, [r0, #14]
 80062ee:	6183      	str	r3, [r0, #24]
 80062f0:	4619      	mov	r1, r3
 80062f2:	2208      	movs	r2, #8
 80062f4:	305c      	adds	r0, #92	; 0x5c
 80062f6:	f7fe faf3 	bl	80048e0 <memset>
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <std+0x38>)
 80062fc:	6263      	str	r3, [r4, #36]	; 0x24
 80062fe:	4b05      	ldr	r3, [pc, #20]	; (8006314 <std+0x3c>)
 8006300:	62a3      	str	r3, [r4, #40]	; 0x28
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <std+0x40>)
 8006304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <std+0x44>)
 8006308:	6224      	str	r4, [r4, #32]
 800630a:	6323      	str	r3, [r4, #48]	; 0x30
 800630c:	bd10      	pop	{r4, pc}
 800630e:	bf00      	nop
 8006310:	08007191 	.word	0x08007191
 8006314:	080071b3 	.word	0x080071b3
 8006318:	080071eb 	.word	0x080071eb
 800631c:	0800720f 	.word	0x0800720f

08006320 <_cleanup_r>:
 8006320:	4901      	ldr	r1, [pc, #4]	; (8006328 <_cleanup_r+0x8>)
 8006322:	f000 b8af 	b.w	8006484 <_fwalk_reent>
 8006326:	bf00      	nop
 8006328:	08006261 	.word	0x08006261

0800632c <__sfmoreglue>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	2268      	movs	r2, #104	; 0x68
 8006330:	1e4d      	subs	r5, r1, #1
 8006332:	4355      	muls	r5, r2
 8006334:	460e      	mov	r6, r1
 8006336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800633a:	f000 fd4b 	bl	8006dd4 <_malloc_r>
 800633e:	4604      	mov	r4, r0
 8006340:	b140      	cbz	r0, 8006354 <__sfmoreglue+0x28>
 8006342:	2100      	movs	r1, #0
 8006344:	e9c0 1600 	strd	r1, r6, [r0]
 8006348:	300c      	adds	r0, #12
 800634a:	60a0      	str	r0, [r4, #8]
 800634c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006350:	f7fe fac6 	bl	80048e0 <memset>
 8006354:	4620      	mov	r0, r4
 8006356:	bd70      	pop	{r4, r5, r6, pc}

08006358 <__sfp_lock_acquire>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__sfp_lock_acquire+0x8>)
 800635a:	f000 b8b8 	b.w	80064ce <__retarget_lock_acquire_recursive>
 800635e:	bf00      	nop
 8006360:	20000339 	.word	0x20000339

08006364 <__sfp_lock_release>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__sfp_lock_release+0x8>)
 8006366:	f000 b8b3 	b.w	80064d0 <__retarget_lock_release_recursive>
 800636a:	bf00      	nop
 800636c:	20000339 	.word	0x20000339

08006370 <__sinit_lock_acquire>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__sinit_lock_acquire+0x8>)
 8006372:	f000 b8ac 	b.w	80064ce <__retarget_lock_acquire_recursive>
 8006376:	bf00      	nop
 8006378:	2000033a 	.word	0x2000033a

0800637c <__sinit_lock_release>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__sinit_lock_release+0x8>)
 800637e:	f000 b8a7 	b.w	80064d0 <__retarget_lock_release_recursive>
 8006382:	bf00      	nop
 8006384:	2000033a 	.word	0x2000033a

08006388 <__sinit>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4604      	mov	r4, r0
 800638c:	f7ff fff0 	bl	8006370 <__sinit_lock_acquire>
 8006390:	69a3      	ldr	r3, [r4, #24]
 8006392:	b11b      	cbz	r3, 800639c <__sinit+0x14>
 8006394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006398:	f7ff bff0 	b.w	800637c <__sinit_lock_release>
 800639c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063a0:	6523      	str	r3, [r4, #80]	; 0x50
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <__sinit+0x68>)
 80063a4:	4a13      	ldr	r2, [pc, #76]	; (80063f4 <__sinit+0x6c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80063aa:	42a3      	cmp	r3, r4
 80063ac:	bf04      	itt	eq
 80063ae:	2301      	moveq	r3, #1
 80063b0:	61a3      	streq	r3, [r4, #24]
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 f820 	bl	80063f8 <__sfp>
 80063b8:	6060      	str	r0, [r4, #4]
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 f81c 	bl	80063f8 <__sfp>
 80063c0:	60a0      	str	r0, [r4, #8]
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 f818 	bl	80063f8 <__sfp>
 80063c8:	2200      	movs	r2, #0
 80063ca:	60e0      	str	r0, [r4, #12]
 80063cc:	2104      	movs	r1, #4
 80063ce:	6860      	ldr	r0, [r4, #4]
 80063d0:	f7ff ff82 	bl	80062d8 <std>
 80063d4:	68a0      	ldr	r0, [r4, #8]
 80063d6:	2201      	movs	r2, #1
 80063d8:	2109      	movs	r1, #9
 80063da:	f7ff ff7d 	bl	80062d8 <std>
 80063de:	68e0      	ldr	r0, [r4, #12]
 80063e0:	2202      	movs	r2, #2
 80063e2:	2112      	movs	r1, #18
 80063e4:	f7ff ff78 	bl	80062d8 <std>
 80063e8:	2301      	movs	r3, #1
 80063ea:	61a3      	str	r3, [r4, #24]
 80063ec:	e7d2      	b.n	8006394 <__sinit+0xc>
 80063ee:	bf00      	nop
 80063f0:	0800752c 	.word	0x0800752c
 80063f4:	08006321 	.word	0x08006321

080063f8 <__sfp>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4607      	mov	r7, r0
 80063fc:	f7ff ffac 	bl	8006358 <__sfp_lock_acquire>
 8006400:	4b1e      	ldr	r3, [pc, #120]	; (800647c <__sfp+0x84>)
 8006402:	681e      	ldr	r6, [r3, #0]
 8006404:	69b3      	ldr	r3, [r6, #24]
 8006406:	b913      	cbnz	r3, 800640e <__sfp+0x16>
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff ffbd 	bl	8006388 <__sinit>
 800640e:	3648      	adds	r6, #72	; 0x48
 8006410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006414:	3b01      	subs	r3, #1
 8006416:	d503      	bpl.n	8006420 <__sfp+0x28>
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	b30b      	cbz	r3, 8006460 <__sfp+0x68>
 800641c:	6836      	ldr	r6, [r6, #0]
 800641e:	e7f7      	b.n	8006410 <__sfp+0x18>
 8006420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006424:	b9d5      	cbnz	r5, 800645c <__sfp+0x64>
 8006426:	4b16      	ldr	r3, [pc, #88]	; (8006480 <__sfp+0x88>)
 8006428:	60e3      	str	r3, [r4, #12]
 800642a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800642e:	6665      	str	r5, [r4, #100]	; 0x64
 8006430:	f000 f84c 	bl	80064cc <__retarget_lock_init_recursive>
 8006434:	f7ff ff96 	bl	8006364 <__sfp_lock_release>
 8006438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800643c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006440:	6025      	str	r5, [r4, #0]
 8006442:	61a5      	str	r5, [r4, #24]
 8006444:	2208      	movs	r2, #8
 8006446:	4629      	mov	r1, r5
 8006448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800644c:	f7fe fa48 	bl	80048e0 <memset>
 8006450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006458:	4620      	mov	r0, r4
 800645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645c:	3468      	adds	r4, #104	; 0x68
 800645e:	e7d9      	b.n	8006414 <__sfp+0x1c>
 8006460:	2104      	movs	r1, #4
 8006462:	4638      	mov	r0, r7
 8006464:	f7ff ff62 	bl	800632c <__sfmoreglue>
 8006468:	4604      	mov	r4, r0
 800646a:	6030      	str	r0, [r6, #0]
 800646c:	2800      	cmp	r0, #0
 800646e:	d1d5      	bne.n	800641c <__sfp+0x24>
 8006470:	f7ff ff78 	bl	8006364 <__sfp_lock_release>
 8006474:	230c      	movs	r3, #12
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	e7ee      	b.n	8006458 <__sfp+0x60>
 800647a:	bf00      	nop
 800647c:	0800752c 	.word	0x0800752c
 8006480:	ffff0001 	.word	0xffff0001

08006484 <_fwalk_reent>:
 8006484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006488:	4606      	mov	r6, r0
 800648a:	4688      	mov	r8, r1
 800648c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006490:	2700      	movs	r7, #0
 8006492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006496:	f1b9 0901 	subs.w	r9, r9, #1
 800649a:	d505      	bpl.n	80064a8 <_fwalk_reent+0x24>
 800649c:	6824      	ldr	r4, [r4, #0]
 800649e:	2c00      	cmp	r4, #0
 80064a0:	d1f7      	bne.n	8006492 <_fwalk_reent+0xe>
 80064a2:	4638      	mov	r0, r7
 80064a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d907      	bls.n	80064be <_fwalk_reent+0x3a>
 80064ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064b2:	3301      	adds	r3, #1
 80064b4:	d003      	beq.n	80064be <_fwalk_reent+0x3a>
 80064b6:	4629      	mov	r1, r5
 80064b8:	4630      	mov	r0, r6
 80064ba:	47c0      	blx	r8
 80064bc:	4307      	orrs	r7, r0
 80064be:	3568      	adds	r5, #104	; 0x68
 80064c0:	e7e9      	b.n	8006496 <_fwalk_reent+0x12>
	...

080064c4 <_localeconv_r>:
 80064c4:	4800      	ldr	r0, [pc, #0]	; (80064c8 <_localeconv_r+0x4>)
 80064c6:	4770      	bx	lr
 80064c8:	20000160 	.word	0x20000160

080064cc <__retarget_lock_init_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_acquire_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <__retarget_lock_release_recursive>:
 80064d0:	4770      	bx	lr

080064d2 <__swhatbuf_r>:
 80064d2:	b570      	push	{r4, r5, r6, lr}
 80064d4:	460e      	mov	r6, r1
 80064d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064da:	2900      	cmp	r1, #0
 80064dc:	b096      	sub	sp, #88	; 0x58
 80064de:	4614      	mov	r4, r2
 80064e0:	461d      	mov	r5, r3
 80064e2:	da08      	bge.n	80064f6 <__swhatbuf_r+0x24>
 80064e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	602a      	str	r2, [r5, #0]
 80064ec:	061a      	lsls	r2, r3, #24
 80064ee:	d410      	bmi.n	8006512 <__swhatbuf_r+0x40>
 80064f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f4:	e00e      	b.n	8006514 <__swhatbuf_r+0x42>
 80064f6:	466a      	mov	r2, sp
 80064f8:	f000 fee0 	bl	80072bc <_fstat_r>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	dbf1      	blt.n	80064e4 <__swhatbuf_r+0x12>
 8006500:	9a01      	ldr	r2, [sp, #4]
 8006502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800650a:	425a      	negs	r2, r3
 800650c:	415a      	adcs	r2, r3
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	e7ee      	b.n	80064f0 <__swhatbuf_r+0x1e>
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	2000      	movs	r0, #0
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	b016      	add	sp, #88	; 0x58
 800651a:	bd70      	pop	{r4, r5, r6, pc}

0800651c <__smakebuf_r>:
 800651c:	898b      	ldrh	r3, [r1, #12]
 800651e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006520:	079d      	lsls	r5, r3, #30
 8006522:	4606      	mov	r6, r0
 8006524:	460c      	mov	r4, r1
 8006526:	d507      	bpl.n	8006538 <__smakebuf_r+0x1c>
 8006528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2301      	movs	r3, #1
 8006532:	6163      	str	r3, [r4, #20]
 8006534:	b002      	add	sp, #8
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	ab01      	add	r3, sp, #4
 800653a:	466a      	mov	r2, sp
 800653c:	f7ff ffc9 	bl	80064d2 <__swhatbuf_r>
 8006540:	9900      	ldr	r1, [sp, #0]
 8006542:	4605      	mov	r5, r0
 8006544:	4630      	mov	r0, r6
 8006546:	f000 fc45 	bl	8006dd4 <_malloc_r>
 800654a:	b948      	cbnz	r0, 8006560 <__smakebuf_r+0x44>
 800654c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006550:	059a      	lsls	r2, r3, #22
 8006552:	d4ef      	bmi.n	8006534 <__smakebuf_r+0x18>
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	f043 0302 	orr.w	r3, r3, #2
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	e7e3      	b.n	8006528 <__smakebuf_r+0xc>
 8006560:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <__smakebuf_r+0x7c>)
 8006562:	62b3      	str	r3, [r6, #40]	; 0x28
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	6020      	str	r0, [r4, #0]
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	9b00      	ldr	r3, [sp, #0]
 8006570:	6163      	str	r3, [r4, #20]
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	6120      	str	r0, [r4, #16]
 8006576:	b15b      	cbz	r3, 8006590 <__smakebuf_r+0x74>
 8006578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800657c:	4630      	mov	r0, r6
 800657e:	f000 feaf 	bl	80072e0 <_isatty_r>
 8006582:	b128      	cbz	r0, 8006590 <__smakebuf_r+0x74>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	89a0      	ldrh	r0, [r4, #12]
 8006592:	4305      	orrs	r5, r0
 8006594:	81a5      	strh	r5, [r4, #12]
 8006596:	e7cd      	b.n	8006534 <__smakebuf_r+0x18>
 8006598:	08006321 	.word	0x08006321

0800659c <malloc>:
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <malloc+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f000 bc17 	b.w	8006dd4 <_malloc_r>
 80065a6:	bf00      	nop
 80065a8:	2000000c 	.word	0x2000000c

080065ac <memcpy>:
 80065ac:	440a      	add	r2, r1
 80065ae:	4291      	cmp	r1, r2
 80065b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b4:	d100      	bne.n	80065b8 <memcpy+0xc>
 80065b6:	4770      	bx	lr
 80065b8:	b510      	push	{r4, lr}
 80065ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c2:	4291      	cmp	r1, r2
 80065c4:	d1f9      	bne.n	80065ba <memcpy+0xe>
 80065c6:	bd10      	pop	{r4, pc}

080065c8 <_Balloc>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	b976      	cbnz	r6, 80065f0 <_Balloc+0x28>
 80065d2:	2010      	movs	r0, #16
 80065d4:	f7ff ffe2 	bl	800659c <malloc>
 80065d8:	4602      	mov	r2, r0
 80065da:	6260      	str	r0, [r4, #36]	; 0x24
 80065dc:	b920      	cbnz	r0, 80065e8 <_Balloc+0x20>
 80065de:	4b18      	ldr	r3, [pc, #96]	; (8006640 <_Balloc+0x78>)
 80065e0:	4818      	ldr	r0, [pc, #96]	; (8006644 <_Balloc+0x7c>)
 80065e2:	2166      	movs	r1, #102	; 0x66
 80065e4:	f000 fe2a 	bl	800723c <__assert_func>
 80065e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065ec:	6006      	str	r6, [r0, #0]
 80065ee:	60c6      	str	r6, [r0, #12]
 80065f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065f2:	68f3      	ldr	r3, [r6, #12]
 80065f4:	b183      	cbz	r3, 8006618 <_Balloc+0x50>
 80065f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065fe:	b9b8      	cbnz	r0, 8006630 <_Balloc+0x68>
 8006600:	2101      	movs	r1, #1
 8006602:	fa01 f605 	lsl.w	r6, r1, r5
 8006606:	1d72      	adds	r2, r6, #5
 8006608:	0092      	lsls	r2, r2, #2
 800660a:	4620      	mov	r0, r4
 800660c:	f000 fb60 	bl	8006cd0 <_calloc_r>
 8006610:	b160      	cbz	r0, 800662c <_Balloc+0x64>
 8006612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006616:	e00e      	b.n	8006636 <_Balloc+0x6e>
 8006618:	2221      	movs	r2, #33	; 0x21
 800661a:	2104      	movs	r1, #4
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fb57 	bl	8006cd0 <_calloc_r>
 8006622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006624:	60f0      	str	r0, [r6, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e4      	bne.n	80065f6 <_Balloc+0x2e>
 800662c:	2000      	movs	r0, #0
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	6802      	ldr	r2, [r0, #0]
 8006632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006636:	2300      	movs	r3, #0
 8006638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800663c:	e7f7      	b.n	800662e <_Balloc+0x66>
 800663e:	bf00      	nop
 8006640:	08007571 	.word	0x08007571
 8006644:	08007654 	.word	0x08007654

08006648 <_Bfree>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800664c:	4605      	mov	r5, r0
 800664e:	460c      	mov	r4, r1
 8006650:	b976      	cbnz	r6, 8006670 <_Bfree+0x28>
 8006652:	2010      	movs	r0, #16
 8006654:	f7ff ffa2 	bl	800659c <malloc>
 8006658:	4602      	mov	r2, r0
 800665a:	6268      	str	r0, [r5, #36]	; 0x24
 800665c:	b920      	cbnz	r0, 8006668 <_Bfree+0x20>
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <_Bfree+0x3c>)
 8006660:	4809      	ldr	r0, [pc, #36]	; (8006688 <_Bfree+0x40>)
 8006662:	218a      	movs	r1, #138	; 0x8a
 8006664:	f000 fdea 	bl	800723c <__assert_func>
 8006668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800666c:	6006      	str	r6, [r0, #0]
 800666e:	60c6      	str	r6, [r0, #12]
 8006670:	b13c      	cbz	r4, 8006682 <_Bfree+0x3a>
 8006672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006674:	6862      	ldr	r2, [r4, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800667c:	6021      	str	r1, [r4, #0]
 800667e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	08007571 	.word	0x08007571
 8006688:	08007654 	.word	0x08007654

0800668c <__multadd>:
 800668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006690:	690d      	ldr	r5, [r1, #16]
 8006692:	4607      	mov	r7, r0
 8006694:	460c      	mov	r4, r1
 8006696:	461e      	mov	r6, r3
 8006698:	f101 0c14 	add.w	ip, r1, #20
 800669c:	2000      	movs	r0, #0
 800669e:	f8dc 3000 	ldr.w	r3, [ip]
 80066a2:	b299      	uxth	r1, r3
 80066a4:	fb02 6101 	mla	r1, r2, r1, r6
 80066a8:	0c1e      	lsrs	r6, r3, #16
 80066aa:	0c0b      	lsrs	r3, r1, #16
 80066ac:	fb02 3306 	mla	r3, r2, r6, r3
 80066b0:	b289      	uxth	r1, r1
 80066b2:	3001      	adds	r0, #1
 80066b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066b8:	4285      	cmp	r5, r0
 80066ba:	f84c 1b04 	str.w	r1, [ip], #4
 80066be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066c2:	dcec      	bgt.n	800669e <__multadd+0x12>
 80066c4:	b30e      	cbz	r6, 800670a <__multadd+0x7e>
 80066c6:	68a3      	ldr	r3, [r4, #8]
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	dc19      	bgt.n	8006700 <__multadd+0x74>
 80066cc:	6861      	ldr	r1, [r4, #4]
 80066ce:	4638      	mov	r0, r7
 80066d0:	3101      	adds	r1, #1
 80066d2:	f7ff ff79 	bl	80065c8 <_Balloc>
 80066d6:	4680      	mov	r8, r0
 80066d8:	b928      	cbnz	r0, 80066e6 <__multadd+0x5a>
 80066da:	4602      	mov	r2, r0
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <__multadd+0x84>)
 80066de:	480d      	ldr	r0, [pc, #52]	; (8006714 <__multadd+0x88>)
 80066e0:	21b5      	movs	r1, #181	; 0xb5
 80066e2:	f000 fdab 	bl	800723c <__assert_func>
 80066e6:	6922      	ldr	r2, [r4, #16]
 80066e8:	3202      	adds	r2, #2
 80066ea:	f104 010c 	add.w	r1, r4, #12
 80066ee:	0092      	lsls	r2, r2, #2
 80066f0:	300c      	adds	r0, #12
 80066f2:	f7ff ff5b 	bl	80065ac <memcpy>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4638      	mov	r0, r7
 80066fa:	f7ff ffa5 	bl	8006648 <_Bfree>
 80066fe:	4644      	mov	r4, r8
 8006700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006704:	3501      	adds	r5, #1
 8006706:	615e      	str	r6, [r3, #20]
 8006708:	6125      	str	r5, [r4, #16]
 800670a:	4620      	mov	r0, r4
 800670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006710:	080075e3 	.word	0x080075e3
 8006714:	08007654 	.word	0x08007654

08006718 <__hi0bits>:
 8006718:	0c03      	lsrs	r3, r0, #16
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	b9d3      	cbnz	r3, 8006754 <__hi0bits+0x3c>
 800671e:	0400      	lsls	r0, r0, #16
 8006720:	2310      	movs	r3, #16
 8006722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006726:	bf04      	itt	eq
 8006728:	0200      	lsleq	r0, r0, #8
 800672a:	3308      	addeq	r3, #8
 800672c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006730:	bf04      	itt	eq
 8006732:	0100      	lsleq	r0, r0, #4
 8006734:	3304      	addeq	r3, #4
 8006736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800673a:	bf04      	itt	eq
 800673c:	0080      	lsleq	r0, r0, #2
 800673e:	3302      	addeq	r3, #2
 8006740:	2800      	cmp	r0, #0
 8006742:	db05      	blt.n	8006750 <__hi0bits+0x38>
 8006744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006748:	f103 0301 	add.w	r3, r3, #1
 800674c:	bf08      	it	eq
 800674e:	2320      	moveq	r3, #32
 8006750:	4618      	mov	r0, r3
 8006752:	4770      	bx	lr
 8006754:	2300      	movs	r3, #0
 8006756:	e7e4      	b.n	8006722 <__hi0bits+0xa>

08006758 <__lo0bits>:
 8006758:	6803      	ldr	r3, [r0, #0]
 800675a:	f013 0207 	ands.w	r2, r3, #7
 800675e:	4601      	mov	r1, r0
 8006760:	d00b      	beq.n	800677a <__lo0bits+0x22>
 8006762:	07da      	lsls	r2, r3, #31
 8006764:	d423      	bmi.n	80067ae <__lo0bits+0x56>
 8006766:	0798      	lsls	r0, r3, #30
 8006768:	bf49      	itett	mi
 800676a:	085b      	lsrmi	r3, r3, #1
 800676c:	089b      	lsrpl	r3, r3, #2
 800676e:	2001      	movmi	r0, #1
 8006770:	600b      	strmi	r3, [r1, #0]
 8006772:	bf5c      	itt	pl
 8006774:	600b      	strpl	r3, [r1, #0]
 8006776:	2002      	movpl	r0, #2
 8006778:	4770      	bx	lr
 800677a:	b298      	uxth	r0, r3
 800677c:	b9a8      	cbnz	r0, 80067aa <__lo0bits+0x52>
 800677e:	0c1b      	lsrs	r3, r3, #16
 8006780:	2010      	movs	r0, #16
 8006782:	b2da      	uxtb	r2, r3
 8006784:	b90a      	cbnz	r2, 800678a <__lo0bits+0x32>
 8006786:	3008      	adds	r0, #8
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	071a      	lsls	r2, r3, #28
 800678c:	bf04      	itt	eq
 800678e:	091b      	lsreq	r3, r3, #4
 8006790:	3004      	addeq	r0, #4
 8006792:	079a      	lsls	r2, r3, #30
 8006794:	bf04      	itt	eq
 8006796:	089b      	lsreq	r3, r3, #2
 8006798:	3002      	addeq	r0, #2
 800679a:	07da      	lsls	r2, r3, #31
 800679c:	d403      	bmi.n	80067a6 <__lo0bits+0x4e>
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	f100 0001 	add.w	r0, r0, #1
 80067a4:	d005      	beq.n	80067b2 <__lo0bits+0x5a>
 80067a6:	600b      	str	r3, [r1, #0]
 80067a8:	4770      	bx	lr
 80067aa:	4610      	mov	r0, r2
 80067ac:	e7e9      	b.n	8006782 <__lo0bits+0x2a>
 80067ae:	2000      	movs	r0, #0
 80067b0:	4770      	bx	lr
 80067b2:	2020      	movs	r0, #32
 80067b4:	4770      	bx	lr
	...

080067b8 <__i2b>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	460c      	mov	r4, r1
 80067bc:	2101      	movs	r1, #1
 80067be:	f7ff ff03 	bl	80065c8 <_Balloc>
 80067c2:	4602      	mov	r2, r0
 80067c4:	b928      	cbnz	r0, 80067d2 <__i2b+0x1a>
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <__i2b+0x24>)
 80067c8:	4805      	ldr	r0, [pc, #20]	; (80067e0 <__i2b+0x28>)
 80067ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067ce:	f000 fd35 	bl	800723c <__assert_func>
 80067d2:	2301      	movs	r3, #1
 80067d4:	6144      	str	r4, [r0, #20]
 80067d6:	6103      	str	r3, [r0, #16]
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	080075e3 	.word	0x080075e3
 80067e0:	08007654 	.word	0x08007654

080067e4 <__multiply>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	4691      	mov	r9, r2
 80067ea:	690a      	ldr	r2, [r1, #16]
 80067ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	bfb8      	it	lt
 80067f4:	460b      	movlt	r3, r1
 80067f6:	460c      	mov	r4, r1
 80067f8:	bfbc      	itt	lt
 80067fa:	464c      	movlt	r4, r9
 80067fc:	4699      	movlt	r9, r3
 80067fe:	6927      	ldr	r7, [r4, #16]
 8006800:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006804:	68a3      	ldr	r3, [r4, #8]
 8006806:	6861      	ldr	r1, [r4, #4]
 8006808:	eb07 060a 	add.w	r6, r7, sl
 800680c:	42b3      	cmp	r3, r6
 800680e:	b085      	sub	sp, #20
 8006810:	bfb8      	it	lt
 8006812:	3101      	addlt	r1, #1
 8006814:	f7ff fed8 	bl	80065c8 <_Balloc>
 8006818:	b930      	cbnz	r0, 8006828 <__multiply+0x44>
 800681a:	4602      	mov	r2, r0
 800681c:	4b44      	ldr	r3, [pc, #272]	; (8006930 <__multiply+0x14c>)
 800681e:	4845      	ldr	r0, [pc, #276]	; (8006934 <__multiply+0x150>)
 8006820:	f240 115d 	movw	r1, #349	; 0x15d
 8006824:	f000 fd0a 	bl	800723c <__assert_func>
 8006828:	f100 0514 	add.w	r5, r0, #20
 800682c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006830:	462b      	mov	r3, r5
 8006832:	2200      	movs	r2, #0
 8006834:	4543      	cmp	r3, r8
 8006836:	d321      	bcc.n	800687c <__multiply+0x98>
 8006838:	f104 0314 	add.w	r3, r4, #20
 800683c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006840:	f109 0314 	add.w	r3, r9, #20
 8006844:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006848:	9202      	str	r2, [sp, #8]
 800684a:	1b3a      	subs	r2, r7, r4
 800684c:	3a15      	subs	r2, #21
 800684e:	f022 0203 	bic.w	r2, r2, #3
 8006852:	3204      	adds	r2, #4
 8006854:	f104 0115 	add.w	r1, r4, #21
 8006858:	428f      	cmp	r7, r1
 800685a:	bf38      	it	cc
 800685c:	2204      	movcc	r2, #4
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	9a02      	ldr	r2, [sp, #8]
 8006862:	9303      	str	r3, [sp, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d80c      	bhi.n	8006882 <__multiply+0x9e>
 8006868:	2e00      	cmp	r6, #0
 800686a:	dd03      	ble.n	8006874 <__multiply+0x90>
 800686c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006870:	2b00      	cmp	r3, #0
 8006872:	d05a      	beq.n	800692a <__multiply+0x146>
 8006874:	6106      	str	r6, [r0, #16]
 8006876:	b005      	add	sp, #20
 8006878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687c:	f843 2b04 	str.w	r2, [r3], #4
 8006880:	e7d8      	b.n	8006834 <__multiply+0x50>
 8006882:	f8b3 a000 	ldrh.w	sl, [r3]
 8006886:	f1ba 0f00 	cmp.w	sl, #0
 800688a:	d024      	beq.n	80068d6 <__multiply+0xf2>
 800688c:	f104 0e14 	add.w	lr, r4, #20
 8006890:	46a9      	mov	r9, r5
 8006892:	f04f 0c00 	mov.w	ip, #0
 8006896:	f85e 2b04 	ldr.w	r2, [lr], #4
 800689a:	f8d9 1000 	ldr.w	r1, [r9]
 800689e:	fa1f fb82 	uxth.w	fp, r2
 80068a2:	b289      	uxth	r1, r1
 80068a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80068a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80068ac:	f8d9 2000 	ldr.w	r2, [r9]
 80068b0:	4461      	add	r1, ip
 80068b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80068ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068be:	b289      	uxth	r1, r1
 80068c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068c4:	4577      	cmp	r7, lr
 80068c6:	f849 1b04 	str.w	r1, [r9], #4
 80068ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068ce:	d8e2      	bhi.n	8006896 <__multiply+0xb2>
 80068d0:	9a01      	ldr	r2, [sp, #4]
 80068d2:	f845 c002 	str.w	ip, [r5, r2]
 80068d6:	9a03      	ldr	r2, [sp, #12]
 80068d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068dc:	3304      	adds	r3, #4
 80068de:	f1b9 0f00 	cmp.w	r9, #0
 80068e2:	d020      	beq.n	8006926 <__multiply+0x142>
 80068e4:	6829      	ldr	r1, [r5, #0]
 80068e6:	f104 0c14 	add.w	ip, r4, #20
 80068ea:	46ae      	mov	lr, r5
 80068ec:	f04f 0a00 	mov.w	sl, #0
 80068f0:	f8bc b000 	ldrh.w	fp, [ip]
 80068f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80068f8:	fb09 220b 	mla	r2, r9, fp, r2
 80068fc:	4492      	add	sl, r2
 80068fe:	b289      	uxth	r1, r1
 8006900:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006904:	f84e 1b04 	str.w	r1, [lr], #4
 8006908:	f85c 2b04 	ldr.w	r2, [ip], #4
 800690c:	f8be 1000 	ldrh.w	r1, [lr]
 8006910:	0c12      	lsrs	r2, r2, #16
 8006912:	fb09 1102 	mla	r1, r9, r2, r1
 8006916:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800691a:	4567      	cmp	r7, ip
 800691c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006920:	d8e6      	bhi.n	80068f0 <__multiply+0x10c>
 8006922:	9a01      	ldr	r2, [sp, #4]
 8006924:	50a9      	str	r1, [r5, r2]
 8006926:	3504      	adds	r5, #4
 8006928:	e79a      	b.n	8006860 <__multiply+0x7c>
 800692a:	3e01      	subs	r6, #1
 800692c:	e79c      	b.n	8006868 <__multiply+0x84>
 800692e:	bf00      	nop
 8006930:	080075e3 	.word	0x080075e3
 8006934:	08007654 	.word	0x08007654

08006938 <__pow5mult>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	4615      	mov	r5, r2
 800693e:	f012 0203 	ands.w	r2, r2, #3
 8006942:	4606      	mov	r6, r0
 8006944:	460f      	mov	r7, r1
 8006946:	d007      	beq.n	8006958 <__pow5mult+0x20>
 8006948:	4c25      	ldr	r4, [pc, #148]	; (80069e0 <__pow5mult+0xa8>)
 800694a:	3a01      	subs	r2, #1
 800694c:	2300      	movs	r3, #0
 800694e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006952:	f7ff fe9b 	bl	800668c <__multadd>
 8006956:	4607      	mov	r7, r0
 8006958:	10ad      	asrs	r5, r5, #2
 800695a:	d03d      	beq.n	80069d8 <__pow5mult+0xa0>
 800695c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800695e:	b97c      	cbnz	r4, 8006980 <__pow5mult+0x48>
 8006960:	2010      	movs	r0, #16
 8006962:	f7ff fe1b 	bl	800659c <malloc>
 8006966:	4602      	mov	r2, r0
 8006968:	6270      	str	r0, [r6, #36]	; 0x24
 800696a:	b928      	cbnz	r0, 8006978 <__pow5mult+0x40>
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <__pow5mult+0xac>)
 800696e:	481e      	ldr	r0, [pc, #120]	; (80069e8 <__pow5mult+0xb0>)
 8006970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006974:	f000 fc62 	bl	800723c <__assert_func>
 8006978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800697c:	6004      	str	r4, [r0, #0]
 800697e:	60c4      	str	r4, [r0, #12]
 8006980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006988:	b94c      	cbnz	r4, 800699e <__pow5mult+0x66>
 800698a:	f240 2171 	movw	r1, #625	; 0x271
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff ff12 	bl	80067b8 <__i2b>
 8006994:	2300      	movs	r3, #0
 8006996:	f8c8 0008 	str.w	r0, [r8, #8]
 800699a:	4604      	mov	r4, r0
 800699c:	6003      	str	r3, [r0, #0]
 800699e:	f04f 0900 	mov.w	r9, #0
 80069a2:	07eb      	lsls	r3, r5, #31
 80069a4:	d50a      	bpl.n	80069bc <__pow5mult+0x84>
 80069a6:	4639      	mov	r1, r7
 80069a8:	4622      	mov	r2, r4
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7ff ff1a 	bl	80067e4 <__multiply>
 80069b0:	4639      	mov	r1, r7
 80069b2:	4680      	mov	r8, r0
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff fe47 	bl	8006648 <_Bfree>
 80069ba:	4647      	mov	r7, r8
 80069bc:	106d      	asrs	r5, r5, #1
 80069be:	d00b      	beq.n	80069d8 <__pow5mult+0xa0>
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	b938      	cbnz	r0, 80069d4 <__pow5mult+0x9c>
 80069c4:	4622      	mov	r2, r4
 80069c6:	4621      	mov	r1, r4
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff ff0b 	bl	80067e4 <__multiply>
 80069ce:	6020      	str	r0, [r4, #0]
 80069d0:	f8c0 9000 	str.w	r9, [r0]
 80069d4:	4604      	mov	r4, r0
 80069d6:	e7e4      	b.n	80069a2 <__pow5mult+0x6a>
 80069d8:	4638      	mov	r0, r7
 80069da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069de:	bf00      	nop
 80069e0:	080077a0 	.word	0x080077a0
 80069e4:	08007571 	.word	0x08007571
 80069e8:	08007654 	.word	0x08007654

080069ec <__lshift>:
 80069ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	460c      	mov	r4, r1
 80069f2:	6849      	ldr	r1, [r1, #4]
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	4607      	mov	r7, r0
 80069fe:	4691      	mov	r9, r2
 8006a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a04:	f108 0601 	add.w	r6, r8, #1
 8006a08:	42b3      	cmp	r3, r6
 8006a0a:	db0b      	blt.n	8006a24 <__lshift+0x38>
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff fddb 	bl	80065c8 <_Balloc>
 8006a12:	4605      	mov	r5, r0
 8006a14:	b948      	cbnz	r0, 8006a2a <__lshift+0x3e>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b2a      	ldr	r3, [pc, #168]	; (8006ac4 <__lshift+0xd8>)
 8006a1a:	482b      	ldr	r0, [pc, #172]	; (8006ac8 <__lshift+0xdc>)
 8006a1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a20:	f000 fc0c 	bl	800723c <__assert_func>
 8006a24:	3101      	adds	r1, #1
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	e7ee      	b.n	8006a08 <__lshift+0x1c>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f100 0114 	add.w	r1, r0, #20
 8006a30:	f100 0210 	add.w	r2, r0, #16
 8006a34:	4618      	mov	r0, r3
 8006a36:	4553      	cmp	r3, sl
 8006a38:	db37      	blt.n	8006aaa <__lshift+0xbe>
 8006a3a:	6920      	ldr	r0, [r4, #16]
 8006a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a40:	f104 0314 	add.w	r3, r4, #20
 8006a44:	f019 091f 	ands.w	r9, r9, #31
 8006a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a50:	d02f      	beq.n	8006ab2 <__lshift+0xc6>
 8006a52:	f1c9 0e20 	rsb	lr, r9, #32
 8006a56:	468a      	mov	sl, r1
 8006a58:	f04f 0c00 	mov.w	ip, #0
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	fa02 f209 	lsl.w	r2, r2, r9
 8006a62:	ea42 020c 	orr.w	r2, r2, ip
 8006a66:	f84a 2b04 	str.w	r2, [sl], #4
 8006a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006a74:	d8f2      	bhi.n	8006a5c <__lshift+0x70>
 8006a76:	1b03      	subs	r3, r0, r4
 8006a78:	3b15      	subs	r3, #21
 8006a7a:	f023 0303 	bic.w	r3, r3, #3
 8006a7e:	3304      	adds	r3, #4
 8006a80:	f104 0215 	add.w	r2, r4, #21
 8006a84:	4290      	cmp	r0, r2
 8006a86:	bf38      	it	cc
 8006a88:	2304      	movcc	r3, #4
 8006a8a:	f841 c003 	str.w	ip, [r1, r3]
 8006a8e:	f1bc 0f00 	cmp.w	ip, #0
 8006a92:	d001      	beq.n	8006a98 <__lshift+0xac>
 8006a94:	f108 0602 	add.w	r6, r8, #2
 8006a98:	3e01      	subs	r6, #1
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	612e      	str	r6, [r5, #16]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	f7ff fdd2 	bl	8006648 <_Bfree>
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006aae:	3301      	adds	r3, #1
 8006ab0:	e7c1      	b.n	8006a36 <__lshift+0x4a>
 8006ab2:	3904      	subs	r1, #4
 8006ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ab8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006abc:	4298      	cmp	r0, r3
 8006abe:	d8f9      	bhi.n	8006ab4 <__lshift+0xc8>
 8006ac0:	e7ea      	b.n	8006a98 <__lshift+0xac>
 8006ac2:	bf00      	nop
 8006ac4:	080075e3 	.word	0x080075e3
 8006ac8:	08007654 	.word	0x08007654

08006acc <__mcmp>:
 8006acc:	b530      	push	{r4, r5, lr}
 8006ace:	6902      	ldr	r2, [r0, #16]
 8006ad0:	690c      	ldr	r4, [r1, #16]
 8006ad2:	1b12      	subs	r2, r2, r4
 8006ad4:	d10e      	bne.n	8006af4 <__mcmp+0x28>
 8006ad6:	f100 0314 	add.w	r3, r0, #20
 8006ada:	3114      	adds	r1, #20
 8006adc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ae0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ae4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ae8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006aec:	42a5      	cmp	r5, r4
 8006aee:	d003      	beq.n	8006af8 <__mcmp+0x2c>
 8006af0:	d305      	bcc.n	8006afe <__mcmp+0x32>
 8006af2:	2201      	movs	r2, #1
 8006af4:	4610      	mov	r0, r2
 8006af6:	bd30      	pop	{r4, r5, pc}
 8006af8:	4283      	cmp	r3, r0
 8006afa:	d3f3      	bcc.n	8006ae4 <__mcmp+0x18>
 8006afc:	e7fa      	b.n	8006af4 <__mcmp+0x28>
 8006afe:	f04f 32ff 	mov.w	r2, #4294967295
 8006b02:	e7f7      	b.n	8006af4 <__mcmp+0x28>

08006b04 <__mdiff>:
 8006b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	460c      	mov	r4, r1
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4690      	mov	r8, r2
 8006b12:	f7ff ffdb 	bl	8006acc <__mcmp>
 8006b16:	1e05      	subs	r5, r0, #0
 8006b18:	d110      	bne.n	8006b3c <__mdiff+0x38>
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff fd53 	bl	80065c8 <_Balloc>
 8006b22:	b930      	cbnz	r0, 8006b32 <__mdiff+0x2e>
 8006b24:	4b3a      	ldr	r3, [pc, #232]	; (8006c10 <__mdiff+0x10c>)
 8006b26:	4602      	mov	r2, r0
 8006b28:	f240 2132 	movw	r1, #562	; 0x232
 8006b2c:	4839      	ldr	r0, [pc, #228]	; (8006c14 <__mdiff+0x110>)
 8006b2e:	f000 fb85 	bl	800723c <__assert_func>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	bfa4      	itt	ge
 8006b3e:	4643      	movge	r3, r8
 8006b40:	46a0      	movge	r8, r4
 8006b42:	4630      	mov	r0, r6
 8006b44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b48:	bfa6      	itte	ge
 8006b4a:	461c      	movge	r4, r3
 8006b4c:	2500      	movge	r5, #0
 8006b4e:	2501      	movlt	r5, #1
 8006b50:	f7ff fd3a 	bl	80065c8 <_Balloc>
 8006b54:	b920      	cbnz	r0, 8006b60 <__mdiff+0x5c>
 8006b56:	4b2e      	ldr	r3, [pc, #184]	; (8006c10 <__mdiff+0x10c>)
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b5e:	e7e5      	b.n	8006b2c <__mdiff+0x28>
 8006b60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b64:	6926      	ldr	r6, [r4, #16]
 8006b66:	60c5      	str	r5, [r0, #12]
 8006b68:	f104 0914 	add.w	r9, r4, #20
 8006b6c:	f108 0514 	add.w	r5, r8, #20
 8006b70:	f100 0e14 	add.w	lr, r0, #20
 8006b74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b7c:	f108 0210 	add.w	r2, r8, #16
 8006b80:	46f2      	mov	sl, lr
 8006b82:	2100      	movs	r1, #0
 8006b84:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b8c:	fa1f f883 	uxth.w	r8, r3
 8006b90:	fa11 f18b 	uxtah	r1, r1, fp
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	eba1 0808 	sub.w	r8, r1, r8
 8006b9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ba2:	fa1f f888 	uxth.w	r8, r8
 8006ba6:	1419      	asrs	r1, r3, #16
 8006ba8:	454e      	cmp	r6, r9
 8006baa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006bae:	f84a 3b04 	str.w	r3, [sl], #4
 8006bb2:	d8e7      	bhi.n	8006b84 <__mdiff+0x80>
 8006bb4:	1b33      	subs	r3, r6, r4
 8006bb6:	3b15      	subs	r3, #21
 8006bb8:	f023 0303 	bic.w	r3, r3, #3
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	3415      	adds	r4, #21
 8006bc0:	42a6      	cmp	r6, r4
 8006bc2:	bf38      	it	cc
 8006bc4:	2304      	movcc	r3, #4
 8006bc6:	441d      	add	r5, r3
 8006bc8:	4473      	add	r3, lr
 8006bca:	469e      	mov	lr, r3
 8006bcc:	462e      	mov	r6, r5
 8006bce:	4566      	cmp	r6, ip
 8006bd0:	d30e      	bcc.n	8006bf0 <__mdiff+0xec>
 8006bd2:	f10c 0203 	add.w	r2, ip, #3
 8006bd6:	1b52      	subs	r2, r2, r5
 8006bd8:	f022 0203 	bic.w	r2, r2, #3
 8006bdc:	3d03      	subs	r5, #3
 8006bde:	45ac      	cmp	ip, r5
 8006be0:	bf38      	it	cc
 8006be2:	2200      	movcc	r2, #0
 8006be4:	441a      	add	r2, r3
 8006be6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006bea:	b17b      	cbz	r3, 8006c0c <__mdiff+0x108>
 8006bec:	6107      	str	r7, [r0, #16]
 8006bee:	e7a3      	b.n	8006b38 <__mdiff+0x34>
 8006bf0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006bf4:	fa11 f288 	uxtah	r2, r1, r8
 8006bf8:	1414      	asrs	r4, r2, #16
 8006bfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c04:	f84e 2b04 	str.w	r2, [lr], #4
 8006c08:	1421      	asrs	r1, r4, #16
 8006c0a:	e7e0      	b.n	8006bce <__mdiff+0xca>
 8006c0c:	3f01      	subs	r7, #1
 8006c0e:	e7ea      	b.n	8006be6 <__mdiff+0xe2>
 8006c10:	080075e3 	.word	0x080075e3
 8006c14:	08007654 	.word	0x08007654

08006c18 <__d2b>:
 8006c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	2101      	movs	r1, #1
 8006c20:	ec57 6b10 	vmov	r6, r7, d0
 8006c24:	4690      	mov	r8, r2
 8006c26:	f7ff fccf 	bl	80065c8 <_Balloc>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	b930      	cbnz	r0, 8006c3c <__d2b+0x24>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <__d2b+0xb0>)
 8006c32:	4826      	ldr	r0, [pc, #152]	; (8006ccc <__d2b+0xb4>)
 8006c34:	f240 310a 	movw	r1, #778	; 0x30a
 8006c38:	f000 fb00 	bl	800723c <__assert_func>
 8006c3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c44:	bb35      	cbnz	r5, 8006c94 <__d2b+0x7c>
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	d028      	beq.n	8006c9e <__d2b+0x86>
 8006c4c:	4668      	mov	r0, sp
 8006c4e:	9600      	str	r6, [sp, #0]
 8006c50:	f7ff fd82 	bl	8006758 <__lo0bits>
 8006c54:	9900      	ldr	r1, [sp, #0]
 8006c56:	b300      	cbz	r0, 8006c9a <__d2b+0x82>
 8006c58:	9a01      	ldr	r2, [sp, #4]
 8006c5a:	f1c0 0320 	rsb	r3, r0, #32
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	430b      	orrs	r3, r1
 8006c64:	40c2      	lsrs	r2, r0
 8006c66:	6163      	str	r3, [r4, #20]
 8006c68:	9201      	str	r2, [sp, #4]
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	61a3      	str	r3, [r4, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bf14      	ite	ne
 8006c72:	2202      	movne	r2, #2
 8006c74:	2201      	moveq	r2, #1
 8006c76:	6122      	str	r2, [r4, #16]
 8006c78:	b1d5      	cbz	r5, 8006cb0 <__d2b+0x98>
 8006c7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c7e:	4405      	add	r5, r0
 8006c80:	f8c9 5000 	str.w	r5, [r9]
 8006c84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c88:	f8c8 0000 	str.w	r0, [r8]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	b003      	add	sp, #12
 8006c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c98:	e7d5      	b.n	8006c46 <__d2b+0x2e>
 8006c9a:	6161      	str	r1, [r4, #20]
 8006c9c:	e7e5      	b.n	8006c6a <__d2b+0x52>
 8006c9e:	a801      	add	r0, sp, #4
 8006ca0:	f7ff fd5a 	bl	8006758 <__lo0bits>
 8006ca4:	9b01      	ldr	r3, [sp, #4]
 8006ca6:	6163      	str	r3, [r4, #20]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	6122      	str	r2, [r4, #16]
 8006cac:	3020      	adds	r0, #32
 8006cae:	e7e3      	b.n	8006c78 <__d2b+0x60>
 8006cb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cb8:	f8c9 0000 	str.w	r0, [r9]
 8006cbc:	6918      	ldr	r0, [r3, #16]
 8006cbe:	f7ff fd2b 	bl	8006718 <__hi0bits>
 8006cc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cc6:	e7df      	b.n	8006c88 <__d2b+0x70>
 8006cc8:	080075e3 	.word	0x080075e3
 8006ccc:	08007654 	.word	0x08007654

08006cd0 <_calloc_r>:
 8006cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cd2:	fba1 2402 	umull	r2, r4, r1, r2
 8006cd6:	b94c      	cbnz	r4, 8006cec <_calloc_r+0x1c>
 8006cd8:	4611      	mov	r1, r2
 8006cda:	9201      	str	r2, [sp, #4]
 8006cdc:	f000 f87a 	bl	8006dd4 <_malloc_r>
 8006ce0:	9a01      	ldr	r2, [sp, #4]
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	b930      	cbnz	r0, 8006cf4 <_calloc_r+0x24>
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	b003      	add	sp, #12
 8006cea:	bd30      	pop	{r4, r5, pc}
 8006cec:	220c      	movs	r2, #12
 8006cee:	6002      	str	r2, [r0, #0]
 8006cf0:	2500      	movs	r5, #0
 8006cf2:	e7f8      	b.n	8006ce6 <_calloc_r+0x16>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	f7fd fdf3 	bl	80048e0 <memset>
 8006cfa:	e7f4      	b.n	8006ce6 <_calloc_r+0x16>

08006cfc <_free_r>:
 8006cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	d044      	beq.n	8006d8c <_free_r+0x90>
 8006d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d06:	9001      	str	r0, [sp, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d0e:	bfb8      	it	lt
 8006d10:	18e4      	addlt	r4, r4, r3
 8006d12:	f000 fb19 	bl	8007348 <__malloc_lock>
 8006d16:	4a1e      	ldr	r2, [pc, #120]	; (8006d90 <_free_r+0x94>)
 8006d18:	9801      	ldr	r0, [sp, #4]
 8006d1a:	6813      	ldr	r3, [r2, #0]
 8006d1c:	b933      	cbnz	r3, 8006d2c <_free_r+0x30>
 8006d1e:	6063      	str	r3, [r4, #4]
 8006d20:	6014      	str	r4, [r2, #0]
 8006d22:	b003      	add	sp, #12
 8006d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d28:	f000 bb14 	b.w	8007354 <__malloc_unlock>
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d908      	bls.n	8006d42 <_free_r+0x46>
 8006d30:	6825      	ldr	r5, [r4, #0]
 8006d32:	1961      	adds	r1, r4, r5
 8006d34:	428b      	cmp	r3, r1
 8006d36:	bf01      	itttt	eq
 8006d38:	6819      	ldreq	r1, [r3, #0]
 8006d3a:	685b      	ldreq	r3, [r3, #4]
 8006d3c:	1949      	addeq	r1, r1, r5
 8006d3e:	6021      	streq	r1, [r4, #0]
 8006d40:	e7ed      	b.n	8006d1e <_free_r+0x22>
 8006d42:	461a      	mov	r2, r3
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	b10b      	cbz	r3, 8006d4c <_free_r+0x50>
 8006d48:	42a3      	cmp	r3, r4
 8006d4a:	d9fa      	bls.n	8006d42 <_free_r+0x46>
 8006d4c:	6811      	ldr	r1, [r2, #0]
 8006d4e:	1855      	adds	r5, r2, r1
 8006d50:	42a5      	cmp	r5, r4
 8006d52:	d10b      	bne.n	8006d6c <_free_r+0x70>
 8006d54:	6824      	ldr	r4, [r4, #0]
 8006d56:	4421      	add	r1, r4
 8006d58:	1854      	adds	r4, r2, r1
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	d1e0      	bne.n	8006d22 <_free_r+0x26>
 8006d60:	681c      	ldr	r4, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	6053      	str	r3, [r2, #4]
 8006d66:	4421      	add	r1, r4
 8006d68:	6011      	str	r1, [r2, #0]
 8006d6a:	e7da      	b.n	8006d22 <_free_r+0x26>
 8006d6c:	d902      	bls.n	8006d74 <_free_r+0x78>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	6003      	str	r3, [r0, #0]
 8006d72:	e7d6      	b.n	8006d22 <_free_r+0x26>
 8006d74:	6825      	ldr	r5, [r4, #0]
 8006d76:	1961      	adds	r1, r4, r5
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf04      	itt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	bf04      	itt	eq
 8006d84:	1949      	addeq	r1, r1, r5
 8006d86:	6021      	streq	r1, [r4, #0]
 8006d88:	6054      	str	r4, [r2, #4]
 8006d8a:	e7ca      	b.n	8006d22 <_free_r+0x26>
 8006d8c:	b003      	add	sp, #12
 8006d8e:	bd30      	pop	{r4, r5, pc}
 8006d90:	2000033c 	.word	0x2000033c

08006d94 <sbrk_aligned>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4e0e      	ldr	r6, [pc, #56]	; (8006dd0 <sbrk_aligned+0x3c>)
 8006d98:	460c      	mov	r4, r1
 8006d9a:	6831      	ldr	r1, [r6, #0]
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	b911      	cbnz	r1, 8006da6 <sbrk_aligned+0x12>
 8006da0:	f000 f9e6 	bl	8007170 <_sbrk_r>
 8006da4:	6030      	str	r0, [r6, #0]
 8006da6:	4621      	mov	r1, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	f000 f9e1 	bl	8007170 <_sbrk_r>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d00a      	beq.n	8006dc8 <sbrk_aligned+0x34>
 8006db2:	1cc4      	adds	r4, r0, #3
 8006db4:	f024 0403 	bic.w	r4, r4, #3
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d007      	beq.n	8006dcc <sbrk_aligned+0x38>
 8006dbc:	1a21      	subs	r1, r4, r0
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 f9d6 	bl	8007170 <_sbrk_r>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d101      	bne.n	8006dcc <sbrk_aligned+0x38>
 8006dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	20000340 	.word	0x20000340

08006dd4 <_malloc_r>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	1ccd      	adds	r5, r1, #3
 8006dda:	f025 0503 	bic.w	r5, r5, #3
 8006dde:	3508      	adds	r5, #8
 8006de0:	2d0c      	cmp	r5, #12
 8006de2:	bf38      	it	cc
 8006de4:	250c      	movcc	r5, #12
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	4607      	mov	r7, r0
 8006dea:	db01      	blt.n	8006df0 <_malloc_r+0x1c>
 8006dec:	42a9      	cmp	r1, r5
 8006dee:	d905      	bls.n	8006dfc <_malloc_r+0x28>
 8006df0:	230c      	movs	r3, #12
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	2600      	movs	r6, #0
 8006df6:	4630      	mov	r0, r6
 8006df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfc:	4e2e      	ldr	r6, [pc, #184]	; (8006eb8 <_malloc_r+0xe4>)
 8006dfe:	f000 faa3 	bl	8007348 <__malloc_lock>
 8006e02:	6833      	ldr	r3, [r6, #0]
 8006e04:	461c      	mov	r4, r3
 8006e06:	bb34      	cbnz	r4, 8006e56 <_malloc_r+0x82>
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f7ff ffc2 	bl	8006d94 <sbrk_aligned>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	4604      	mov	r4, r0
 8006e14:	d14d      	bne.n	8006eb2 <_malloc_r+0xde>
 8006e16:	6834      	ldr	r4, [r6, #0]
 8006e18:	4626      	mov	r6, r4
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	d140      	bne.n	8006ea0 <_malloc_r+0xcc>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	4631      	mov	r1, r6
 8006e22:	4638      	mov	r0, r7
 8006e24:	eb04 0803 	add.w	r8, r4, r3
 8006e28:	f000 f9a2 	bl	8007170 <_sbrk_r>
 8006e2c:	4580      	cmp	r8, r0
 8006e2e:	d13a      	bne.n	8006ea6 <_malloc_r+0xd2>
 8006e30:	6821      	ldr	r1, [r4, #0]
 8006e32:	3503      	adds	r5, #3
 8006e34:	1a6d      	subs	r5, r5, r1
 8006e36:	f025 0503 	bic.w	r5, r5, #3
 8006e3a:	3508      	adds	r5, #8
 8006e3c:	2d0c      	cmp	r5, #12
 8006e3e:	bf38      	it	cc
 8006e40:	250c      	movcc	r5, #12
 8006e42:	4629      	mov	r1, r5
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7ff ffa5 	bl	8006d94 <sbrk_aligned>
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d02b      	beq.n	8006ea6 <_malloc_r+0xd2>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	442b      	add	r3, r5
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	e00e      	b.n	8006e74 <_malloc_r+0xa0>
 8006e56:	6822      	ldr	r2, [r4, #0]
 8006e58:	1b52      	subs	r2, r2, r5
 8006e5a:	d41e      	bmi.n	8006e9a <_malloc_r+0xc6>
 8006e5c:	2a0b      	cmp	r2, #11
 8006e5e:	d916      	bls.n	8006e8e <_malloc_r+0xba>
 8006e60:	1961      	adds	r1, r4, r5
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	6025      	str	r5, [r4, #0]
 8006e66:	bf18      	it	ne
 8006e68:	6059      	strne	r1, [r3, #4]
 8006e6a:	6863      	ldr	r3, [r4, #4]
 8006e6c:	bf08      	it	eq
 8006e6e:	6031      	streq	r1, [r6, #0]
 8006e70:	5162      	str	r2, [r4, r5]
 8006e72:	604b      	str	r3, [r1, #4]
 8006e74:	4638      	mov	r0, r7
 8006e76:	f104 060b 	add.w	r6, r4, #11
 8006e7a:	f000 fa6b 	bl	8007354 <__malloc_unlock>
 8006e7e:	f026 0607 	bic.w	r6, r6, #7
 8006e82:	1d23      	adds	r3, r4, #4
 8006e84:	1af2      	subs	r2, r6, r3
 8006e86:	d0b6      	beq.n	8006df6 <_malloc_r+0x22>
 8006e88:	1b9b      	subs	r3, r3, r6
 8006e8a:	50a3      	str	r3, [r4, r2]
 8006e8c:	e7b3      	b.n	8006df6 <_malloc_r+0x22>
 8006e8e:	6862      	ldr	r2, [r4, #4]
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	bf0c      	ite	eq
 8006e94:	6032      	streq	r2, [r6, #0]
 8006e96:	605a      	strne	r2, [r3, #4]
 8006e98:	e7ec      	b.n	8006e74 <_malloc_r+0xa0>
 8006e9a:	4623      	mov	r3, r4
 8006e9c:	6864      	ldr	r4, [r4, #4]
 8006e9e:	e7b2      	b.n	8006e06 <_malloc_r+0x32>
 8006ea0:	4634      	mov	r4, r6
 8006ea2:	6876      	ldr	r6, [r6, #4]
 8006ea4:	e7b9      	b.n	8006e1a <_malloc_r+0x46>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	4638      	mov	r0, r7
 8006eac:	f000 fa52 	bl	8007354 <__malloc_unlock>
 8006eb0:	e7a1      	b.n	8006df6 <_malloc_r+0x22>
 8006eb2:	6025      	str	r5, [r4, #0]
 8006eb4:	e7de      	b.n	8006e74 <_malloc_r+0xa0>
 8006eb6:	bf00      	nop
 8006eb8:	2000033c 	.word	0x2000033c

08006ebc <__sfputc_r>:
 8006ebc:	6893      	ldr	r3, [r2, #8]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	b410      	push	{r4}
 8006ec4:	6093      	str	r3, [r2, #8]
 8006ec6:	da08      	bge.n	8006eda <__sfputc_r+0x1e>
 8006ec8:	6994      	ldr	r4, [r2, #24]
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	db01      	blt.n	8006ed2 <__sfputc_r+0x16>
 8006ece:	290a      	cmp	r1, #10
 8006ed0:	d103      	bne.n	8006eda <__sfputc_r+0x1e>
 8006ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed6:	f7fe ba03 	b.w	80052e0 <__swbuf_r>
 8006eda:	6813      	ldr	r3, [r2, #0]
 8006edc:	1c58      	adds	r0, r3, #1
 8006ede:	6010      	str	r0, [r2, #0]
 8006ee0:	7019      	strb	r1, [r3, #0]
 8006ee2:	4608      	mov	r0, r1
 8006ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <__sfputs_r>:
 8006eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eec:	4606      	mov	r6, r0
 8006eee:	460f      	mov	r7, r1
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	18d5      	adds	r5, r2, r3
 8006ef4:	42ac      	cmp	r4, r5
 8006ef6:	d101      	bne.n	8006efc <__sfputs_r+0x12>
 8006ef8:	2000      	movs	r0, #0
 8006efa:	e007      	b.n	8006f0c <__sfputs_r+0x22>
 8006efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f00:	463a      	mov	r2, r7
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7ff ffda 	bl	8006ebc <__sfputc_r>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d1f3      	bne.n	8006ef4 <__sfputs_r+0xa>
 8006f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f10 <_vfiprintf_r>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	460d      	mov	r5, r1
 8006f16:	b09d      	sub	sp, #116	; 0x74
 8006f18:	4614      	mov	r4, r2
 8006f1a:	4698      	mov	r8, r3
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	b118      	cbz	r0, 8006f28 <_vfiprintf_r+0x18>
 8006f20:	6983      	ldr	r3, [r0, #24]
 8006f22:	b90b      	cbnz	r3, 8006f28 <_vfiprintf_r+0x18>
 8006f24:	f7ff fa30 	bl	8006388 <__sinit>
 8006f28:	4b89      	ldr	r3, [pc, #548]	; (8007150 <_vfiprintf_r+0x240>)
 8006f2a:	429d      	cmp	r5, r3
 8006f2c:	d11b      	bne.n	8006f66 <_vfiprintf_r+0x56>
 8006f2e:	6875      	ldr	r5, [r6, #4]
 8006f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f32:	07d9      	lsls	r1, r3, #31
 8006f34:	d405      	bmi.n	8006f42 <_vfiprintf_r+0x32>
 8006f36:	89ab      	ldrh	r3, [r5, #12]
 8006f38:	059a      	lsls	r2, r3, #22
 8006f3a:	d402      	bmi.n	8006f42 <_vfiprintf_r+0x32>
 8006f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f3e:	f7ff fac6 	bl	80064ce <__retarget_lock_acquire_recursive>
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	071b      	lsls	r3, r3, #28
 8006f46:	d501      	bpl.n	8006f4c <_vfiprintf_r+0x3c>
 8006f48:	692b      	ldr	r3, [r5, #16]
 8006f4a:	b9eb      	cbnz	r3, 8006f88 <_vfiprintf_r+0x78>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f7fe fa18 	bl	8005384 <__swsetup_r>
 8006f54:	b1c0      	cbz	r0, 8006f88 <_vfiprintf_r+0x78>
 8006f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f58:	07dc      	lsls	r4, r3, #31
 8006f5a:	d50e      	bpl.n	8006f7a <_vfiprintf_r+0x6a>
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	b01d      	add	sp, #116	; 0x74
 8006f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f66:	4b7b      	ldr	r3, [pc, #492]	; (8007154 <_vfiprintf_r+0x244>)
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	d101      	bne.n	8006f70 <_vfiprintf_r+0x60>
 8006f6c:	68b5      	ldr	r5, [r6, #8]
 8006f6e:	e7df      	b.n	8006f30 <_vfiprintf_r+0x20>
 8006f70:	4b79      	ldr	r3, [pc, #484]	; (8007158 <_vfiprintf_r+0x248>)
 8006f72:	429d      	cmp	r5, r3
 8006f74:	bf08      	it	eq
 8006f76:	68f5      	ldreq	r5, [r6, #12]
 8006f78:	e7da      	b.n	8006f30 <_vfiprintf_r+0x20>
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	0598      	lsls	r0, r3, #22
 8006f7e:	d4ed      	bmi.n	8006f5c <_vfiprintf_r+0x4c>
 8006f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f82:	f7ff faa5 	bl	80064d0 <__retarget_lock_release_recursive>
 8006f86:	e7e9      	b.n	8006f5c <_vfiprintf_r+0x4c>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f8c:	2320      	movs	r3, #32
 8006f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f96:	2330      	movs	r3, #48	; 0x30
 8006f98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800715c <_vfiprintf_r+0x24c>
 8006f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fa0:	f04f 0901 	mov.w	r9, #1
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	469a      	mov	sl, r3
 8006fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fac:	b10a      	cbz	r2, 8006fb2 <_vfiprintf_r+0xa2>
 8006fae:	2a25      	cmp	r2, #37	; 0x25
 8006fb0:	d1f9      	bne.n	8006fa6 <_vfiprintf_r+0x96>
 8006fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8006fb6:	d00b      	beq.n	8006fd0 <_vfiprintf_r+0xc0>
 8006fb8:	465b      	mov	r3, fp
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7ff ff93 	bl	8006eea <__sfputs_r>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f000 80aa 	beq.w	800711e <_vfiprintf_r+0x20e>
 8006fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fcc:	445a      	add	r2, fp
 8006fce:	9209      	str	r2, [sp, #36]	; 0x24
 8006fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80a2 	beq.w	800711e <_vfiprintf_r+0x20e>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fe4:	f10a 0a01 	add.w	sl, sl, #1
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	9307      	str	r3, [sp, #28]
 8006fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ff2:	4654      	mov	r4, sl
 8006ff4:	2205      	movs	r2, #5
 8006ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffa:	4858      	ldr	r0, [pc, #352]	; (800715c <_vfiprintf_r+0x24c>)
 8006ffc:	f7f9 f8f8 	bl	80001f0 <memchr>
 8007000:	9a04      	ldr	r2, [sp, #16]
 8007002:	b9d8      	cbnz	r0, 800703c <_vfiprintf_r+0x12c>
 8007004:	06d1      	lsls	r1, r2, #27
 8007006:	bf44      	itt	mi
 8007008:	2320      	movmi	r3, #32
 800700a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800700e:	0713      	lsls	r3, r2, #28
 8007010:	bf44      	itt	mi
 8007012:	232b      	movmi	r3, #43	; 0x2b
 8007014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007018:	f89a 3000 	ldrb.w	r3, [sl]
 800701c:	2b2a      	cmp	r3, #42	; 0x2a
 800701e:	d015      	beq.n	800704c <_vfiprintf_r+0x13c>
 8007020:	9a07      	ldr	r2, [sp, #28]
 8007022:	4654      	mov	r4, sl
 8007024:	2000      	movs	r0, #0
 8007026:	f04f 0c0a 	mov.w	ip, #10
 800702a:	4621      	mov	r1, r4
 800702c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007030:	3b30      	subs	r3, #48	; 0x30
 8007032:	2b09      	cmp	r3, #9
 8007034:	d94e      	bls.n	80070d4 <_vfiprintf_r+0x1c4>
 8007036:	b1b0      	cbz	r0, 8007066 <_vfiprintf_r+0x156>
 8007038:	9207      	str	r2, [sp, #28]
 800703a:	e014      	b.n	8007066 <_vfiprintf_r+0x156>
 800703c:	eba0 0308 	sub.w	r3, r0, r8
 8007040:	fa09 f303 	lsl.w	r3, r9, r3
 8007044:	4313      	orrs	r3, r2
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	46a2      	mov	sl, r4
 800704a:	e7d2      	b.n	8006ff2 <_vfiprintf_r+0xe2>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	1d19      	adds	r1, r3, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	9103      	str	r1, [sp, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	bfbb      	ittet	lt
 8007058:	425b      	neglt	r3, r3
 800705a:	f042 0202 	orrlt.w	r2, r2, #2
 800705e:	9307      	strge	r3, [sp, #28]
 8007060:	9307      	strlt	r3, [sp, #28]
 8007062:	bfb8      	it	lt
 8007064:	9204      	strlt	r2, [sp, #16]
 8007066:	7823      	ldrb	r3, [r4, #0]
 8007068:	2b2e      	cmp	r3, #46	; 0x2e
 800706a:	d10c      	bne.n	8007086 <_vfiprintf_r+0x176>
 800706c:	7863      	ldrb	r3, [r4, #1]
 800706e:	2b2a      	cmp	r3, #42	; 0x2a
 8007070:	d135      	bne.n	80070de <_vfiprintf_r+0x1ce>
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	1d1a      	adds	r2, r3, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	9203      	str	r2, [sp, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	bfb8      	it	lt
 800707e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007082:	3402      	adds	r4, #2
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800716c <_vfiprintf_r+0x25c>
 800708a:	7821      	ldrb	r1, [r4, #0]
 800708c:	2203      	movs	r2, #3
 800708e:	4650      	mov	r0, sl
 8007090:	f7f9 f8ae 	bl	80001f0 <memchr>
 8007094:	b140      	cbz	r0, 80070a8 <_vfiprintf_r+0x198>
 8007096:	2340      	movs	r3, #64	; 0x40
 8007098:	eba0 000a 	sub.w	r0, r0, sl
 800709c:	fa03 f000 	lsl.w	r0, r3, r0
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	4303      	orrs	r3, r0
 80070a4:	3401      	adds	r4, #1
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ac:	482c      	ldr	r0, [pc, #176]	; (8007160 <_vfiprintf_r+0x250>)
 80070ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070b2:	2206      	movs	r2, #6
 80070b4:	f7f9 f89c 	bl	80001f0 <memchr>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d03f      	beq.n	800713c <_vfiprintf_r+0x22c>
 80070bc:	4b29      	ldr	r3, [pc, #164]	; (8007164 <_vfiprintf_r+0x254>)
 80070be:	bb1b      	cbnz	r3, 8007108 <_vfiprintf_r+0x1f8>
 80070c0:	9b03      	ldr	r3, [sp, #12]
 80070c2:	3307      	adds	r3, #7
 80070c4:	f023 0307 	bic.w	r3, r3, #7
 80070c8:	3308      	adds	r3, #8
 80070ca:	9303      	str	r3, [sp, #12]
 80070cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ce:	443b      	add	r3, r7
 80070d0:	9309      	str	r3, [sp, #36]	; 0x24
 80070d2:	e767      	b.n	8006fa4 <_vfiprintf_r+0x94>
 80070d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80070d8:	460c      	mov	r4, r1
 80070da:	2001      	movs	r0, #1
 80070dc:	e7a5      	b.n	800702a <_vfiprintf_r+0x11a>
 80070de:	2300      	movs	r3, #0
 80070e0:	3401      	adds	r4, #1
 80070e2:	9305      	str	r3, [sp, #20]
 80070e4:	4619      	mov	r1, r3
 80070e6:	f04f 0c0a 	mov.w	ip, #10
 80070ea:	4620      	mov	r0, r4
 80070ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070f0:	3a30      	subs	r2, #48	; 0x30
 80070f2:	2a09      	cmp	r2, #9
 80070f4:	d903      	bls.n	80070fe <_vfiprintf_r+0x1ee>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0c5      	beq.n	8007086 <_vfiprintf_r+0x176>
 80070fa:	9105      	str	r1, [sp, #20]
 80070fc:	e7c3      	b.n	8007086 <_vfiprintf_r+0x176>
 80070fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007102:	4604      	mov	r4, r0
 8007104:	2301      	movs	r3, #1
 8007106:	e7f0      	b.n	80070ea <_vfiprintf_r+0x1da>
 8007108:	ab03      	add	r3, sp, #12
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	462a      	mov	r2, r5
 800710e:	4b16      	ldr	r3, [pc, #88]	; (8007168 <_vfiprintf_r+0x258>)
 8007110:	a904      	add	r1, sp, #16
 8007112:	4630      	mov	r0, r6
 8007114:	f7fd fc8c 	bl	8004a30 <_printf_float>
 8007118:	4607      	mov	r7, r0
 800711a:	1c78      	adds	r0, r7, #1
 800711c:	d1d6      	bne.n	80070cc <_vfiprintf_r+0x1bc>
 800711e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007120:	07d9      	lsls	r1, r3, #31
 8007122:	d405      	bmi.n	8007130 <_vfiprintf_r+0x220>
 8007124:	89ab      	ldrh	r3, [r5, #12]
 8007126:	059a      	lsls	r2, r3, #22
 8007128:	d402      	bmi.n	8007130 <_vfiprintf_r+0x220>
 800712a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800712c:	f7ff f9d0 	bl	80064d0 <__retarget_lock_release_recursive>
 8007130:	89ab      	ldrh	r3, [r5, #12]
 8007132:	065b      	lsls	r3, r3, #25
 8007134:	f53f af12 	bmi.w	8006f5c <_vfiprintf_r+0x4c>
 8007138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800713a:	e711      	b.n	8006f60 <_vfiprintf_r+0x50>
 800713c:	ab03      	add	r3, sp, #12
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	462a      	mov	r2, r5
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <_vfiprintf_r+0x258>)
 8007144:	a904      	add	r1, sp, #16
 8007146:	4630      	mov	r0, r6
 8007148:	f7fd ff16 	bl	8004f78 <_printf_i>
 800714c:	e7e4      	b.n	8007118 <_vfiprintf_r+0x208>
 800714e:	bf00      	nop
 8007150:	08007614 	.word	0x08007614
 8007154:	08007634 	.word	0x08007634
 8007158:	080075f4 	.word	0x080075f4
 800715c:	080077ac 	.word	0x080077ac
 8007160:	080077b6 	.word	0x080077b6
 8007164:	08004a31 	.word	0x08004a31
 8007168:	08006eeb 	.word	0x08006eeb
 800716c:	080077b2 	.word	0x080077b2

08007170 <_sbrk_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4d06      	ldr	r5, [pc, #24]	; (800718c <_sbrk_r+0x1c>)
 8007174:	2300      	movs	r3, #0
 8007176:	4604      	mov	r4, r0
 8007178:	4608      	mov	r0, r1
 800717a:	602b      	str	r3, [r5, #0]
 800717c:	f7fa fb6a 	bl	8001854 <_sbrk>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_sbrk_r+0x1a>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_sbrk_r+0x1a>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	20000344 	.word	0x20000344

08007190 <__sread>:
 8007190:	b510      	push	{r4, lr}
 8007192:	460c      	mov	r4, r1
 8007194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007198:	f000 f8e2 	bl	8007360 <_read_r>
 800719c:	2800      	cmp	r0, #0
 800719e:	bfab      	itete	ge
 80071a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071a2:	89a3      	ldrhlt	r3, [r4, #12]
 80071a4:	181b      	addge	r3, r3, r0
 80071a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071aa:	bfac      	ite	ge
 80071ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ae:	81a3      	strhlt	r3, [r4, #12]
 80071b0:	bd10      	pop	{r4, pc}

080071b2 <__swrite>:
 80071b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	461f      	mov	r7, r3
 80071b8:	898b      	ldrh	r3, [r1, #12]
 80071ba:	05db      	lsls	r3, r3, #23
 80071bc:	4605      	mov	r5, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	4616      	mov	r6, r2
 80071c2:	d505      	bpl.n	80071d0 <__swrite+0x1e>
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	2302      	movs	r3, #2
 80071ca:	2200      	movs	r2, #0
 80071cc:	f000 f898 	bl	8007300 <_lseek_r>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	4632      	mov	r2, r6
 80071de:	463b      	mov	r3, r7
 80071e0:	4628      	mov	r0, r5
 80071e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	f000 b817 	b.w	8007218 <_write_r>

080071ea <__sseek>:
 80071ea:	b510      	push	{r4, lr}
 80071ec:	460c      	mov	r4, r1
 80071ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f2:	f000 f885 	bl	8007300 <_lseek_r>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	bf15      	itete	ne
 80071fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007206:	81a3      	strheq	r3, [r4, #12]
 8007208:	bf18      	it	ne
 800720a:	81a3      	strhne	r3, [r4, #12]
 800720c:	bd10      	pop	{r4, pc}

0800720e <__sclose>:
 800720e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007212:	f000 b831 	b.w	8007278 <_close_r>
	...

08007218 <_write_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d07      	ldr	r5, [pc, #28]	; (8007238 <_write_r+0x20>)
 800721c:	4604      	mov	r4, r0
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	2200      	movs	r2, #0
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f7fa fac3 	bl	80017b2 <_write>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_write_r+0x1e>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_write_r+0x1e>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20000344 	.word	0x20000344

0800723c <__assert_func>:
 800723c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800723e:	4614      	mov	r4, r2
 8007240:	461a      	mov	r2, r3
 8007242:	4b09      	ldr	r3, [pc, #36]	; (8007268 <__assert_func+0x2c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4605      	mov	r5, r0
 8007248:	68d8      	ldr	r0, [r3, #12]
 800724a:	b14c      	cbz	r4, 8007260 <__assert_func+0x24>
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <__assert_func+0x30>)
 800724e:	9100      	str	r1, [sp, #0]
 8007250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007254:	4906      	ldr	r1, [pc, #24]	; (8007270 <__assert_func+0x34>)
 8007256:	462b      	mov	r3, r5
 8007258:	f000 f81e 	bl	8007298 <fiprintf>
 800725c:	f000 f89f 	bl	800739e <abort>
 8007260:	4b04      	ldr	r3, [pc, #16]	; (8007274 <__assert_func+0x38>)
 8007262:	461c      	mov	r4, r3
 8007264:	e7f3      	b.n	800724e <__assert_func+0x12>
 8007266:	bf00      	nop
 8007268:	2000000c 	.word	0x2000000c
 800726c:	080077bd 	.word	0x080077bd
 8007270:	080077ca 	.word	0x080077ca
 8007274:	080077f8 	.word	0x080077f8

08007278 <_close_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d06      	ldr	r5, [pc, #24]	; (8007294 <_close_r+0x1c>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7fa fab1 	bl	80017ea <_close>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_close_r+0x1a>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_close_r+0x1a>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	20000344 	.word	0x20000344

08007298 <fiprintf>:
 8007298:	b40e      	push	{r1, r2, r3}
 800729a:	b503      	push	{r0, r1, lr}
 800729c:	4601      	mov	r1, r0
 800729e:	ab03      	add	r3, sp, #12
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <fiprintf+0x20>)
 80072a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a6:	6800      	ldr	r0, [r0, #0]
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	f7ff fe31 	bl	8006f10 <_vfiprintf_r>
 80072ae:	b002      	add	sp, #8
 80072b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b4:	b003      	add	sp, #12
 80072b6:	4770      	bx	lr
 80072b8:	2000000c 	.word	0x2000000c

080072bc <_fstat_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_fstat_r+0x20>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	f7fa fa9a 	bl	8001802 <_fstat>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d102      	bne.n	80072d8 <_fstat_r+0x1c>
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	b103      	cbz	r3, 80072d8 <_fstat_r+0x1c>
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	bf00      	nop
 80072dc:	20000344 	.word	0x20000344

080072e0 <_isatty_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d06      	ldr	r5, [pc, #24]	; (80072fc <_isatty_r+0x1c>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	f7fa fa99 	bl	8001822 <_isatty>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_isatty_r+0x1a>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_isatty_r+0x1a>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	20000344 	.word	0x20000344

08007300 <_lseek_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4d07      	ldr	r5, [pc, #28]	; (8007320 <_lseek_r+0x20>)
 8007304:	4604      	mov	r4, r0
 8007306:	4608      	mov	r0, r1
 8007308:	4611      	mov	r1, r2
 800730a:	2200      	movs	r2, #0
 800730c:	602a      	str	r2, [r5, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	f7fa fa92 	bl	8001838 <_lseek>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_lseek_r+0x1e>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_lseek_r+0x1e>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	20000344 	.word	0x20000344

08007324 <__ascii_mbtowc>:
 8007324:	b082      	sub	sp, #8
 8007326:	b901      	cbnz	r1, 800732a <__ascii_mbtowc+0x6>
 8007328:	a901      	add	r1, sp, #4
 800732a:	b142      	cbz	r2, 800733e <__ascii_mbtowc+0x1a>
 800732c:	b14b      	cbz	r3, 8007342 <__ascii_mbtowc+0x1e>
 800732e:	7813      	ldrb	r3, [r2, #0]
 8007330:	600b      	str	r3, [r1, #0]
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	1e10      	subs	r0, r2, #0
 8007336:	bf18      	it	ne
 8007338:	2001      	movne	r0, #1
 800733a:	b002      	add	sp, #8
 800733c:	4770      	bx	lr
 800733e:	4610      	mov	r0, r2
 8007340:	e7fb      	b.n	800733a <__ascii_mbtowc+0x16>
 8007342:	f06f 0001 	mvn.w	r0, #1
 8007346:	e7f8      	b.n	800733a <__ascii_mbtowc+0x16>

08007348 <__malloc_lock>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__malloc_lock+0x8>)
 800734a:	f7ff b8c0 	b.w	80064ce <__retarget_lock_acquire_recursive>
 800734e:	bf00      	nop
 8007350:	20000338 	.word	0x20000338

08007354 <__malloc_unlock>:
 8007354:	4801      	ldr	r0, [pc, #4]	; (800735c <__malloc_unlock+0x8>)
 8007356:	f7ff b8bb 	b.w	80064d0 <__retarget_lock_release_recursive>
 800735a:	bf00      	nop
 800735c:	20000338 	.word	0x20000338

08007360 <_read_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d07      	ldr	r5, [pc, #28]	; (8007380 <_read_r+0x20>)
 8007364:	4604      	mov	r4, r0
 8007366:	4608      	mov	r0, r1
 8007368:	4611      	mov	r1, r2
 800736a:	2200      	movs	r2, #0
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7fa fa02 	bl	8001778 <_read>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_read_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_read_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20000344 	.word	0x20000344

08007384 <__ascii_wctomb>:
 8007384:	b149      	cbz	r1, 800739a <__ascii_wctomb+0x16>
 8007386:	2aff      	cmp	r2, #255	; 0xff
 8007388:	bf85      	ittet	hi
 800738a:	238a      	movhi	r3, #138	; 0x8a
 800738c:	6003      	strhi	r3, [r0, #0]
 800738e:	700a      	strbls	r2, [r1, #0]
 8007390:	f04f 30ff 	movhi.w	r0, #4294967295
 8007394:	bf98      	it	ls
 8007396:	2001      	movls	r0, #1
 8007398:	4770      	bx	lr
 800739a:	4608      	mov	r0, r1
 800739c:	4770      	bx	lr

0800739e <abort>:
 800739e:	b508      	push	{r3, lr}
 80073a0:	2006      	movs	r0, #6
 80073a2:	f000 f82b 	bl	80073fc <raise>
 80073a6:	2001      	movs	r0, #1
 80073a8:	f7fa f9dc 	bl	8001764 <_exit>

080073ac <_raise_r>:
 80073ac:	291f      	cmp	r1, #31
 80073ae:	b538      	push	{r3, r4, r5, lr}
 80073b0:	4604      	mov	r4, r0
 80073b2:	460d      	mov	r5, r1
 80073b4:	d904      	bls.n	80073c0 <_raise_r+0x14>
 80073b6:	2316      	movs	r3, #22
 80073b8:	6003      	str	r3, [r0, #0]
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073c2:	b112      	cbz	r2, 80073ca <_raise_r+0x1e>
 80073c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073c8:	b94b      	cbnz	r3, 80073de <_raise_r+0x32>
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f830 	bl	8007430 <_getpid_r>
 80073d0:	462a      	mov	r2, r5
 80073d2:	4601      	mov	r1, r0
 80073d4:	4620      	mov	r0, r4
 80073d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073da:	f000 b817 	b.w	800740c <_kill_r>
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d00a      	beq.n	80073f8 <_raise_r+0x4c>
 80073e2:	1c59      	adds	r1, r3, #1
 80073e4:	d103      	bne.n	80073ee <_raise_r+0x42>
 80073e6:	2316      	movs	r3, #22
 80073e8:	6003      	str	r3, [r0, #0]
 80073ea:	2001      	movs	r0, #1
 80073ec:	e7e7      	b.n	80073be <_raise_r+0x12>
 80073ee:	2400      	movs	r4, #0
 80073f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073f4:	4628      	mov	r0, r5
 80073f6:	4798      	blx	r3
 80073f8:	2000      	movs	r0, #0
 80073fa:	e7e0      	b.n	80073be <_raise_r+0x12>

080073fc <raise>:
 80073fc:	4b02      	ldr	r3, [pc, #8]	; (8007408 <raise+0xc>)
 80073fe:	4601      	mov	r1, r0
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	f7ff bfd3 	b.w	80073ac <_raise_r>
 8007406:	bf00      	nop
 8007408:	2000000c 	.word	0x2000000c

0800740c <_kill_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	; (800742c <_kill_r+0x20>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	f7fa f993 	bl	8001744 <_kill>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d102      	bne.n	8007428 <_kill_r+0x1c>
 8007422:	682b      	ldr	r3, [r5, #0]
 8007424:	b103      	cbz	r3, 8007428 <_kill_r+0x1c>
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	bf00      	nop
 800742c:	20000344 	.word	0x20000344

08007430 <_getpid_r>:
 8007430:	f7fa b980 	b.w	8001734 <_getpid>

08007434 <_init>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr

08007440 <_fini>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	bf00      	nop
 8007444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007446:	bc08      	pop	{r3}
 8007448:	469e      	mov	lr, r3
 800744a:	4770      	bx	lr
